{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./react/features/base/util/helpers.js","webpack:///./react/features/base/util/httpUtils.js","webpack:///./react/features/base/util/uri.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/base/util/loadScript.web.js","webpack:///./react/features/base/util/index.js","webpack:///./react/features/analytics/handlers/AbstractHandler.js","webpack:///./react/features/analytics/handlers/GoogleAnalyticsHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","levels","trace","debug","info","log","warn","error","Logger","consoleTransport","console","globalTransports","logger","arguments","level","args","Array","slice","callerInfo","methodName","fileLocation","line","column","Error","stack","split","length","match","indexOf","substr","getCallerInfo","transports","concat","id","apply","format","this","methods","keys","addGlobalTransport","transport","push","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","__filename","__webpack_exports__","getJitsiMeetGlobalNS","assignIfDefined","reportError","require","getLogger","window","JitsiMeetJS","app","target","source","to","nextKey","e","msg","onerror","doGetJSON","url","fetch","then","response","jsonify","json","ok","result","Promise","reject","catch","APP_LINK_SCHEME","URI_PROTOCOL_PATTERN","getLocationContextRoot","parseStandardURIString","parseURIString","toURLString","_ROOM_EXCLUDE_PATTERN","_URI_AUTHORITY_PATTERN","_URI_PATH_PATTERN","_fixURIStringScheme","uri","regex","RegExp","exec","protocol","toLowerCase","substring","lastIndex","startsWith","pathname","contextRootEndIndex","lastIndexOf","_objectToURLParamsArray","obj","params","encodeURIComponent","JSON","stringify","str","toString","_standardURIToString","replace","authority","userinfoEndIndex","host","portBeginIndex","port","hostname","hashBeginIndex","search","hash","contextRoot","room","undefined","fixedRoom","_fixRoom","thiz","URL","href","tmp","serverURL","scheme","endsWith","domain","roomName","jwt","urlPrefix","urlParamsArray","urlParamsString","join","urlObjectToString","String","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","forEach","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","len","arg","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","idLoggers","loggers","curLevel","setLogLevelById","setLogLevel","loadScript","resolve","util","ScriptUtil","helpers","httpUtils","AbstractHandler","constructor","_enabled","_ignoredEvents","_extractName","event","type","action","actionSubject","_shouldIgnore","_base_util__WEBPACK_IMPORTED_MODULE_0__","_AbstractHandler__WEBPACK_IMPORTED_MODULE_1__","globalNS","analyticsHandlers","super","_userProperties","googleAnalyticsTrackingId","_initGoogleAnalytics","a","document","q","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","ga","_extractValue","attributes","Math","round","parseFloat","_extractLabel","labelsArray","map","_userPropertiesString","setUserProperties","userProps","filter","sendEvent","gaEvent","eventCategory","eventAction","eventLabel","isNaN","eventValue"],"mappings":"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","file":"analytics-ga.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 897);\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url) {\n    return fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n}\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '^([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            logger.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(URI_PROTOCOL_PATTERN, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    // First normalize the given url. It come as o.url or split into o.serverURL\n    // and o.room.\n    let tmp;\n\n    if (o.serverURL && o.room) {\n        tmp = new URL(o.room, o.serverURL).toString();\n    } else if (o.room) {\n        tmp = o.room;\n    } else {\n        tmp = o.url || '';\n    }\n\n    const url = parseStandardURIString(_fixURIStringScheme(tmp));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const urlPrefix of [ 'config', 'interfaceConfig', 'devices' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${urlPrefix}Overwrite`]\n                    || o[urlPrefix]\n                    || o[`${urlPrefix}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${urlPrefix}.${urlParamsArray.join(`&${urlPrefix}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// @flow\n\ndeclare var JitsiMeetJS: Object;\n\n/**\n * Loads a script from a specific URL. The script will be interpreted upon load.\n *\n * @param {string} url - The url to be loaded.\n * @returns {Promise} Resolved with no arguments when the script is loaded and\n * rejected with the error from JitsiMeetJS.ScriptUtil.loadScript method.\n */\nexport function loadScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) =>\n        JitsiMeetJS.util.ScriptUtil.loadScript(\n            url,\n            /* async */ true,\n            /* prepend */ false,\n            /* relativeURL */ false,\n            /* loadCallback */ resolve,\n            /* errorCallback */ reject));\n}\n","export * from './helpers';\nexport * from './httpUtils';\nexport * from './loadScript';\nexport * from './uri';\n","/**\n * Abstract implementation of analytics handler\n */\nexport default class AbstractHandler {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._enabled = false;\n        this._ignoredEvents\n            = [ 'e2e_rtt', 'rtp.stats', 'rtt.by.region', 'available.device',\n                'stream.switch.delay', 'ice.state.changed', 'ice.duration' ];\n    }\n\n    /**\n     * Extracts a name for the event from the event properties.\n     *\n     * @param {Object} event - The analytics event.\n     * @returns {string} - The extracted name.\n     */\n    _extractName(event) {\n        // Page events have a single 'name' field.\n        if (event.type === 'page') {\n            return event.name;\n        }\n\n        const {\n            action,\n            actionSubject,\n            source\n        } = event;\n\n        // All events have action, actionSubject, and source fields. All\n        // three fields are required, and often jitsi-meet and\n        // lib-jitsi-meet use the same value when separate values are not\n        // necessary (i.e. event.action == event.actionSubject).\n        // Here we concatenate these three fields, but avoid adding the same\n        // value twice, because it would only make the event's name harder\n        // to read.\n        let name = action;\n\n        if (actionSubject && actionSubject !== action) {\n            name = `${actionSubject}.${action}`;\n        }\n        if (source && source !== action) {\n            name = `${source}.${name}`;\n        }\n\n        return name;\n    }\n\n    /**\n     * Checks if an event should be ignored or not.\n     *\n     * @param {Object} event - The event.\n     * @returns {boolean}\n     */\n    _shouldIgnore(event) {\n        if (!event || !this._enabled) {\n            return true;\n        }\n\n        // Temporary removing some of the events that are too noisy.\n        return this._ignoredEvents.indexOf(event.action) !== -1;\n    }\n}\n","/* global ga */\n\nimport { getJitsiMeetGlobalNS } from '../../base/util';\n\nimport AbstractHandler from './AbstractHandler';\n\n/**\n * Analytics handler for Google Analytics.\n */\nclass GoogleAnalyticsHandler extends AbstractHandler {\n\n    /**\n     * Creates new instance of the GA analytics handler.\n     *\n     * @param {Object} options -\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\n     * required by the GA API.\n     */\n    constructor(options) {\n        super();\n\n        this._userProperties = {};\n\n        if (!options.googleAnalyticsTrackingId) {\n            throw new Error('Failed to initialize Google Analytics handler, no tracking ID');\n        }\n\n        this._enabled = true;\n        this._initGoogleAnalytics(options);\n    }\n\n    /**\n     * Initializes the ga object.\n     *\n     * @param {Object} options -\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\n     * required by the GA API.\n     * @returns {void}\n     */\n    _initGoogleAnalytics(options) {\n        /**\n         * TODO: Keep this local, there's no need to add it to window.\n         */\n        /* eslint-disable */\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n        /* eslint-enable */\n        ga('create', options.googleAnalyticsTrackingId, 'auto');\n        ga('send', 'pageview');\n    }\n\n    /**\n     * Extracts the integer to use for a Google Analytics event's value field\n     * from a lib-jitsi-meet analytics event.\n     *\n     * @param {Object} event - The lib-jitsi-meet analytics event.\n     * @returns {number} - The integer to use for the 'value' of a Google\n     * analytics event, or NaN if the lib-jitsi-meet event doesn't contain a\n     * suitable value.\n     * @private\n     */\n    _extractValue(event) {\n        let value = event && event.attributes && event.attributes.value;\n\n        // Try to extract an integer from the \"value\" attribute.\n        value = Math.round(parseFloat(value));\n\n        return value;\n    }\n\n    /**\n     * Extracts the string to use for a Google Analytics event's label field\n     * from a lib-jitsi-meet analytics event.\n     *\n     * @param {Object} event - The lib-jitsi-meet analytics event.\n     * @returns {string} - The string to use for the 'label' of a Google\n     * analytics event.\n     * @private\n     */\n    _extractLabel(event) {\n        const { attributes = {} } = event;\n        const labelsArray\n            = Object.keys(attributes).map(key => `${key}=${attributes[key]}`);\n\n        labelsArray.push(this._userPropertiesString);\n\n        return labelsArray.join('&');\n    }\n\n    /**\n     * Sets the permanent properties for the current session.\n     *\n     * @param {Object} userProps - The permanent portperties.\n     * @returns {void}\n     */\n    setUserProperties(userProps = {}) {\n        if (!this._enabled) {\n            return;\n        }\n\n        // The label field is limited to 500B. We will concatenate all\n        // attributes of the event, except the user agent because it may be\n        // lengthy and is probably included from elsewhere.\n        const filter = [ 'user_agent', 'callstats_name' ];\n\n        this._userPropertiesString\n            = Object.keys(userProps)\n                .filter(key => filter.indexOf(key) === -1)\n                .map(key => `permanent_${key}=${userProps[key]}`)\n                .join('&');\n    }\n\n    /**\n     * This is the entry point of the API. The function sends an event to\n     * google analytics. The format of the event is described in\n     * analyticsAdapter in lib-jitsi-meet.\n     *\n     * @param {Object} event - The event in the format specified by\n     * lib-jitsi-meet.\n     * @returns {void}\n     */\n    sendEvent(event) {\n        if (this._shouldIgnore(event)) {\n            return;\n        }\n\n        const gaEvent = {\n            'eventCategory': 'jitsi-meet',\n            'eventAction': this._extractName(event),\n            'eventLabel': this._extractLabel(event)\n        };\n        const value = this._extractValue(event);\n\n        if (!isNaN(value)) {\n            gaEvent.eventValue = value;\n        }\n\n        ga('send', 'event', gaEvent);\n    }\n\n}\n\nconst globalNS = getJitsiMeetGlobalNS();\n\nglobalNS.analyticsHandlers = globalNS.analyticsHandlers || [];\nglobalNS.analyticsHandlers.push(GoogleAnalyticsHandler);\n"],"sourceRoot":""}