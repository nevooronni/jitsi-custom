{"version":3,"sources":["webpack://JitsiMeetExternalAPI/webpack/universalModuleDefinition","webpack://JitsiMeetExternalAPI/webpack/bootstrap","webpack://JitsiMeetExternalAPI/./modules/API/external/functions.js","webpack://JitsiMeetExternalAPI/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/uri.js","webpack://JitsiMeetExternalAPI/./modules/API/constants.js","webpack://JitsiMeetExternalAPI/./react/features/base/config/parseURLParams.js","webpack://JitsiMeetExternalAPI/./modules/transport/PostMessageTransportBackend.js","webpack://JitsiMeetExternalAPI/./modules/transport/constants.js","webpack://JitsiMeetExternalAPI/./modules/transport/Transport.js","webpack://JitsiMeetExternalAPI/./modules/transport/index.js","webpack://JitsiMeetExternalAPI/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/helpers.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/httpUtils.js","webpack://JitsiMeetExternalAPI/./node_modules/events/events.js","webpack://JitsiMeetExternalAPI/./node_modules/postis/src/index.js","webpack://JitsiMeetExternalAPI/./modules/API/external/index.js","webpack://JitsiMeetExternalAPI/./modules/API/external/external_api.js","webpack://JitsiMeetExternalAPI/./node_modules/jitsi-meet-logger/lib/LogCollector.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__filename","__webpack_exports__","getAvailableDevices","getCurrentDevices","isDeviceChangeAvailable","isDeviceListAvailable","isMultipleAudioInputSupported","setAudioInputDevice","setAudioOutputDevice","setVideoInputDevice","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__","logger","Logger","getLogger","transport","sendRequest","type","catch","e","error","deviceType","label","id","_setDevice","kind","device","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","removeGlobalTransport","transports","format","push","setLogLevelById","level","length","setLevel","setLogLevel","urlObjectToString","require","APP_LINK_SCHEME","_URI_AUTHORITY_PATTERN","_URI_PATH_PATTERN","URI_PROTOCOL_PATTERN","_fixURIStringScheme","uri","regex","RegExp","match","exec","protocol","toLowerCase","substring","lastIndex","startsWith","_objectToURLParamsArray","obj","params","encodeURIComponent","JSON","stringify","warn","parseStandardURIString","str","toString","_standardURIToString","pathname","replace","authority","userinfoEndIndex","indexOf","host","portBeginIndex","lastIndexOf","port","hostname","hashBeginIndex","search","hash","thiz","this","tmp","url","serverURL","room","URL","scheme","endsWith","domain","contextRoot","roomName","jwt","urlPrefix","urlParamsArray","urlParamsString","join","undefined","API_ID","dontParse","source","paramStr","paramParts","substr","split","firstParam","forEach","part","param","parse","decodeURIComponent","reportError","String","parseURLParams","location","jitsi_meet_external_api_id","DEFAULT_POSTIS_OPTIONS","opener","parent","LEGACY_INCOMING_METHODS","LEGACY_OUTGOING_METHODS","POSTIS_METHOD_NAME","PostMessageTransportBackend","constructor","enableLegacyFormat","postisOptions","postis","Postis","_objectSpread","_enableLegacyFormat","method","listen","_legacyMessageReceivedCallback","_receiveCallback","message","data","_sendLegacyMessage","_ref","_objectWithoutProperties","send","dispose","destroy","setReceiveCallback","callback","MESSAGE_TYPE_EVENT","MESSAGE_TYPE_REQUEST","MESSAGE_TYPE_RESPONSE","Transport","backend","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","addListener","on","setBackend","_disposeBackend","_backend","_onMessageReceived","handler","delete","emit","result","clear","removeAllListeners","eventName","args","listenersForEvent","isProcessed","size","listener","add","set","removeListener","sendEvent","event","request","Promise","reject","Error","resolve","PostMessageTransportBackend_PostMessageTransportBackend","Transport_Transport","scope","getJitsiMeetGlobalNS","setExternalTransportBackend","externalTransportBackend","trace","debug","info","log","consoleTransport","console","globalTransports","arguments","Array","slice","callerInfo","methodName","fileLocation","line","column","stack","getCallerInfo","concat","apply","methods","keys","transportIdx","splice","DEBUG","INFO","LOG","WARN","ERROR","JitsiMeetJS","app","msg","onerror","EventEmitter","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","er","len","listeners","err","context","newListener","warned","once","fired","g","list","position","listenerCount","evlistener","emitter","options","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","listenersForMethod","addEventListener","listenBufferForMethod","j","opts","postMessage","setTimeout","clearInterval","removeEventListener","readyCheckID","Date","Math","random","setInterval","default","ALWAYS_ON_TOP_FILENAMES","commands","avatarUrl","displayName","email","hangup","subject","submitFeedback","toggleAudio","toggleChat","toggleFilmStrip","toggleShareScreen","toggleVideo","events","avatar-changed","audio-availability-changed","audio-mute-status-changed","device-list-changed","display-name-change","email-change","feedback-submitted","feedback-prompt-displayed","filmstrip-display-changed","incoming-message","outgoing-message","participant-joined","participant-left","proxy-connection-event","video-ready-to-close","video-conference-joined","video-conference-left","video-availability-changed","video-mute-status-changed","screen-sharing-status-changed","subject-change","changeParticipantNumber","APIInstance","number","_numberOfParticipants","generateURL","noSSL","parseSizeParam","parsedValue","JitsiMeetExternalAPI","super","width","height","parentNode","document","body","configOverwrite","interfaceConfigOverwrite","onload","invitees","devices","parseArguments","_parentNode","_url","_createIFrame","_transport","_frame","contentWindow","isArray","invite","_isLargeVideoVisible","_participants","_myUserID","_onStageParticipant","_setupListeners","frameName","createElement","allow","src","_setSize","setAttribute","style","border","appendChild","_getAlwaysOnTopResources","iframeWindow","iframeDocument","baseURL","base","querySelector","href","map","filename","_getOnStageParticipant","_getLargeVideo","iframe","getIFrame","getElementById","parsedHeight","parsedWidth","userID","avatarURL","formattedDisplayName","user","displayname","isVisible","addEventListeners","removeChild","executeCommand","executeCommands","commandList","isAudioAvailable","isAudioMuted","getAvatarURL","participantId","getDisplayName","getEmail","_getFormattedDisplayName","getNumberOfParticipants","isVideoAvailable","isVideoMuted","removeEventListeners","eventList","sendProxyConnectionEvent","deviceId","_getElectronPopupsConfig","electronPopupsConfig","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","// @flow\n\nimport Logger from 'jitsi-meet-logger';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * Returns Promise that resolves with result an list of available devices.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @returns {Promise}\n */\nexport function getAvailableDevices(transport: Object) {\n    return transport.sendRequest({\n        type: 'devices',\n        name: 'getAvailableDevices'\n    }).catch(e => {\n        logger.error(e);\n\n        return {};\n    });\n}\n\n/**\n * Returns Promise that resolves with current selected devices.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @returns {Promise}\n */\nexport function getCurrentDevices(transport: Object) {\n    return transport.sendRequest({\n        type: 'devices',\n        name: 'getCurrentDevices'\n    }).catch(e => {\n        logger.error(e);\n\n        return {};\n    });\n}\n\n/**\n * Returns Promise that resolves with true if the device change is available\n * and with false if not.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @param {string} [deviceType] - Values - 'output', 'input' or undefined.\n * Default - 'input'.\n * @returns {Promise}\n */\nexport function isDeviceChangeAvailable(transport: Object, deviceType: string) {\n    return transport.sendRequest({\n        deviceType,\n        type: 'devices',\n        name: 'isDeviceChangeAvailable'\n    });\n}\n\n/**\n * Returns Promise that resolves with true if the device list is available\n * and with false if not.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @returns {Promise}\n */\nexport function isDeviceListAvailable(transport: Object) {\n    return transport.sendRequest({\n        type: 'devices',\n        name: 'isDeviceListAvailable'\n    });\n}\n\n/**\n * Returns Promise that resolves with true if multiple audio input is supported\n * and with false if not.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @returns {Promise}\n */\nexport function isMultipleAudioInputSupported(transport: Object) {\n    return transport.sendRequest({\n        type: 'devices',\n        name: 'isMultipleAudioInputSupported'\n    });\n}\n\n/**\n * Sets the audio input device to the one with the label or id that is passed.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @param {string} label - The label of the new device.\n * @param {string} id - The id of the new device.\n * @returns {Promise}\n */\nexport function setAudioInputDevice(transport: Object, label: string, id: string) {\n    return _setDevice(transport, {\n        id,\n        kind: 'audioinput',\n        label\n    });\n}\n\n/**\n * Sets the audio output device to the one with the label or id that is passed.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @param {string} label - The label of the new device.\n * @param {string} id - The id of the new device.\n * @returns {Promise}\n */\nexport function setAudioOutputDevice(transport: Object, label: string, id: string) {\n    return _setDevice(transport, {\n        id,\n        kind: 'audiooutput',\n        label\n    });\n}\n\n/**\n * Sets the currently used device to the one that is passed.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @param {Object} device - The new device to be used.\n * @returns {Promise}\n */\nfunction _setDevice(transport: Object, device) {\n    return transport.sendRequest({\n        type: 'devices',\n        name: 'setDevice',\n        device\n    });\n}\n\n/**\n * Sets the video input device to the one with the label or id that is passed.\n *\n * @param {Transport} transport - The @code{Transport} instance responsible for\n * the external communication.\n * @param {string} label - The label of the new device.\n * @param {string} id - The id of the new device.\n * @returns {Promise}\n */\nexport function setVideoInputDevice(transport: Object, label: string, id: string) {\n    return _setDevice(transport, {\n        id,\n        kind: 'videoinput',\n        label\n    });\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '^([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            logger.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(URI_PROTOCOL_PATTERN, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    // First normalize the given url. It come as o.url or split into o.serverURL\n    // and o.room.\n    let tmp;\n\n    if (o.serverURL && o.room) {\n        tmp = new URL(o.room, o.serverURL).toString();\n    } else if (o.room) {\n        tmp = o.room;\n    } else {\n        tmp = o.url || '';\n    }\n\n    const url = parseStandardURIString(_fixURIStringScheme(tmp));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const urlPrefix of [ 'config', 'interfaceConfig', 'devices' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${urlPrefix}Overwrite`]\n                    || o[urlPrefix]\n                    || o[`${urlPrefix}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${urlPrefix}.${urlParamsArray.join(`&${urlPrefix}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n","// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nexport const API_ID\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\n","/* @flow */\n\nimport { reportError } from '../util';\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n    const paramParts = (paramStr && paramStr.substr(1).split('&')) || [];\n\n    // Detect and ignore hash params for hash routers.\n    if (source === 'hash' && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            reportError(\n                e, `Failed to parse URL parameter value: ${String(value)}`);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n","import Postis from 'postis';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nconst LEGACY_INCOMING_METHODS = [\n    'avatar-url',\n    'display-name',\n    'email',\n    'toggle-audio',\n    'toggle-chat',\n    'toggle-film-strip',\n    'toggle-share-screen',\n    'toggle-video',\n    'video-hangup'\n];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nconst LEGACY_OUTGOING_METHODS = [\n    'display-name-change',\n    'incoming-message',\n    'outgoing-message',\n    'participant-joined',\n    'participant-left',\n    'video-conference-joined',\n    'video-conference-left',\n    'video-ready-to-close'\n];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\n        // eslint-disable-next-line new-cap\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(method =>\n                this.postis.listen(\n                    method,\n                    params =>\n                        this._legacyMessageReceivedCallback(method, params)\n                )\n            );\n        }\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n    _legacyMessageReceivedCallback(method, params = {}) {\n        this._receiveCallback({\n            data: {\n                name: method,\n                data: params\n            }\n        });\n    }\n\n    /**\n     * Sends the passed message via postis using the old format.\n     *\n     * @param {Object} legacyMessage - The message to be sent.\n     * @returns {void}\n     */\n    _sendLegacyMessage({ name, ...data }) {\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n            this.postis.send({\n                method: name,\n                params: data\n            });\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n\n        if (this._enableLegacyFormat) {\n            // For the legacy use case we don't need any new fields defined in\n            // Transport class. That's why we are passing only the original\n            // object passed by the consumer of the Transport class which is\n            // message.data.\n            this._sendLegacyMessage(message.data || {});\n        }\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants';\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (typeof result !== 'undefined') {\n                    resolve(result);\n\n                // eslint-disable-next-line no-negated-condition\n                } else if (typeof error !== 'undefined') {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            this._backend.send({\n                type: MESSAGE_TYPE_REQUEST,\n                data: request,\n                id\n            });\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n","// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\nimport { API_ID } from '../API/constants';\nimport { getJitsiMeetGlobalNS } from '../../react/features/base/util';\n\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\nimport Transport from './Transport';\n\nexport {\n    PostMessageTransportBackend,\n    Transport\n};\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nconst postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nlet transport;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nexport function getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\n    transport.setBackend(externalTransportBackend);\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url) {\n    return fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n","// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = require('./external_api').default;\n","import EventEmitter from 'events';\n\nimport { urlObjectToString } from '../../../react/features/base/util/uri';\nimport {\n    PostMessageTransportBackend,\n    Transport\n} from '../../transport';\n\nimport electronPopupsConfig from './electronPopupsConfig.json';\nimport {\n    getAvailableDevices,\n    getCurrentDevices,\n    isDeviceChangeAvailable,\n    isDeviceListAvailable,\n    isMultipleAudioInputSupported,\n    setAudioInputDevice,\n    setAudioOutputDevice,\n    setVideoInputDevice\n} from './functions';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst ALWAYS_ON_TOP_FILENAMES = [\n    'css/all.css', 'libs/alwaysontop.min.js'\n];\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    subject: 'subject',\n    submitFeedback: 'submit-feedback',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    'avatar-changed': 'avatarChanged',\n    'audio-availability-changed': 'audioAvailabilityChanged',\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\n    'device-list-changed': 'deviceListChanged',\n    'display-name-change': 'displayNameChange',\n    'email-change': 'emailChange',\n    'feedback-submitted': 'feedbackSubmitted',\n    'feedback-prompt-displayed': 'feedbackPromptDisplayed',\n    'filmstrip-display-changed': 'filmstripDisplayChanged',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'proxy-connection-event': 'proxyConnectionEvent',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft',\n    'video-availability-changed': 'videoAvailabilityChanged',\n    'video-mute-status-changed': 'videoMuteStatusChanged',\n    'screen-sharing-status-changed': 'screenSharingStatusChanged',\n    'subject-change': 'subjectChange'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance._numberOfParticipants += number;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSSL] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    return urlObjectToString({\n        ...options,\n        url:\n            `${options.noSSL ? 'http' : 'https'}://${\n                domain}/#jitsi_meet_external_api_id=${id}`\n    });\n}\n\n/**\n * Parses the arguments passed to the constructor. If the old format is used\n * the function translates the arguments to the new format.\n *\n * @param {Array} args - The arguments to be parsed.\n * @returns {Object} JS object with properties.\n */\nfunction parseArguments(args) {\n    if (!args.length) {\n        return {};\n    }\n\n    const firstArg = args[0];\n\n    switch (typeof firstArg) {\n    case 'string': // old arguments format\n    case undefined: {\n        // Not sure which format but we are trying to parse the old\n        // format because if the new format is used everything will be undefined\n        // anyway.\n        const [\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt,\n            onload\n        ] = args;\n\n        return {\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt,\n            onload\n        };\n    }\n    case 'object': // new arguments format\n        return args[0];\n    default:\n        throw new Error('Can\\'t parse the arguments!');\n    }\n}\n\n/**\n * Compute valid values for height and width. If a number is specified it's\n * treated as pixel units. If the value is expressed in px, em, pt or\n * percentage, it's used as is.\n *\n * @param {any} value - The value to be parsed.\n * @returns {string|undefined} The parsed value that can be used for setting\n * sizes through the style property. If invalid value is passed the method\n * retuns undefined.\n */\nfunction parseSizeParam(value) {\n    let parsedValue;\n\n    // This regex parses values of the form 100px, 100em, 100pt or 100%.\n    // Values like 100 or 100px are handled outside of the regex, and\n    // invalid values will be ignored and the minimum will be used.\n    const re = /([0-9]*\\.?[0-9]+)(em|pt|px|%)$/;\n\n    if (typeof value === 'string' && String(value).match(re) !== null) {\n        parsedValue = value;\n    } else if (typeof value === 'number') {\n        parsedValue = `${value}px`;\n    }\n\n    return parsedValue;\n}\n\n\n/**\n * The IFrame API interface class.\n */\nexport default class JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {Object} [options] - Optional arguments.\n     * @param {string} [options.roomName] - The name of the room to join.\n     * @param {number|string} [options.width] - Width of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} [options.height] - Height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [options.configOverwrite] - Object containing\n     * configuration options defined in config.js to be overridden.\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [options.noSSL] - If the value is true https won't be\n     * used.\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     * @param {string} [options.onload] - The onload function that will listen\n     * for iframe onload event.\n     * @param {Array<Object>} [options.invitees] - Array of objects containing\n     * information about new participants that will be invited in the call.\n     * @param {Array<Object>} [options.devices] - Array of objects containing\n     * information about the initial devices that will be used in the call.\n     */\n    constructor(domain, ...args) {\n        super();\n        const {\n            roomName = '',\n            width = '100%',\n            height = '100%',\n            parentNode = document.body,\n            configOverwrite = {},\n            interfaceConfigOverwrite = {},\n            noSSL = false,\n            jwt = undefined,\n            onload = undefined,\n            invitees,\n            devices\n        } = parseArguments(args);\n\n        this._parentNode = parentNode;\n        this._url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName,\n            devices\n        });\n        this._createIFrame(height, width, onload);\n        this._transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                postisOptions: {\n                    scope: `jitsi_meet_external_api_${id}`,\n                    window: this._frame.contentWindow\n                }\n            })\n        });\n        if (Array.isArray(invitees) && invitees.length > 0) {\n            this.invite(invitees);\n        }\n        this._isLargeVideoVisible = true;\n        this._numberOfParticipants = 0;\n        this._participants = {};\n        this._myUserID = undefined;\n        this._onStageParticipant = undefined;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} width - The with of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {Function} onload - The function that will listen\n     * for onload event.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width, onload) {\n        const frameName = `jitsiConferenceFrame${id}`;\n\n        this._frame = document.createElement('iframe');\n        this._frame.allow = 'camera; microphone';\n        this._frame.src = this._url;\n        this._frame.name = frameName;\n        this._frame.id = frameName;\n        this._setSize(height, width);\n        this._frame.setAttribute('allowFullScreen', 'true');\n        this._frame.style.border = 0;\n\n        if (onload) {\n            // waits for iframe resources to load\n            // and fires event when it is done\n            this._frame.onload = onload;\n        }\n\n        this._frame = this._parentNode.appendChild(this._frame);\n    }\n\n    /**\n     * Returns arrays with the all resources for the always on top feature.\n     *\n     * @returns {Array<string>}\n     */\n    _getAlwaysOnTopResources() {\n        const iframeWindow = this._frame.contentWindow;\n        const iframeDocument = iframeWindow.document;\n        let baseURL = '';\n        const base = iframeDocument.querySelector('base');\n\n        if (base && base.href) {\n            baseURL = base.href;\n        } else {\n            const { protocol, host } = iframeWindow.location;\n\n            baseURL = `${protocol}//${host}`;\n        }\n\n        return ALWAYS_ON_TOP_FILENAMES.map(\n            filename => (new URL(filename, baseURL)).href\n        );\n    }\n\n    /**\n     * Returns the id of the on stage participant.\n     *\n     * @returns {string} - The id of the on stage participant.\n     */\n    _getOnStageParticipant() {\n        return this._onStageParticipant;\n    }\n\n\n    /**\n     * Getter for the large video element in Jitsi Meet.\n     *\n     * @returns {HTMLElement|undefined} - The large video.\n     */\n    _getLargeVideo() {\n        const iframe = this.getIFrame();\n\n        if (!this._isLargeVideoVisible\n                || !iframe\n                || !iframe.contentWindow\n                || !iframe.contentWindow.document) {\n            return;\n        }\n\n        return iframe.contentWindow.document.getElementById('largeVideo');\n    }\n\n    /**\n     * Sets the size of the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe.\n     * @param {number|string} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _setSize(height, width) {\n        const parsedHeight = parseSizeParam(height);\n        const parsedWidth = parseSizeParam(width);\n\n        if (parsedHeight !== undefined) {\n            this._frame.style.height = parsedHeight;\n        }\n\n        if (parsedWidth !== undefined) {\n            this._frame.style.width = parsedWidth;\n        }\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n        this._transport.on('event', ({ name, ...data }) => {\n            const userID = data.id;\n\n            switch (name) {\n            case 'video-conference-joined':\n                this._myUserID = userID;\n                this._participants[userID] = {\n                    avatarURL: data.avatarURL\n                };\n\n            // eslint-disable-next-line no-fallthrough\n            case 'participant-joined': {\n                this._participants[userID] = this._participants[userID] || {};\n                this._participants[userID].displayName = data.displayName;\n                this._participants[userID].formattedDisplayName\n                    = data.formattedDisplayName;\n                changeParticipantNumber(this, 1);\n                break;\n            }\n            case 'participant-left':\n                changeParticipantNumber(this, -1);\n                delete this._participants[userID];\n                break;\n            case 'display-name-change': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.displayName = data.displayname;\n                    user.formattedDisplayName = data.formattedDisplayName;\n                }\n                break;\n            }\n            case 'email-change': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.email = data.email;\n                }\n                break;\n            }\n            case 'avatar-changed': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.avatarURL = data.avatarURL;\n                }\n                break;\n            }\n            case 'on-stage-participant-changed':\n                this._onStageParticipant = userID;\n                this.emit('largeVideoChanged');\n                break;\n            case 'large-video-visibility-changed':\n                this._isLargeVideoVisible = data.isVisible;\n                this.emit('largeVideoChanged');\n                break;\n            case 'video-conference-left':\n                changeParticipantNumber(this, -1);\n                delete this._participants[this._myUserID];\n                break;\n            }\n\n            const eventName = events[name];\n\n            if (eventName) {\n                this.emit(eventName, data);\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * {@code incomingMessage} - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * {@code outgoingMessage} - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * {@code displayNameChanged} - receives event notifications about display\n     * name change. The listener will receive object with the following\n     * structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * {@code participantJoined} - receives event notifications about new\n     * participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * {@code participantLeft} - receives event notifications about the\n     * participant that left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * {@code video-conference-joined} - receives event notifications about the\n     * local user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * {@code video-conference-left} - receives event notifications about the\n     * local user has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * {@code screenSharingStatusChanged} - receives event notifications about\n     * turning on/off the local user screen sharing.\n     * The listener will receive object with the following structure:\n     * {{\n     * on: on //whether screen sharing is on\n     * }}\n     * {@code readyToClose} - all hangup operations are completed and Jitsi Meet\n     * is ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.emit('_willDispose');\n        this._transport.dispose();\n        this.removeAllListeners();\n        if (this._frame) {\n            this._frame.parentNode.removeChild(this._frame);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * {@code displayName} - Sets the display name of the local participant to\n     * the value passed in the arguments array.\n     * {@code subject} - Sets the subject of the conference, the value passed\n     * in the arguments array. Note: Available only for moderator.\n     *\n     * {@code toggleAudio} - Mutes / unmutes audio with no arguments.\n     * {@code toggleVideo} - Mutes / unmutes video with no arguments.\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip with no arguments.\n     *\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n        this._transport.sendEvent({\n            data: args,\n            name: commands[name]\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * {@code displayName} - Sets the display name of the local participant to\n     * the value passed in the arguments array.\n     * {@code toggleAudio} - Mutes / unmutes audio. No arguments.\n     * {@code toggleVideo} - Mutes / unmutes video. No arguments.\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip. No arguments.\n     * {@code toggleChat} - Hides / shows chat. No arguments.\n     * {@code toggleShareScreen} - Starts / stops screen sharing. No arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Returns Promise that resolves with a list of available devices.\n     *\n     * @returns {Promise}\n     */\n    getAvailableDevices() {\n        return getAvailableDevices(this._transport);\n    }\n\n    /**\n     * Returns Promise that resolves with current selected devices.\n     *\n     * @returns {Promise}\n     */\n    getCurrentDevices() {\n        return getCurrentDevices(this._transport);\n    }\n\n    /**\n     * Check if the audio is available.\n     *\n     * @returns {Promise} - Resolves with true if the audio available, with\n     * false if not and rejects on failure.\n     */\n    isAudioAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-audio-available'\n        });\n    }\n\n    /**\n     * Returns Promise that resolves with true if the device change is available\n     * and with false if not.\n     *\n     * @param {string} [deviceType] - Values - 'output', 'input' or undefined.\n     * Default - 'input'.\n     * @returns {Promise}\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return isDeviceChangeAvailable(this._transport, deviceType);\n    }\n\n    /**\n     * Returns Promise that resolves with true if the device list is available\n     * and with false if not.\n     *\n     * @returns {Promise}\n     */\n    isDeviceListAvailable() {\n        return isDeviceListAvailable(this._transport);\n    }\n\n    /**\n     * Returns Promise that resolves with true if multiple audio input is supported\n     * and with false if not.\n     *\n     * @returns {Promise}\n     */\n    isMultipleAudioInputSupported() {\n        return isMultipleAudioInputSupported(this._transport);\n    }\n\n    /**\n     * Invite people to the call.\n     *\n     * @param {Array<Object>} invitees - The invitees.\n     * @returns {Promise} - Resolves on success and rejects on failure.\n     */\n    invite(invitees) {\n        if (!Array.isArray(invitees) || invitees.length === 0) {\n            return Promise.reject(new TypeError('Invalid Argument'));\n        }\n\n        return this._transport.sendRequest({\n            name: 'invite',\n            invitees\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isAudioMuted() {\n        return this._transport.sendRequest({\n            name: 'is-audio-muted'\n        });\n    }\n\n    /**\n     * Returns the avatar URL of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The avatar URL.\n     */\n    getAvatarURL(participantId) {\n        const { avatarURL } = this._participants[participantId] || {};\n\n        return avatarURL;\n    }\n\n    /**\n     * Returns the display name of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The display name.\n     */\n    getDisplayName(participantId) {\n        const { displayName } = this._participants[participantId] || {};\n\n        return displayName;\n    }\n\n    /**\n     * Returns the email of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The email.\n     */\n    getEmail(participantId) {\n        const { email } = this._participants[participantId] || {};\n\n        return email;\n    }\n\n    /**\n     * Returns the formatted display name of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The formatted display name.\n     */\n    _getFormattedDisplayName(participantId) {\n        const { formattedDisplayName }\n            = this._participants[participantId] || {};\n\n        return formattedDisplayName;\n    }\n\n    /**\n     * Returns the iframe that loads Jitsi Meet.\n     *\n     * @returns {HTMLElement} The iframe.\n     */\n    getIFrame() {\n        return this._frame;\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this._numberOfParticipants;\n    }\n\n    /**\n     * Check if the video is available.\n     *\n     * @returns {Promise} - Resolves with true if the video available, with\n     * false if not and rejects on failure.\n     */\n    isVideoAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-video-available'\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isVideoMuted() {\n        return this._transport.sendRequest({\n            name: 'is-video-muted'\n        });\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n\n    /**\n     * Passes an event along to the local conference participant to establish\n     * or update a direct peer connection. This is currently used for developing\n     * wireless screensharing with room integration and it is advised against to\n     * use as its api may change.\n     *\n     * @param {Object} event - An object with information to pass along.\n     * @param {Object} event.data - The payload of the event.\n     * @param {string} event.from - The jid of the sender of the event. Needed\n     * when a reply is to be sent regarding the event.\n     * @returns {void}\n     */\n    sendProxyConnectionEvent(event) {\n        this._transport.sendEvent({\n            data: [ event ],\n            name: 'proxy-connection-event'\n        });\n    }\n\n    /**\n     * Sets the audio input device to the one with the label or id that is\n     * passed.\n     *\n     * @param {string} label - The label of the new device.\n     * @param {string} deviceId - The id of the new device.\n     * @returns {Promise}\n     */\n    setAudioInputDevice(label, deviceId) {\n        return setAudioInputDevice(this._transport, label, deviceId);\n    }\n\n    /**\n     * Sets the audio output device to the one with the label or id that is\n     * passed.\n     *\n     * @param {string} label - The label of the new device.\n     * @param {string} deviceId - The id of the new device.\n     * @returns {Promise}\n     */\n    setAudioOutputDevice(label, deviceId) {\n        return setAudioOutputDevice(this._transport, label, deviceId);\n    }\n\n    /**\n     * Sets the video input device to the one with the label or id that is\n     * passed.\n     *\n     * @param {string} label - The label of the new device.\n     * @param {string} deviceId - The id of the new device.\n     * @returns {Promise}\n     */\n    setVideoInputDevice(label, deviceId) {\n        return setVideoInputDevice(this._transport, label, deviceId);\n    }\n\n    /**\n     * Returns the configuration for electron for the windows that are open\n     * from Jitsi Meet.\n     *\n     * @returns {Promise<Object>}\n     *\n     * NOTE: For internal use only.\n     */\n    _getElectronPopupsConfig() {\n        return Promise.resolve(electronPopupsConfig);\n    }\n}\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n"],"sourceRoot":""}