{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./react/features/local-recording/recording/flac/messageTypes.js","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/local-recording/recording/flac/flacEncodeWorker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","MAIN_THREAD_FINISH","MAIN_THREAD_INIT","MAIN_THREAD_NEW_DATA_ARRIVED","WORKER_LIBFLAC_READY","WORKER_BLOB_READY","DEBUG","levels","trace","debug","info","log","warn","error","Logger","consoleTransport","console","globalTransports","logger","arguments","level","args","Array","slice","callerInfo","methodName","fileLocation","line","column","Error","stack","split","length","match","indexOf","substr","getCallerInfo","transports","concat","id","apply","format","this","methods","keys","addGlobalTransport","transport","push","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","INFO","LOG","WARN","ERROR","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","forEach","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","JSON","formatLogMessage","msg","len","arg","prevMessage","undefined","text","count","_flush","start","_reschedulePublishInterval","window","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","require","__filename","self","FLAC_SCRIPT_LOCATION","importScripts","FLAC_ERRORS","0","1","2","3","4","5","6","7","8","EncoderState","freeze","UNINTIALIZED","WORKING","FINISHED","FLAC_COMPRESSION_LEVEL","Encoder","constructor","sampleRate","bitDepth","bufferSize","_defineProperty","Flac","_sampleRate","_bitDepth","_bufferSize","_encoderId","init_libflac_encoder","init_encoder_stream","_onEncodedData","_onMetadataAvailable","_state","encode","audioData","bufferLength","bufferI32","Int32Array","view","DataView","buffer","index","setInt32","FLAC__stream_encoder_process_interleaved","errorNo","FLAC__stream_encoder_get_state","finish","status","FLAC__stream_encoder_finish","FLAC__stream_encoder_delete","_data","_exportFlacBlob","getBlob","samples","arrays","totalLength","result","Uint8Array","offset","set","mergeUint8Arrays","_flacBuffers","_flacLength","Blob","type","bytes","byteLength","encoder","onmessage","e","data","command","bps","config","postMessage","onready","buf"],"mappings":"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","file":"flacEncodeWorker.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 896);\n","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import {\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * WebWorker that does FLAC encoding using libflac.js\n */\n\nself.FLAC_SCRIPT_LOCATION = '/libs/';\n/* eslint-disable */\nimportScripts('/libs/libflac4-1.3.2.min.js');\n/* eslint-enable */\n\n// There is a number of API calls to libflac.js, which does not conform\n// to the camalCase naming convention, but we cannot change it.\n// So we disable the ESLint rule `new-cap` in this file.\n/* eslint-disable new-cap */\n\n// Flow will complain about the number keys in `FLAC_ERRORS`,\n// ESLint will complain about the `declare` statement.\n// As the current workaround, add an exception for eslint.\n/* eslint-disable flowtype/no-types-missing-file-annotation */\ndeclare var Flac: Object;\n\nconst FLAC_ERRORS = {\n    // The encoder is in the normal OK state and samples can be processed.\n    0: 'FLAC__STREAM_ENCODER_OK',\n\n    // The encoder is in the uninitialized state one of the\n    // FLAC__stream_encoder_init_*() functions must be called before samples can\n    // be processed.\n    1: 'FLAC__STREAM_ENCODER_UNINITIALIZED',\n\n    // An error occurred in the underlying Ogg layer.\n    2: 'FLAC__STREAM_ENCODER_OGG_ERROR',\n\n    // An error occurred in the underlying verify stream decoder; check\n    // FLAC__stream_encoder_get_verify_decoder_state().\n    3: 'FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR',\n\n    // The verify decoder detected a mismatch between the original audio signal\n    // and the decoded audio signal.\n    4: 'FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA',\n\n    // One of the callbacks returned a fatal error.\n    5: 'FLAC__STREAM_ENCODER_CLIENT_ERROR',\n\n    // An I/O error occurred while opening/reading/writing a file. Check errno.\n    6: 'FLAC__STREAM_ENCODER_IO_ERROR',\n\n    // An error occurred while writing the stream; usually, the write_callback\n    // returned an error.\n    7: 'FLAC__STREAM_ENCODER_FRAMING_ERROR',\n\n    // Memory allocation failed.\n    8: 'FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR'\n};\n\n/**\n * States of the {@code Encoder}.\n */\nconst EncoderState = Object.freeze({\n    /**\n     * Initial state, when libflac.js is not initialized.\n     */\n    UNINTIALIZED: 'uninitialized',\n\n    /**\n     * Actively encoding new audio bits.\n     */\n    WORKING: 'working',\n\n    /**\n     * Encoding has finished and encoded bits are available.\n     */\n    FINISHED: 'finished'\n});\n\n/**\n * Default FLAC compression level.\n */\nconst FLAC_COMPRESSION_LEVEL = 5;\n\n/**\n * Concat multiple Uint8Arrays into one.\n *\n * @param {Uint8Array[]} arrays - Array of Uint8 arrays.\n * @param {number} totalLength - Total length of all Uint8Arrays.\n * @returns {Uint8Array}\n */\nfunction mergeUint8Arrays(arrays, totalLength) {\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    const len = arrays.length;\n\n    for (let i = 0; i < len; i++) {\n        const buffer = arrays[i];\n\n        result.set(buffer, offset);\n        offset += buffer.length;\n    }\n\n    return result;\n}\n\n/**\n * Wrapper class around libflac API.\n */\nclass Encoder {\n\n    /**\n     * Flac encoder instance ID. (As per libflac.js API).\n     * @private\n     */\n    _encoderId = 0;\n\n    /**\n     * Sample rate.\n     * @private\n     */\n    _sampleRate;\n\n    /**\n     * Bit depth (bits per sample).\n     * @private\n     */\n    _bitDepth;\n\n    /**\n     * Buffer size.\n     * @private\n     */\n    _bufferSize;\n\n    /**\n     * Buffers to store encoded bits temporarily.\n     */\n    _flacBuffers = [];\n\n    /**\n     * Length of encoded FLAC bits.\n     */\n    _flacLength = 0;\n\n    /**\n     * The current state of the {@code Encoder}.\n     */\n    _state = EncoderState.UNINTIALIZED;\n\n    /**\n     * The ready-for-grab downloadable Blob.\n     */\n    _data = null;\n\n\n    /**\n     * Constructor.\n     * Note: Only create instance when Flac.isReady() returns true.\n     *\n     * @param {number} sampleRate - Sample rate of the raw audio data.\n     * @param {number} bitDepth - Bit depth (bit per sample).\n     * @param {number} bufferSize - The size of each batch.\n     */\n    constructor(sampleRate, bitDepth = 16, bufferSize = 4096) {\n        if (!Flac.isReady()) {\n            throw new Error('libflac is not ready yet!');\n        }\n\n        this._sampleRate = sampleRate;\n        this._bitDepth = bitDepth;\n        this._bufferSize = bufferSize;\n\n        // create the encoder\n        this._encoderId = Flac.init_libflac_encoder(\n            this._sampleRate,\n\n            // Mono channel\n            1,\n            this._bitDepth,\n\n            FLAC_COMPRESSION_LEVEL,\n\n            // Pass 0 in becuase of unknown total samples,\n            0,\n\n            // checksum, FIXME: double-check whether this is necessary\n            true,\n\n            // Auto-determine block size (samples per frame)\n            0\n        );\n\n        if (this._encoderId === 0) {\n            throw new Error('Failed to create libflac encoder.');\n        }\n\n        // initialize the encoder\n        const initResult = Flac.init_encoder_stream(\n            this._encoderId,\n            this._onEncodedData.bind(this),\n            this._onMetadataAvailable.bind(this)\n        );\n\n        if (initResult !== 0) {\n            throw new Error('Failed to initalise libflac encoder.');\n        }\n\n        this._state = EncoderState.WORKING;\n    }\n\n    /**\n     * Receive and encode new data.\n     *\n     * @param {Float32Array} audioData - Raw audio data.\n     * @returns {void}\n     */\n    encode(audioData) {\n        if (this._state !== EncoderState.WORKING) {\n            throw new Error('Encoder is not ready or has finished.');\n        }\n\n        if (!Flac.isReady()) {\n            throw new Error('Flac not ready');\n        }\n        const bufferLength = audioData.length;\n\n        // Convert sample to signed 32-bit integers.\n        // According to libflac documentation:\n        // each sample in the buffers should be a signed integer,\n        // right-justified to the resolution set by\n        // FLAC__stream_encoder_set_bits_per_sample().\n\n        // Here we are using 16 bits per sample, the samples should all be in\n        // the range [-32768,32767]. This is achieved by multipling Float32\n        // numbers with 0x7FFF.\n\n        const bufferI32 = new Int32Array(bufferLength);\n        const view = new DataView(bufferI32.buffer);\n        const volume = 1;\n        let index = 0;\n\n        for (let i = 0; i < bufferLength; i++) {\n            view.setInt32(index, audioData[i] * (0x7FFF * volume), true);\n            index += 4; // 4 bytes (32-bit)\n        }\n\n        // pass it to libflac\n        const status = Flac.FLAC__stream_encoder_process_interleaved(\n            this._encoderId,\n            bufferI32,\n            bufferI32.length\n        );\n\n        if (status !== 1) {\n            // gets error number\n\n            const errorNo\n                = Flac.FLAC__stream_encoder_get_state(this._encoderId);\n\n            logger.error('Error during encoding', FLAC_ERRORS[errorNo]);\n        }\n    }\n\n    /**\n     * Signals the termination of encoding.\n     *\n     * @returns {void}\n     */\n    finish() {\n        if (this._state === EncoderState.WORKING) {\n            this._state = EncoderState.FINISHED;\n\n            const status = Flac.FLAC__stream_encoder_finish(this._encoderId);\n\n            logger.log('Flac encoding finished: ', status);\n\n            // free up resources\n            Flac.FLAC__stream_encoder_delete(this._encoderId);\n\n            this._data = this._exportFlacBlob();\n        }\n    }\n\n    /**\n     * Gets the encoded flac file.\n     *\n     * @returns {Blob} - The encoded flac file.\n     */\n    getBlob() {\n        if (this._state === EncoderState.FINISHED) {\n            return this._data;\n        }\n\n        return null;\n    }\n\n    /**\n     * Converts flac buffer to a Blob.\n     *\n     * @private\n     * @returns {void}\n     */\n    _exportFlacBlob() {\n        const samples = mergeUint8Arrays(this._flacBuffers, this._flacLength);\n\n        const blob = new Blob([ samples ], { type: 'audio/flac' });\n\n        return blob;\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Callback function for saving encoded Flac data.\n     * This is invoked by libflac.\n     *\n     * @private\n     * @param {Uint8Array} buffer - The encoded Flac data.\n     * @param {number} bytes - Number of bytes in the data.\n     * @returns {void}\n     */\n    _onEncodedData(buffer, bytes) {\n        this._flacBuffers.push(buffer);\n        this._flacLength += buffer.byteLength;\n    }\n    /* eslint-enable no-unused-vars */\n\n    /**\n     * Callback function for receiving metadata.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onMetadataAvailable = () => {\n        // reserved for future use\n    }\n}\n\n\nlet encoder = null;\n\nself.onmessage = function(e) {\n\n    switch (e.data.command) {\n    case MAIN_THREAD_INIT:\n    {\n        const bps = e.data.config.bps;\n        const sampleRate = e.data.config.sampleRate;\n\n        if (Flac.isReady()) {\n            encoder = new Encoder(sampleRate, bps);\n            self.postMessage({\n                command: WORKER_LIBFLAC_READY\n            });\n        } else {\n            Flac.onready = function() {\n                setTimeout(() => {\n                    encoder = new Encoder(sampleRate, bps);\n                    self.postMessage({\n                        command: WORKER_LIBFLAC_READY\n                    });\n                }, 0);\n            };\n        }\n        break;\n    }\n\n    case MAIN_THREAD_NEW_DATA_ARRIVED:\n        if (encoder === null) {\n            logger.error('flacEncoderWorker received data when the encoder is'\n                + 'not ready.');\n        } else {\n            encoder.encode(e.data.buf);\n        }\n        break;\n\n    case MAIN_THREAD_FINISH:\n        if (encoder !== null) {\n            encoder.finish();\n            const data = encoder.getBlob();\n\n            self.postMessage(\n                {\n                    command: WORKER_BLOB_READY,\n                    buf: data\n                }\n            );\n            encoder = null;\n        }\n        break;\n    }\n};\n"],"sourceRoot":""}