{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/../strophe.js/strophe.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/js-utils/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/../webpack/buildin/global.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/../bowser/src/bowser.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/../node-libs-browser/node_modules/process/browser.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../webpack/buildin/module.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/DTMF/JitsiDTMFManager.js","webpack://JitsiMeetJS/./modules/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../webpack/buildin/amd-define.js","webpack://JitsiMeetJS/../webpack/buildin/amd-options.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../timers-browserify/main.js","webpack://JitsiMeetJS/../setimmediate/setImmediate.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/../rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/array-equals.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONFERENCE_SETUP_FAILED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","JINGLE_ERROR","JINGLE_FATAL_ERROR","KICKED","LOCAL_ROLE_CHANGED","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","undefined","__WEBPACK_AMD_DEFINE_RESULT__","__WEBPACK_AMD_DEFINE_FACTORY__","requirejs","require","undef","main","req","makeMap","handlers","defined","waiting","config","defining","hasOwn","aps","slice","jsSuffixRegExp","hasProp","obj","prop","normalize","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","j","part","baseParts","split","map","starMap","length","nodeIdCompat","test","replace","charAt","concat","splice","join","makeRequire","relName","forceSync","args","arguments","push","apply","makeLoad","depName","callDep","Error","splitPrefix","prefix","index","indexOf","substring","makeRelParts","makeConfig","relParts","plugin","parts","relResourceName","f","pr","e","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","_typeof","load","alt","setTimeout","cfg","_defined","jQuery","this","Function","func","_slice","Array","_concat","_args","isArray","arg","toString","elt","len","from","Number","Math","ceil","floor","forEach","thisArg","T","k","TypeError","O","kValue","keyStr","btoa","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","isNaN","atob","String","fromCharCode","SHA1","core_sha1","x","olda","oldb","oldc","oldd","olde","w","a","b","rol","safe_add","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","hash","y","lsw","num","cnt","str","bin","binb2str","binb2b64","binarray","triplet","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","MD5","str2binl","md5_cmn","q","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","hexdigest","binl2hex","binl2str","stropheUtils","utf16to8","out","addCookies","cookies","cookieName","cookieObj","isObj","cookieValue","expires","domain","path","escape","unescape","document","cookie","Strophe","$build","$iq","$msg","$pres","utils","attrs","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","blockquote","br","cite","em","img","li","ol","span","strong","ul","body","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNode","childNodes","nodeType","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","xmlTextNode","sort","attr","setAttribute","xmlescape","text","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","createHtml","cssAttrs","cssName","cssValue","toLowerCase","getAttribute","cssText","createDocumentFragment","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","result","tree","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","options","matchBareFromJid","ignoreNamespaceFragment","matchBare","user","getNamespace","elNamespace","namespaceMatch","nsMatch","that","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","HTTP","websocket","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","random","addProtocolErrorHandler","status_code","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","iqtype","element","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","statusChanged","err","_dataRecv","raw","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","mech","matched","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","priority","_attemptSASLAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","_attemptLegacyAuth","_auth1_cb","to","challenge","iq","_auth2_cb","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_sasl_auth1_cb","_sasl_bind_cb","resource","jidNode","_sasl_session_cb","onFailure","now","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","iter","Hi","U","U_old","clientKey","serverKey","clientSignature","responseText","authMessage","attribMatch","substr","_quote","realm","host","digest_uri","cred","A1","A2","core","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","xml:lang","content","ver","xmpp:version","xmlns:xmpp","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","err_callback","reqStatus","_getRequestStatus","_hitError","xmpp:restart","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","self","primaryTimeout","secondaryTimeout","requestCompletedWithServerError","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","new_service","location","pathname","_buildStream","version","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","__WEBPACK_AMD_DEFINE_ARRAY__","__webpack_exports__","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","_BrowserCapabilities__WEBPACK_IMPORTED_MODULE_0__","BrowserCapabilities","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","transports","format","logger","setLogLevelById","setLevel","setLogLevel","_instances","__filename","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","userName","Settings","callStatsUserName","initBackend","callStatsID","callStatsSecret","swapUserNameAndAlias","callStatsAliasName","aliasName","applicationName","getWiFiStatsMethod","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","iterator","next","done","callStats","stopCallStats","tpc","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","confID","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","statistics","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","sendDominantSpeakerEvent","roomJid","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","sendActiveDeviceListEvent","devicesData","globalSet","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","stats","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","eventToLog","properties","sendAnalytics","eventName","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","_toConsumableArray","keepPts","rtcpFb","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","_objectSpread","error_type","error_message","createConnectionStageReachedEvent","stage","source","createE2eRttEvent","participantId","region","rtt","participant_id","createFocusLeftEvent","createGetUserMediaEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","media_type","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTtfmEvent","AUDIO","VIDEO","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","_len","_key","GlobalOnErrorHandler","callErrorHandler","errHandler","callUnhandledRejectionHandler","usesAdapter","availableDevices","availableDevicesPollTimer","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","aspectRatio","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafariWithVP8","isEdge","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","bandwidth","firefox_fake_device","fake","desktopStream","_options$frameRate","chromeMediaSource","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","audio_input_device_count","audio_output_device_count","video_input_device_count","video_output_device_count","device_id","device_group_id","groupId","device_kind","device_label","label","rtcUtils","RTCUtils","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Listenable","_this","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","_ref","getTrackID","_ref2","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","_ref3","_ref4","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","disableSuspendVideo","googSuspendBelowMinBitrate","Promise","resolve","reject","getUserMedia","catch","umDevices","_this2","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","devices","includes","supportsMediaStreamConstructor","_getAudioAndVideoStreams","_getAudioAndVideoStreamsSeparately","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","_desktopStream","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","_this3","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","_this4","obtainDevices","context","successCallback","deviceGUM","errorCallback","_len2","_key2","_len3","_key3","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","_this5","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","_this$_parseDesktopSh","exact","_newGetUserMediaWithConstraints","getTracks","applyConstraints","_newGetDesktopMedia","maybeRequestCaptureDevices","requestedCaptureDevices","newGetConstraints","_ref5","deviceType","mediaStream","release","url","revokeObjectURL","isDeviceChangeAvailable","deviceData","enable","origAttachMediaStream","getAudioOutputDevice","ex","promise","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","NO_DATA_FROM_SOURCE","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","metaData","_track$getSettings","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_assertThisInitialized","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","newObtainAudioAndVideoPermissions","obtainAudioAndVideoPermissions","tracks","some","_isReceivingData","JitsiTrackErrors","eventType","isP2P","elSelector","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","setAudioOutputDevice","isUserStreamById","streamId","isDesktopSharingEnabled","_channelOpenListener","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","leavingLastNEndpoints","enteringLastNEndpoints","lastNEndpoints","oldLastNEndpoints","isInLastN","JitsiConferenceEvents","maxFrameHeight","ids","signaling","iceConfig","getPCConstraints","abtestSuspendVideo","setSuspendVideo","addPermanentProperties","supportsSdpSemantics","sdpSemantics","newConnection","TraceablePeerConnection","traceablePeerConnection","localVideo","getLocalTracks","localAudio","getType","remoteTracks","pcRemoteTracks","getRemoteTracks","mutePromises","audioTrack","mute","unmute","all","pos","owner","removedTracks","pcRemovedTracks","removeRemoteTracks","audioLevel","getTrackBySSRC","isAudioTrack","setAudioLevel","sendMessage","remoteAudioTracks","setAudioOutput","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","getResolutionFromFailedConstraint","constructor","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","tmp","mediaSSRCs","_loop","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","removeSessionLines","removeMediaLines","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","_step$value","_slicedToArray","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","subtype","rtcpFbFromJingle","each","$","fromJingle","jingle","groups","contents","_","jingle2media","sctp","streamCount","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","EDGE","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","Chrome","Chromium","Opera","Firefox","Internet Explorer","Microsoft Edge","Safari","_detectElectron","userAgent","_detectNWJS","_detectReactNative","product","_detect","browserInfo","detectors","bowser","chrome","_detectChromiumBased","BrowserDetection","detectedBrowserInfo","_name","_version","compareVersions","compareVersion","BrowserDetection_BrowserDetection","browsers_namespaceObject","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","WRONG_STATE","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","removeEventListener","off","_callStatsUserName","_machineId","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1___default","getLocalStorage","storage","localStorage","_p8","username","UsernameGenerator","generateUsername","machineId","jitsiMeetId","sessionId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","ssrcNumber","attrName","ssrcObj","ssrcNum","primarySSRC","msid","findGroup","fecGroup","findGroupByPrimarySSRC","videoSSRCs","getSSRCs","ssrcGroupInfo","secondarySsrc","groupInfo","oldSSRC","newSSRC","SdpTransformWrap","rawSDP","parsedSDP","transform","_createClass","selectedMLine","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","_events","_maxListeners","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","listeners","newListener","warned","trace","once","fired","g","list","position","listenerCount","evlistener","emitter","1080","order","fullhd","720","hd","960","360","640","vga","180","320","PENDING","ACTIVE","ENDED","_fabrics","wrtcFuncNames","fabricEvent","DEFAULT_REMOTE_USER","reportType","hasFabric","fabrics","backendInitialized","_addNewFabric","_emptyReportQueue","backend","atLeastOneFabric","defaultInstance","csInstance","defaultConfID","defaultPC","reportsQueue","report","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","_i","originalMethod","theArguments","debugMethods","_loop2","_i2","originalReportError","exception","configParams","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","applicationVersion","getName","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","getConnectionPluginDefinition","base","_class","_base","_class2","_getPrototypeOf2","_inherits","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","_initStrophePlugins","bosh","conn","createConnection","caps","Caps","clientNode","initFeaturesList","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","_pingSupported","credentials","performance","statusStr","getStatusString","useStunTurn","p2p","getStunAndTurnCredentials","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","connectionHandler","attaching","_this$options$hosts","hosts","anonymousdomain","configDomain","hostname","mucNickname","roomjid","muc","cfgNickname","useNicks","nick","randomHexString","emuc","createRoom","getLog","_this$connection$rayo","dial","isPingSupported","moderate","setMute","eject","sessions","ev","evType","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","initEmuc","initJingle","initStropheUtil","initPing","initRayo","initStropheLogger","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","room","jsonString","json","jsonMessage","parsedJson","tryParseJSONAndVerify","users","XMPPEvents","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","jitsiError","isElectron","obtainScreenOnElectron","isOpera","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","_this$options","doGetStreamFromExtensionOptions","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","getVersion","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","logDisabled_","deprecationWarnings_","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","extractVersion","uastring","expr","detectBrowser","mozGetUserMedia","webkitGetUserMedia","webkitRTCPeerConnection","shimCreateObjectURL","ENVIRONMENT","ALPHANUM","randomElement","arr","randomHexDigit","randomAlphanumStr","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","_getVideoFrozenTimeout","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","_changeConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","getFocusRecordingUpdate","presence","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","queue","_processQueueTasks","wasConnected","establishmentDuration","JingleSession","jingleContents","videoContents","actionName","state","JingleSessionState","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableFirefoxSimulcast","testing","enableLayerSuspension","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","_assertNotEnded","iceConnectionState","signaling_state","reconnect","iceStarted","onnegotiationneeded","setChatRoom","isSelected","setIsSelected","finishedCallback","_renegotiate","localSDP","localDescription","ice","sdpMLineIndex","jcand","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","_this6","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","jingleOffer","failure","_this7","setOfferAnswerCycle","sendSessionAccept","_this8","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","jingleAnswer","jingleOfferAnswerIq","_this9","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","notifyMySSRCUpdate","_onJingleFatalError","jingleOfferElem","_this10","originalOffer","clone","remove","sendTransportAccept","_this11","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","_this12","transportAccept","medialines","transportReject","sendSessionTerminate","sessionTerminate","reasonDescription","terminate","reasonCondition","reasonText","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","_addOrRemoveRemoteStream","isAdd","_this13","logPrefix","readSsrcInfo","remoteDescription","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceAdd","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","task","offerIq","remoteSdp","removeSsrcInfo","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","_this14","setRemoteDescription","createAnswer","answer","_this15","offer","oldTrack","newTrack","_this16","workFunction","isVideoTrack","clearRecvonlySsrc","replaceTrack","shouldRenegotiate","newLocalSDP","sourceRemoveElem","ssrcLines","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","_addRemoveTrackAsMuteUnmute","isMute","_this17","oldLocalSDP","removeTrackMute","addTrackUnmute","_verifyNoSSRCChanged","audioActive","videoActive","_this18","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","_this19","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","_this20","errResponse","errorElSel","errorReasonSel","errorMsgSel","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","definition","detect","ua","getFirstMatch","regex","getSecondMatch","iosdevice","android","nexusMobile","nexusTablet","chromeos","silk","sailfish","tizen","webos","windowsphone","windows","mac","linux","edgeVersion","versionIdentifier","tablet","mobile","xbox","opera","samsungBrowser","coast","yandexbrowser","ucbrowser","maxthon","epiphany","puffin","sleipnir","kMeleon","osname","msedge","msie","chromeBook","vivaldi","seamonkey","firefox","firefoxos","phantom","slimer","blackberry","touchpad","bada","qupzilla","chromium","safari","googlebot","blink","webkit","gecko","ios","osVersion","getWindowsVersion","osversion","osMajorVersion","getVersionPrecision","versions","precision","chunks","delta","chunk","reverse","isUnsupportedBrowser","minVersions","strictMode","_bowser","browserList","browserItem","check","_SDPUtil__WEBPACK_IMPORTED_MODULE_0__","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","E2E_RTT_CHANGED","LocalStatsCollector","AudioContext","webkitAudioContext","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","Uint8Array","frequencyBinCount","getByteTimeDomainData","newLevel","lastLevel","diff","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","currentExecutingScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ON","OFF","trackHandler2Prop","track_mute","track_unmute","track_ended","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","container","_onTrackAttach","_maybeFireTrackAttached","_attachTTFMTracker","active","getStreamId","trackId","getTrackId","nextValue","MAX_SAFE_INTEGER","SpeakerStats","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","newName","isNowDominantSpeaker","isDominantSpeaker","timeElapsed","total","IDENTITY_UPDATED","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_noDataFromSourceTimeout","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","getTrack","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_onNoDataFromSourceError","_checkForCameraIssues","_clearNoDataFromSourceMuteResources","track_type","_fireNoDataFromSourceEvent","isReceivingData","_get","storedMSID","getMSID","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","_unregisterHandlers","stopStream","streamOptions","getDeviceId","getCameraFacingMode","assign","streamsInfo","streamInfo","cont","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","_removeLocalTrackAsMute","removeTrack","detach","bytesSent","getConnectionState","_bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","JibriSession","_mode","_setSessionID","setStatus","_sessionID","_liveStreamViewURL","_status","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","app_data","recording_mode","streamid","you_tube_broadcast_id","errorIq","setError","children","VIDEO_PERMISSION_NAME","JitsiMediaDevices","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","supported","promises","results","every","permissionStatus","_this$_eventEmitter","consoleTransport","globalTransports","callerInfo","fileLocation","column","getCallerInfo","methods","transportIdx","LOG","webpackPolyfill","deprecate","paths","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","grammar","reg","names","u","z","encoding","rate","sessionConfig","raddr","maxMessageSize","RegExp","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","getDisplayName","download","Blob","href","click","getRecordingResults","getFileType","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_0__","_JitsiConference__WEBPACK_IMPORTED_MODULE_1__","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_2__","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_3__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_4__","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","_this$xmpp","setToken","initJitsiConference","JitsiConference","getConnectionTimes","feature","submit","removeFeature","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","setupXMPPListeners","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","participantConnectionStatus","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","windowLocation","enableDisplayNameInStats","callStatsCustomScriptUrl","enableStatsID","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","TalkMutedDetection","setLastN","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","closeBridgeChannel","_delayedIceFailed","cancel","removeXMPPListeners","destroy","onMemberLeft","getJid","getConnection","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getLocalAudioTrack","getLocalVideoTrack","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","sendPrivateTextMessage","sendPrivateMessage","sendCommand","addToPresence","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","muteParticipant","myroomjid","_setConference","removeLocalTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","addLocalTrack","setAudioMute","setVideoMute","addAsUnmutePromises","addTrackAsUnmute","removeAsMutePromises","removeTrackAsMute","getRole","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","selectEndpoints","pinParticipant","pinEndpoint","lastN","isInteger","RangeError","isVideoActive","setMediaTransferActive","getParticipantCount","countHidden","isHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","statsID","botType","JitsiParticipant","_role","_botType","getFeatures","_supportsDTMF","updateDTMFSupport","_maybeStartOrStopP2P","_onMemberBotTypeChanged","botParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","setAnswer","onTransportInfo","transportInfo","addIceCandidates","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","getMemberRole","errorMsg","supportsP2P","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","acceptOffer","_suspendMediaTransferForJvbConnection","bridgeChannelType","webSocket","first","openBridgeChannel","supportsDataChannels","initializeBridgeChannel","onCallEnded","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","JitsiDTMFManager","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","getJingleLog","metadata","time","getXmppLog","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","getLocalSSRC","getSSRC","getUsageLabel","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","sendChannelMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","sendIceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","isEqual","_defineProperty","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","invite","userLeftEvent","peers","peerCount","hasBotPeer","shouldBeInP2P","myId","peersId","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverVideoConstraint","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","global","freeSelf","freeExports","freeModule","moduleExports","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","exec","IE_PROTO","nativeObjectToString","reIsNative","Buffer","propertyIsEnumerable","symToStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","strophe_js__WEBPACK_IMPORTED_MODULE_0__","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_1__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2___default","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3__","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3___default","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_4__","_JitsiConferenceErrors__WEBPACK_IMPORTED_MODULE_5__","_JitsiConferenceEvents__WEBPACK_IMPORTED_MODULE_6__","_service_RTC_MediaType__WEBPACK_IMPORTED_MODULE_7__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8___default","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9__","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9___default","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_10__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11___default","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","forward","setParticipantPropertyListener","setProperty","recorderSession","logObject","getError","getStatus","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","_onByteSentStatsReceived","dest","srcEvent","AnalyticsAdapter","analyticsHandlers","cache","permanentProperties","conferenceName","callstats_name","user_agent","browser_name","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","conference_name","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","isSafariWithWebrtc","isSafari","isVersionLessThan","ondevicechange","usesUnifiedPlan","usesPlanB","RTCRtpTransceiver","_getChromiumBasedVersion","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","packetsReceived","packetsLost","packetsSent","bytesReceived","framerateMean","receiveBandwidth","sendBandwidth","remoteAddress","transportType","localAddress","activeConnection","googFrameHeightReceived","googFrameWidthReceived","googFrameHeightSent","googFrameWidthSent","googFrameRateReceived","googFrameRateSent","audioInputLevel","audioOutputLevel","currentRoundTripTime","remoteCandidateType","localCandidateType","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","startAudioLevelStats","processNewAudioLevelReport","processAudioLevelReport","supportsRtpStatistics","processNewStatsReport","processStatsReport","itemStatByKey","stat","pair","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","localip","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","msType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","bytesReceivedNow","bytesReceivedBefore","nowBytesTransmitted","timeMs","timestamp","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","userResolutions","userFramerates","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","remoteIpAddress","remotePort","localIpAddress","localPort","localIp","networkType","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","jitsiTrack","isWebRTCTrackMuted","oldValue","_isMediaTypeMuted","reduce","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_0__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_1__","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","MucConnectionPlugin","rooms","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","createNonAnonymousRoom","packet2JSON","_arr","_arr2","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","fromJoin","getInfo","getForm","form","formSubmit","var","member","statusEl","hasStatusUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","hiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_arr3","_i3","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","skipEvents","onMucMemberLeft","reasonSelect","doLeave","isSelfPresence","isKick","membersKeys","onParticipantLeft","subjectText","stamp","dateParts","discoRoomInfo","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","_browser__WEBPACK_IMPORTED_MODULE_1__","_settings_Settings__WEBPACK_IMPORTED_MODULE_2__","createExpBackoffTimer","step","count","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","focus","createConferenceIq","openSctp","machineUID","machine-uid","session-id","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","JingleConnectionPlugin","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","ConnectionPlugin","onJingle","fromJid","ack","sess","startMuted","modifyContents","replaceTransport","successTime","sendTransportReject","addRemoteStream","removeRemoteStream","me","onTerminated","iceservers","dict","credential","updateLog","setImmediate","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","kill","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","doInitialize","ssrcOwners","SignalingLayer","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getMediaPresenceInfo","strophe_js__WEBPACK_IMPORTED_MODULE_1__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2___default","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","PING_TIMESTAMPS_TO_KEEP","PingConnectionPlugin","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","RayoConnectionPlugin","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","disco","versionToCapabilities","jidToVersion","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","_generateVersion","_getDiscoInfo","category","_fixChatRoomPresenceMap","_identities","accumulatedValue","_features","_notifyVersionChanged","oldVersion","dtmfSender","createDTMFSender","insertDTMF","_audioLevel","myUserID","datachannel","createDataChannel","_handleChannel","ws","OPEN","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","isOpen","SIMULCAST_LAYERS","SIM_LAYER_RIDS","audioTransferActive","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","statsinterval","Interop","interop","Simulcast","simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","what","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","isSimulcastOn","supportsSimulcast","videoTrack","_setVideoType","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","streamAudioTracks","streamVideoTracks","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","isVersionGreaterThan","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","simulcast_03","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","selectMedia","videoMedia","toRawSDP","enforceSendRecv","transformStreamIdentifiers","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","addStream","_removeStream","supportsRtpSender","_handleSenderRemoveStream","removeStream","doesBelong","isMediaStreamInPc","findSenderByStream","getSenders","sender","extractPrimarySSRC","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","parsedSdp","toUnifiedPlan","_insertUnifiedPlanSimulcastReceive","mungeRemoteDescription","stripRtx","_injectH264IfNotPresent","dummyPayloadType","payloadsArray","clearVideoSsrcCache","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","peerTracks","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_removePeerConnection","simParams","encodings","scaleResolutionDownBy","setParameters","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","groupSSRCs","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","extractSSRCMap","_processLocalSSRCsMap","handleFailure","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","videoSender","getParameters","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","hasBeenMuted","_bindMuteHandlers","_onTrackMute","_onTrackUnmute","gumStart","gumEnd","gumDuration","ttfm","_playCallback","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","removeSSRC","addSSRCAttribute","addSSRCGroup","modifyRtxSsrcs2","pcId","streamAndTrackIDs","_addMutedLocalVideoTracksToSDP","sessionDesc","audioMLine","_transformMediaIdentifiers","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","getRtxSSRC","dumpSSRCGroups","removeGroupsWithSSRC","correspondingRtxSsrcs","ssrcMapping","sdpTransformer","getSSRCCount","primaryVideoSsrcs","getPrimaryVideoSSRCs","getSSRCAttrValue","correspondingRtxSsrc","previousAssociatedRtxStream","containsAnySSRCGroups","findGroups","removeGroupsBySemantics","injectRecvOnly","newPrimarySsrc","getPrimaryVideoSsrc","replaceSSRC","_eventFired","_trackMuteChanged","_trackAdded","_isLocalAudioTrack","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","target","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_calculateConnectionQuality","_canceled","_iceFailedTimeout","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","_handleFocusPresence","_handleJibriPresence","getSession","getID","_addSession","_emitSessionUpdate","_createSession","_recordingXMLUtils$ge","setLiveStreamViewURL","offerOptions","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","stopped","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","supportsLocalCandidateRttStatistics","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","sum","calculate","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onUserLeft","_onRemoteStatsUpdated","_processRemoteStats","supportsRTTStatistics","addNext","batchReport","conference_size","local_candidate_type","remote_candidate_type","transport_type","appendReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_onLocalStatsUpdated","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","supportsBandwidthStatistics","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","getTracksByMediaType","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","dominantSpeakerId","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","markAsHasLeft","newStats","speakerStatsToUpdate","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","hasPopulatedArrays","twoDimensionalArray","callBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","_statistics_statistics__WEBPACK_IMPORTED_MODULE_0__","processPresence","FOCUS_COMPONENT","VIDEOBRIDGE_COMPONENT","XMPP_SERVER_COMPONENT","mucResource","componentName","getComponentVersion","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_objectWithoutProperties","_options","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","processMessage","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","default","getAnalyticsAttributesFromOptions","audio_requested","video_requested","screen_sharing_requested","_mergeNamespaceAndModule","constants","recording","recordingConstants","sipVideoGW","events","errorTypes","logLevels","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","emitEvent","mStream","currentlyAvailableMediaDevices","oldResolution","newResolution","resName","getLowerResolution","old_resolution","new_resolution","isMultipleAudioInputSupported","isCollectingLocalStats","lineno","colno","util","AuthUtil","JitsiMeetJS","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptUrlFromStack","remainingStack","ignoreMessage","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","_items","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","adapterFactory","dependencies","shimChrome","shimFirefox","shimEdge","shimSafari","logging","browserDetails","adapter","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","shimPeerConnection","browserShim","shimGetUserMedia","shimMediaStream","shimSourceObject","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimRTCIceCandidate","shimReplaceTrack","shimRTCIceServerUrls","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimCreateOfferLegacy","webkitMediaStream","_ontrack","origSetRemoteDescription","_ontrackpoly","te","receiver","getReceivers","Event","dispatchEvent","shimSenderWithDtmf","dtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","RTCRtpSender","origGetSenders","HTMLMediaElement","_srcObject","origGetLocalStreams","getLocalStreams","nativeStreams","_reverseStreams","_streams","DOMException","newStream","oldStream","nativeMethod","replaceInternalStreamId","origSetLocalDescription","internalId","externalStream","internalStream","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","iceTransports","origGetStats","selector","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","nativeAddIceCandidate","constraintsToChrome_","cc","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","getUserMediaPromise_","kinds","MediaStreamTrack","getSources","origGetUserMedia","shimRTCPeerConnection","RTCIceGatherer","origMSTEnabled","RTCDtmfSender","setTrack","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidAccessError","OperationError","addTrackToStreamAndFireEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","bundlePolicy","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","gatherPolicy","_config","transceivers","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","configurable","ontrack","onconnectionstatechange","onicegatheringstatechange","_emitGatheringStateChange","getConfiguration","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","_createIceGatherer","writable","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","states","new","checking","disconnected","failed","connecting","numAudioTracks","numVideoTracks","remoteCodec","hdrExt","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","RTCTrackEvent","mozSrcObject","mozRTCPeerConnection","newServer","mozRTCSessionDescription","mozRTCIceCandidate","modernStatsTypes","nativeGetStats","onSucc","onErr","InternalError","SecurityError","The operation is insecure.","getUserMedia_","constraintsToFF37_","orgEnumerateDevices","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","_localStreams","getStreamById","_remoteStreams","_addTrack","_onaddstream","_onaddstreampoly","withCallback","errcb","RTCTransceiver","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","eventNameToWrap","nativeAddEventListener","nativeEventName","_eventMap","nativeRemoveEventListener","unwrappedCb","wrapPeerConnectionEvent","nativeCreateObjectURL","nativeRevokeObjectURL","newId","dsc","nativeSetAttribute","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","makeLine","formatStr","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","midToString","mlB2UMap","mlU2BMap","candidateToUnifiedPlan","candidateToPlanB","getFirstSendingIndexFromAnswer","rewrite","type2bl","types","directionResult","uLine","rtcpMux","directionMasks","bundleOnly","mids","msidSemantic","semantic","cached","hasBundle","recvonlySsrcs","mid2ul","bIdx","uIdx","bLine","uLineData","iceUfrag","icePwd","ssrc2group","ssrc2ml","related","inactive","recvonly","sendonly","sendrecv","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","clearSsrcCache","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","removeGoogConference","assertGoogConference","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 116);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    CONFERENCE_SETUP_FAILED: 'xmpp.conference_setup_failed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /* Event fired when XMPP error is returned to any request, it is meant to be\n     * used to report 'signaling' errors to CallStats\n     *\n     * {\n     *   code: {XMPP error code}\n     *   reason: {XMPP error condition}\n     *   source = request.tree()\n     *   session = {JingleSession instance}\n     * }\n     */\n    JINGLE_ERROR: 'xmpp.jingle_error',\n\n    // Event fired when we have failed to set initial offer\n    JINGLE_FATAL_ERROR: 'xmpp.jingle_fatal_error',\n\n    // Designates an event indicating that we were kicked from the XMPP MUC.\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/** File: strophe.js\n *  A JavaScript library for writing XMPP clients.\n *\n *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server or\n *  alternatively WebSockets.\n *\n *  More information on BOSH can be found in XEP 124.\n *  For more information on XMPP-over WebSocket see this RFC:\n *  http://tools.ietf.org/html/rfc7395\n */\n\n/* All of the Strophe globals are defined in this special function below so\n * that references to the globals become closures.  This will ensure that\n * on page reload, these references will still be available to callbacks\n * that are still executing.\n */\n\n/* jshint ignore:start */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case.\n        var wrapper = factory();\n        root.Strophe        = wrapper.Strophe;\n        root.$build         = wrapper.$build;\n        root.$iq            = wrapper.$iq;\n        root.$msg           = wrapper.$msg;\n        root.$pres          = wrapper.$pres;\n        root.SHA1           = wrapper.SHA1;\n        root.MD5            = wrapper.MD5;\n        root.b64_hmac_sha1  = wrapper.b64_hmac_sha1;\n        root.b64_sha1       = wrapper.b64_sha1;\n        root.str_hmac_sha1  = wrapper.str_hmac_sha1;\n        root.str_sha1       = wrapper.str_sha1;\n    }\n}(this, function () {\n    //almond, and your modules will be inlined here\n/* jshint ignore:end */\n/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"node_modules/almond/almond.js\", function(){});\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-polyfill',[], function () {\n            return factory(root);\n        });\n    } else {\n        // Browser globals\n        return factory(root);\n    }\n}(this, function (root) {\n\n/** Function: Function.prototype.bind\n *  Bind a function to an instance.\n *\n *  This Function object extension method creates a bound method similar\n *  to those in Python.  This means that the 'this' object will point\n *  to the instance you want.  See <MDC's bind() documentation at https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind>\n *  and <Bound Functions and Function Imports in JavaScript at http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/>\n *  for a complete explanation.\n *\n *  This extension already exists in some browsers (namely, Firefox 3), but\n *  we provide it to support those that don't.\n *\n *  Parameters:\n *    (Object) obj - The object that will become 'this' in the bound function.\n *    (Object) argN - An option argument that will be prepended to the\n *      arguments given for the function call\n *\n *  Returns:\n *    The bound function.\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {\n        var func = this;\n        var _slice = Array.prototype.slice;\n        var _concat = Array.prototype.concat;\n        var _args = _slice.call(arguments, 1);\n        return function () {\n            return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));\n        };\n    };\n}\n\n/** Function: Array.isArray\n *  This is a polyfill for the ES5 Array.isArray method.\n */\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\n/** Function: Array.prototype.indexOf\n *  Return the index of an object in an array.\n *\n *  This function is not supplied by some JavaScript implementations, so\n *  we provide it if it is missing.  This code is from:\n *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n *\n *  Parameters:\n *    (Object) elt - The object to look for.\n *    (Integer) from - The index from which to start looking. (optional).\n *\n *  Returns:\n *    The index of elt in the array or -1 if not found.\n */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(elt /*, from*/) {\n        var len = this.length;\n        var from = Number(arguments[1]) || 0;\n        from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from++) {\n            if (from in this && this[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n}\n\n/** Function: Array.prototype.forEach\n *\n *  This function is not available in IE < 9\n *\n *  See <forEach on developer.mozilla.org at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach>\n */\nif (!Array.prototype.forEach) {\n    Array.prototype.forEach = function(callback, thisArg) {\n        var T, k;\n        if (this === null) {\n            throw new TypeError(' this is null or not defined');\n        }\n        // 1. Let O be the result of calling toObject() passing the\n        // |this| value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get() internal\n        // method of O with the argument \"length\".\n        // 3. Let len be toUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If isCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let\n        // T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //        This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty\n            //        internal method of O with argument Pk.\n            //        This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal\n                // method of O with argument Pk.\n                kValue = O[k];\n                // ii. Call the Call internal method of callback with T as\n                // the this value and argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\nvar keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nif (!root.btoa) {\n    root.btoa = function (input) {\n        /**\n         * Encodes a string in base64\n         * @param {String} input The string to encode in base64.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc2 = ((chr1 & 3) << 4);\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n                keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        } while (i < input.length);\n        return output;\n    };\n}\n\nif (!root.atob) {\n    root.atob = function (input) {\n        /**\n         * Decodes a base64 string.\n         * @param {String} input The string to decode.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        do {\n            enc1 = keyStr.indexOf(input.charAt(i++));\n            enc2 = keyStr.indexOf(input.charAt(i++));\n            enc3 = keyStr.indexOf(input.charAt(i++));\n            enc4 = keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 !== 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 !== 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n        } while (i < input.length);\n        return output;\n    };\n}\n}));\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: false */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-sha1', [],function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.SHA1 = factory();\n    }\n}(this, function () {\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = new Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  var i, j, t, olda, oldb, oldc, oldd, olde;\n  for (i = 0; i < x.length; i += 16)\n  {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    olde = e;\n\n    for (j = 0; j < 80; j++)\n    {\n      if (j < 16) { w[j] = x[i + j]; }\n      else { w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1); }\n      t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if (t < 20) { return (b & c) | ((~b) & d); }\n  if (t < 40) { return b ^ c ^ d; }\n  if (t < 60) { return (b & c) | (b & d) | (c & d); }\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data)\n{\n  var bkey = str2binb(key);\n  if (bkey.length > 16) { bkey = core_sha1(bkey, key.length * 8); }\n\n  var ipad = new Array(16), opad = new Array(16);\n  for (var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n  return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str)\n{\n  var bin = [];\n  var mask = 255;\n  for (var i = 0; i < str.length * 8; i += 8)\n  {\n    bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n  }\n  return bin;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin)\n{\n  var str = \"\";\n  var mask = 255;\n  for (var i = 0; i < bin.length * 32; i += 8)\n  {\n    str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n  }\n  return str;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64(binarray)\n{\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var str = \"\";\n  var triplet, j;\n  for (var i = 0; i < binarray.length * 4; i += 3)\n  {\n    triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n              (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n               ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n    for (j = 0; j < 4; j++)\n    {\n      if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n      else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n    }\n  }\n  return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nreturn {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\n}));\n\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n/*\n * Everything that isn't used by Strophe has been stripped here!\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-md5',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.MD5 = factory();\n    }\n}(this, function () {\n    /*\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n     * to work around bugs in some JS interpreters.\n     */\n    var safe_add = function (x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    };\n\n    /*\n     * Bitwise rotate a 32-bit number to the left.\n     */\n    var bit_rol = function (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt));\n    };\n\n    /*\n     * Convert a string to an array of little-endian words\n     */\n    var str2binl = function (str) {\n        var bin = [];\n        for(var i = 0; i < str.length * 8; i += 8)\n        {\n            bin[i>>5] |= (str.charCodeAt(i / 8) & 255) << (i%32);\n        }\n        return bin;\n    };\n\n    /*\n     * Convert an array of little-endian words to a string\n     */\n    var binl2str = function (bin) {\n        var str = \"\";\n        for(var i = 0; i < bin.length * 32; i += 8)\n        {\n            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & 255);\n        }\n        return str;\n    };\n\n    /*\n     * Convert an array of little-endian words to a hex string.\n     */\n    var binl2hex = function (binarray) {\n        var hex_tab = \"0123456789abcdef\";\n        var str = \"\";\n        for(var i = 0; i < binarray.length * 4; i++)\n        {\n            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +\n                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);\n        }\n        return str;\n    };\n\n    /*\n     * These functions implement the four basic operations the algorithm uses.\n     */\n    var md5_cmn = function (q, a, b, x, s, t) {\n        return safe_add(bit_rol(safe_add(safe_add(a, q),safe_add(x, t)), s),b);\n    };\n\n    var md5_ff = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    };\n\n    var md5_gg = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    };\n\n    var md5_hh = function (a, b, c, d, x, s, t) {\n        return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n\n    var md5_ii = function (a, b, c, d, x, s, t) {\n        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n    };\n\n    /*\n     * Calculate the MD5 of an array of little-endian words, and a bit length\n     */\n    var core_md5 = function (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << ((len) % 32);\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n        var a =  1732584193;\n        var b = -271733879;\n        var c = -1732584194;\n        var d =  271733878;\n\n        var olda, oldb, oldc, oldd;\n        for (var i = 0; i < x.length; i += 16)\n        {\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n\n            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n            a = safe_add(a, olda);\n            b = safe_add(b, oldb);\n            c = safe_add(c, oldc);\n            d = safe_add(d, oldd);\n        }\n        return [a, b, c, d];\n    };\n\n    var obj = {\n        /*\n         * These are the functions you'll usually want to call.\n         * They take string arguments and return either hex or base-64 encoded\n         * strings.\n         */\n        hexdigest: function (s) {\n            return binl2hex(core_md5(str2binl(s), s.length * 8));\n        },\n\n        hash: function (s) {\n            return binl2str(core_md5(str2binl(s), s.length * 8));\n        }\n    };\n    return obj;\n}));\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-utils',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.stropheUtils = factory();\n    }\n}(this, function () {\n\n    var utils = {\n\n        utf16to8: function (str) {\n            var i, c;\n            var out = \"\";\n            var len = str.length;\n            for (i = 0; i < len; i++) {\n                c = str.charCodeAt(i);\n                if ((c >= 0x0000) && (c <= 0x007F)) {\n                    out += str.charAt(i);\n                } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                } else {\n                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                }\n            }\n            return out;\n        },\n\n        addCookies: function (cookies) {\n            /* Parameters:\n             *  (Object) cookies - either a map of cookie names\n             *    to string values or to maps of cookie values.\n             *\n             * For example:\n             * { \"myCookie\": \"1234\" }\n             *\n             * or:\n             * { \"myCookie\": {\n             *      \"value\": \"1234\",\n             *      \"domain\": \".example.org\",\n             *      \"path\": \"/\",\n             *      \"expires\": expirationDate\n             *      }\n             *  }\n             *\n             *  These values get passed to Strophe.Connection via\n             *   options.cookies\n             */\n            var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;\n            for (cookieName in (cookies || {})) {\n                expires = '';\n                domain = '';\n                path = '';\n                cookieObj = cookies[cookieName];\n                isObj = typeof cookieObj === \"object\";\n                cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n                if (isObj) {\n                    expires = cookieObj.expires ? \";expires=\"+cookieObj.expires : '';\n                    domain = cookieObj.domain ? \";domain=\"+cookieObj.domain : '';\n                    path = cookieObj.path ? \";path=\"+cookieObj.path : '';\n                }\n                document.cookie =\n                    cookieName+'='+cookieValue + expires + domain + path;\n            }\n        }\n    };\n    return utils;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/*global define, document, sessionStorage, setTimeout, clearTimeout, ActiveXObject, DOMParser, btoa, atob */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-core',[\n            'strophe-sha1',\n            'strophe-md5',\n            'strophe-utils'\n        ], function () {\n            return factory.apply(this, arguments);\n        });\n    }  else if (typeof exports === 'object') {\n        module.exports = factory(\n            require('./sha1'),\n            require('./md5'),\n            require('./utils')\n        );\n    } else {\n        // Browser globals\n        var o = factory(root.SHA1, root.MD5, root.stropheUtils);\n        root.Strophe =        o.Strophe;\n        root.$build =         o.$build;\n        root.$iq =            o.$iq;\n        root.$msg =           o.$msg;\n        root.$pres =          o.$pres;\n        root.SHA1 =           o.SHA1;\n        root.MD5 =            o.MD5;\n        root.b64_hmac_sha1 =  o.SHA1.b64_hmac_sha1;\n        root.b64_sha1 =       o.SHA1.b64_sha1;\n        root.str_hmac_sha1 =  o.SHA1.str_hmac_sha1;\n        root.str_sha1 =       o.SHA1.str_sha1;\n    }\n}(this, function (SHA1, MD5, utils) {\n\nvar Strophe;\n\n/** Function: $build\n *  Create a Strophe.Builder.\n *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n *\n *  Parameters:\n *    (String) name - The root element name.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $build(name, attrs) { return new Strophe.Builder(name, attrs); }\n\n/** Function: $msg\n *  Create a Strophe.Builder with a <message/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <message/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $msg(attrs) { return new Strophe.Builder(\"message\", attrs); }\n\n/** Function: $iq\n *  Create a Strophe.Builder with an <iq/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <iq/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $iq(attrs) { return new Strophe.Builder(\"iq\", attrs); }\n\n/** Function: $pres\n *  Create a Strophe.Builder with a <presence/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <presence/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $pres(attrs) { return new Strophe.Builder(\"presence\", attrs); }\n\n/** Class: Strophe\n *  An object container for all Strophe library functions.\n *\n *  This class is just a container for all the objects and constants\n *  used in the library.  It is not meant to be instantiated, but to\n *  provide a namespace for library objects, constants, and functions.\n */\nStrophe = {\n    /** Constant: VERSION */\n    VERSION: \"1.2.16\",\n\n    /** Constants: XMPP Namespace Constants\n     *  Common namespace constants from the XMPP RFCs and XEPs.\n     *\n     *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n     *  NS.BOSH - BOSH namespace from XEP 206.\n     *  NS.CLIENT - Main XMPP client namespace.\n     *  NS.AUTH - Legacy authentication namespace.\n     *  NS.ROSTER - Roster operations namespace.\n     *  NS.PROFILE - Profile namespace.\n     *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n     *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n     *  NS.MUC - Multi-User Chat namespace from XEP 45.\n     *  NS.SASL - XMPP SASL namespace from RFC 3920.\n     *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n     *  NS.BIND - XMPP Binding namespace from RFC 3920.\n     *  NS.SESSION - XMPP Session namespace from RFC 3920.\n     *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n     *  NS.XHTML - XHTML body namespace from XEP 71.\n     */\n    NS: {\n        HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n        BOSH: \"urn:xmpp:xbosh\",\n        CLIENT: \"jabber:client\",\n        AUTH: \"jabber:iq:auth\",\n        ROSTER: \"jabber:iq:roster\",\n        PROFILE: \"jabber:iq:profile\",\n        DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n        DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n        MUC: \"http://jabber.org/protocol/muc\",\n        SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n        STREAM: \"http://etherx.jabber.org/streams\",\n        FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n        BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n        SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n        VERSION: \"jabber:iq:version\",\n        STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n        XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n        XHTML: \"http://www.w3.org/1999/xhtml\"\n    },\n\n    /** Constants: XHTML_IM Namespace\n     *  contains allowed tags, tag attributes, and css properties.\n     *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n     *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n     *  allowed tags and their attributes.\n     */\n    XHTML: {\n        tags: ['a','blockquote','br','cite','em','img','li','ol','p','span','strong','ul','body'],\n        attributes: {\n            'a':          ['href'],\n            'blockquote': ['style'],\n            'br':         [],\n            'cite':       ['style'],\n            'em':         [],\n            'img':        ['src', 'alt', 'style', 'height', 'width'],\n            'li':         ['style'],\n            'ol':         ['style'],\n            'p':          ['style'],\n            'span':       ['style'],\n            'strong':     [],\n            'ul':         ['style'],\n            'body':       []\n        },\n        css: ['background-color','color','font-family','font-size','font-style','font-weight','margin-left','margin-right','text-align','text-decoration'],\n        /** Function: XHTML.validTag\n         *\n         * Utility method to determine whether a tag is allowed\n         * in the XHTML_IM namespace.\n         *\n         * XHTML tag names are case sensitive and must be lower case.\n         */\n        validTag: function(tag) {\n            for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                if (tag === Strophe.XHTML.tags[i]) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /** Function: XHTML.validAttribute\n         *\n         * Utility method to determine whether an attribute is allowed\n         * as recommended per XEP-0071\n         *\n         * XHTML attribute names are case sensitive and must be lower case.\n         */\n        validAttribute: function(tag, attribute) {\n            if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                    if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                    }\n                }\n            }\n        return false;\n        },\n        validCSS: function(style) {\n            for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                if (style === Strophe.XHTML.css[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    /** Constants: Connection Status Constants\n     *  Connection status constants for use by the connection handler\n     *  callback.\n     *\n     *  Status.ERROR - An error has occurred\n     *  Status.CONNECTING - The connection is currently being made\n     *  Status.CONNFAIL - The connection attempt failed\n     *  Status.AUTHENTICATING - The connection is authenticating\n     *  Status.AUTHFAIL - The authentication attempt failed\n     *  Status.CONNECTED - The connection has succeeded\n     *  Status.DISCONNECTED - The connection has been terminated\n     *  Status.DISCONNECTING - The connection is currently being terminated\n     *  Status.ATTACHED - The connection has been attached\n     *  Status.REDIRECT - The connection has been redirected\n     *  Status.CONNTIMEOUT - The connection has timed out\n     */\n    Status: {\n        ERROR: 0,\n        CONNECTING: 1,\n        CONNFAIL: 2,\n        AUTHENTICATING: 3,\n        AUTHFAIL: 4,\n        CONNECTED: 5,\n        DISCONNECTED: 6,\n        DISCONNECTING: 7,\n        ATTACHED: 8,\n        REDIRECT: 9,\n        CONNTIMEOUT: 10\n    },\n\n    ErrorCondition: {\n        BAD_FORMAT: \"bad-format\",\n        CONFLICT: \"conflict\",\n        MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n        NO_AUTH_MECH: \"no-auth-mech\",\n        UNKNOWN_REASON: \"unknown\",\n    },\n\n    /** Constants: Log Level Constants\n     *  Logging level indicators.\n     *\n     *  LogLevel.DEBUG - Debug output\n     *  LogLevel.INFO - Informational output\n     *  LogLevel.WARN - Warnings\n     *  LogLevel.ERROR - Errors\n     *  LogLevel.FATAL - Fatal errors\n     */\n    LogLevel: {\n        DEBUG: 0,\n        INFO: 1,\n        WARN: 2,\n        ERROR: 3,\n        FATAL: 4\n    },\n\n    /** PrivateConstants: DOM Element Type Constants\n     *  DOM element types.\n     *\n     *  ElementType.NORMAL - Normal element.\n     *  ElementType.TEXT - Text data element.\n     *  ElementType.FRAGMENT - XHTML fragment element.\n     */\n    ElementType: {\n        NORMAL: 1,\n        TEXT: 3,\n        CDATA: 4,\n        FRAGMENT: 11\n    },\n\n    /** PrivateConstants: Timeout Values\n     *  Timeout values for error states.  These values are in seconds.\n     *  These should not be changed unless you know exactly what you are\n     *  doing.\n     *\n     *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n     *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 1.1, and with default wait, 66 seconds.\n     *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n     *      Strophe can detect early failure, it will consider the request\n     *      failed if it doesn't return after\n     *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 0.1, and with default wait, 6 seconds.\n     */\n    TIMEOUT: 1.1,\n    SECONDARY_TIMEOUT: 0.1,\n\n    /** Function: addNamespace\n     *  This function is used to extend the current namespaces in\n     *  Strophe.NS.  It takes a key and a value with the key being the\n     *  name of the new namespace, with its actual value.\n     *  For example:\n     *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n     *\n     *  Parameters:\n     *    (String) name - The name under which the namespace will be\n     *      referenced under Strophe.NS\n     *    (String) value - The actual namespace.\n     */\n    addNamespace: function (name, value) {\n        Strophe.NS[name] = value;\n    },\n\n    /** Function: forEachChild\n     *  Map a function over some or all child elements of a given element.\n     *\n     *  This is a small convenience function for mapping a function over\n     *  some or all of the children of an element.  If elemName is null, all\n     *  children will be passed to the function, otherwise only children\n     *  whose tag names match elemName will be passed.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The element to operate on.\n     *    (String) elemName - The child element tag name filter.\n     *    (Function) func - The function to apply to each child.  This\n     *      function should take a single argument, a DOM element.\n     */\n    forEachChild: function (elem, elemName, func) {\n        var i, childNode;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            childNode = elem.childNodes[i];\n            if (childNode.nodeType === Strophe.ElementType.NORMAL &&\n                (!elemName || this.isTagEqual(childNode, elemName))) {\n                func(childNode);\n            }\n        }\n    },\n\n    /** Function: isTagEqual\n     *  Compare an element's tag name with a string.\n     *\n     *  This function is case sensitive.\n     *\n     *  Parameters:\n     *    (XMLElement) el - A DOM element.\n     *    (String) name - The element name.\n     *\n     *  Returns:\n     *    true if the element's tag name matches _el_, and false\n     *    otherwise.\n     */\n    isTagEqual: function (el, name) {\n        return el.tagName === name;\n    },\n\n    /** PrivateVariable: _xmlGenerator\n     *  _Private_ variable that caches a DOM document to\n     *  generate elements.\n     */\n    _xmlGenerator: null,\n\n    /** PrivateFunction: _makeGenerator\n     *  _Private_ function that creates a dummy XML DOM document to serve as\n     *  an element and text node generator.\n     */\n    _makeGenerator: function () {\n        var doc;\n        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n        if (document.implementation.createDocument === undefined ||\n                        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n            doc = this._getIEXmlDom();\n            doc.appendChild(doc.createElement('strophe'));\n        } else {\n            doc = document.implementation\n                .createDocument('jabber:client', 'strophe', null);\n        }\n        return doc;\n    },\n\n    /** Function: xmlGenerator\n     *  Get the DOM document to generate elements.\n     *\n     *  Returns:\n     *    The currently used DOM document.\n     */\n    xmlGenerator: function () {\n        if (!Strophe._xmlGenerator) {\n            Strophe._xmlGenerator = Strophe._makeGenerator();\n        }\n        return Strophe._xmlGenerator;\n    },\n\n    /** PrivateFunction: _getIEXmlDom\n     *  Gets IE xml doc object\n     *\n     *  Returns:\n     *    A Microsoft XML DOM Object\n     *  See Also:\n     *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n     */\n    _getIEXmlDom : function() {\n        var doc = null;\n        var docStrings = [\n            \"Msxml2.DOMDocument.6.0\",\n            \"Msxml2.DOMDocument.5.0\",\n            \"Msxml2.DOMDocument.4.0\",\n            \"MSXML2.DOMDocument.3.0\",\n            \"MSXML2.DOMDocument\",\n            \"MSXML.DOMDocument\",\n            \"Microsoft.XMLDOM\"\n        ];\n\n        for (var d = 0; d < docStrings.length; d++) {\n            if (doc === null) {\n                try {\n                    doc = new ActiveXObject(docStrings[d]);\n                } catch (e) {\n                    doc = null;\n                }\n            } else {\n                break;\n            }\n        }\n        return doc;\n    },\n\n    /** Function: xmlElement\n     *  Create an XML DOM element.\n     *\n     *  This function creates an XML DOM element correctly across all\n     *  implementations. Note that these are not HTML DOM elements, which\n     *  aren't appropriate for XMPP stanzas.\n     *\n     *  Parameters:\n     *    (String) name - The name for the element.\n     *    (Array|Object) attrs - An optional array or object containing\n     *      key/value pairs to use as element attributes. The object should\n     *      be in the format {'key': 'value'} or {key: 'value'}. The array\n     *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n     *    (String) text - The text child data for the element.\n     *\n     *  Returns:\n     *    A new XML DOM element.\n     */\n    xmlElement: function (name) {\n        if (!name) { return null; }\n\n        var node = Strophe.xmlGenerator().createElement(name);\n        // FIXME: this should throw errors if args are the wrong type or\n        // there are more than two optional args\n        var a, i, k;\n        for (a = 1; a < arguments.length; a++) {\n            var arg = arguments[a];\n            if (!arg) { continue; }\n            if (typeof(arg) === \"string\" ||\n                typeof(arg) === \"number\") {\n                node.appendChild(Strophe.xmlTextNode(arg));\n            } else if (typeof(arg) === \"object\" &&\n                       typeof(arg.sort) === \"function\") {\n                for (i = 0; i < arg.length; i++) {\n                    var attr = arg[i];\n                    if (typeof(attr) === \"object\" &&\n                        typeof(attr.sort) === \"function\" &&\n                        attr[1] !== undefined &&\n                        attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                    }\n                }\n            } else if (typeof(arg) === \"object\") {\n                for (k in arg) {\n                    if (arg.hasOwnProperty(k)) {\n                        if (arg[k] !== undefined &&\n                            arg[k] !== null) {\n                            node.setAttribute(k, arg[k]);\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    },\n\n    /*  Function: xmlescape\n     *  Excapes invalid xml characters.\n     *\n     *  Parameters:\n     *     (String) text - text to escape.\n     *\n     *  Returns:\n     *      Escaped text.\n     */\n    xmlescape: function(text) {\n        text = text.replace(/\\&/g, \"&amp;\");\n        text = text.replace(/</g,  \"&lt;\");\n        text = text.replace(/>/g,  \"&gt;\");\n        text = text.replace(/'/g,  \"&apos;\");\n        text = text.replace(/\"/g,  \"&quot;\");\n        return text;\n    },\n\n    /*  Function: xmlunescape\n    *  Unexcapes invalid xml characters.\n    *\n    *  Parameters:\n    *     (String) text - text to unescape.\n    *\n    *  Returns:\n    *      Unescaped text.\n    */\n    xmlunescape: function(text) {\n        text = text.replace(/\\&amp;/g, \"&\");\n        text = text.replace(/&lt;/g,  \"<\");\n        text = text.replace(/&gt;/g,  \">\");\n        text = text.replace(/&apos;/g,  \"'\");\n        text = text.replace(/&quot;/g,  \"\\\"\");\n        return text;\n    },\n\n    /** Function: xmlTextNode\n     *  Creates an XML DOM text node.\n     *\n     *  Provides a cross implementation version of document.createTextNode.\n     *\n     *  Parameters:\n     *    (String) text - The content of the text node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlTextNode: function (text) {\n        return Strophe.xmlGenerator().createTextNode(text);\n    },\n\n    /** Function: xmlHtmlNode\n     *  Creates an XML DOM html node.\n     *\n     *  Parameters:\n     *    (String) html - The content of the html node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlHtmlNode: function (html) {\n        var node;\n        //ensure text is escaped\n        if (DOMParser) {\n            var parser = new DOMParser();\n            node = parser.parseFromString(html, \"text/xml\");\n        } else {\n            node = new ActiveXObject(\"Microsoft.XMLDOM\");\n            node.async=\"false\";\n            node.loadXML(html);\n        }\n        return node;\n    },\n\n    /** Function: getText\n     *  Get the concatenation of all text children of an element.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A String with the concatenated text of all text element children.\n     */\n    getText: function (elem) {\n        if (!elem) { return null; }\n\n        var str = \"\";\n        if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n            str += elem.nodeValue;\n        }\n\n        for (var i = 0; i < elem.childNodes.length; i++) {\n            if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                str += elem.childNodes[i].nodeValue;\n            }\n        }\n\n        return Strophe.xmlescape(str);\n    },\n\n    /** Function: copyElement\n     *  Copy an XML DOM element.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    copyElement: function (elem) {\n        var i, el;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            el = Strophe.xmlElement(elem.tagName);\n\n            for (i = 0; i < elem.attributes.length; i++) {\n                el.setAttribute(elem.attributes[i].nodeName,\n                                elem.attributes[i].value);\n            }\n\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n\n    /** Function: createHtml\n     *  Copy an HTML DOM element into an XML DOM.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (HTMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    createHtml: function (elem) {\n        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n            if(Strophe.XHTML.validTag(tag)) {\n                try {\n                    el = Strophe.xmlElement(tag);\n                    for(i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        attribute = Strophe.XHTML.attributes[tag][i];\n                        value = elem.getAttribute(attribute);\n                        if(typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                            continue;\n                        }\n                        if(attribute === 'style' && typeof value === 'object') {\n                            if(typeof value.cssText !== 'undefined') {\n                                value = value.cssText; // we're dealing with IE, need to get CSS out\n                            }\n                        }\n                        // filter out invalid css styles\n                        if(attribute === 'style') {\n                            css = [];\n                            cssAttrs = value.split(';');\n                            for(j = 0; j < cssAttrs.length; j++) {\n                                attr = cssAttrs[j].split(':');\n                                cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n                                if(Strophe.XHTML.validCSS(cssName)) {\n                                    cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                                    css.push(cssName + ': ' + cssValue);\n                                }\n                            }\n                            if(css.length > 0) {\n                                value = css.join('; ');\n                                el.setAttribute(attribute, value);\n                            }\n                        } else {\n                            el.setAttribute(attribute, value);\n                        }\n                    }\n\n                    for (i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                } catch(e) { // invalid elements\n                  el = Strophe.xmlTextNode('');\n                }\n            } else {\n                el = Strophe.xmlGenerator().createDocumentFragment();\n                for (i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                }\n            }\n        } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n            el = Strophe.xmlGenerator().createDocumentFragment();\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n    /** Function: escapeNode\n     *  Escape the node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An escaped node (or local part).\n     */\n    escapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/^\\s+|\\s+$/g, '')\n            .replace(/\\\\/g,  \"\\\\5c\")\n            .replace(/ /g,   \"\\\\20\")\n            .replace(/\\\"/g,  \"\\\\22\")\n            .replace(/\\&/g,  \"\\\\26\")\n            .replace(/\\'/g,  \"\\\\27\")\n            .replace(/\\//g,  \"\\\\2f\")\n            .replace(/:/g,   \"\\\\3a\")\n            .replace(/</g,   \"\\\\3c\")\n            .replace(/>/g,   \"\\\\3e\")\n            .replace(/@/g,   \"\\\\40\");\n    },\n\n    /** Function: unescapeNode\n     *  Unescape a node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An unescaped node (or local part).\n     */\n    unescapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/\\\\20/g, \" \")\n            .replace(/\\\\22/g, '\"')\n            .replace(/\\\\26/g, \"&\")\n            .replace(/\\\\27/g, \"'\")\n            .replace(/\\\\2f/g, \"/\")\n            .replace(/\\\\3a/g, \":\")\n            .replace(/\\\\3c/g, \"<\")\n            .replace(/\\\\3e/g, \">\")\n            .replace(/\\\\40/g, \"@\")\n            .replace(/\\\\5c/g, \"\\\\\");\n    },\n\n    /** Function: getNodeFromJid\n     *  Get the node portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the node.\n     */\n    getNodeFromJid: function (jid) {\n        if (jid.indexOf(\"@\") < 0) { return null; }\n        return jid.split(\"@\")[0];\n    },\n\n    /** Function: getDomainFromJid\n     *  Get the domain portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the domain.\n     */\n    getDomainFromJid: function (jid) {\n        var bare = Strophe.getBareJidFromJid(jid);\n        if (bare.indexOf(\"@\") < 0) {\n            return bare;\n        } else {\n            var parts = bare.split(\"@\");\n            parts.splice(0, 1);\n            return parts.join('@');\n        }\n    },\n\n    /** Function: getResourceFromJid\n     *  Get the resource portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the resource.\n     */\n    getResourceFromJid: function (jid) {\n        var s = jid.split(\"/\");\n        if (s.length < 2) { return null; }\n        s.splice(0, 1);\n        return s.join('/');\n    },\n\n    /** Function: getBareJidFromJid\n     *  Get the bare JID from a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the bare JID.\n     */\n    getBareJidFromJid: function (jid) {\n        return jid ? jid.split(\"/\")[0] : null;\n    },\n\n    /** PrivateFunction: _handleError\n     *  _Private_ function that properly logs an error to the console\n     */\n    _handleError: function (e) {\n        if (typeof e.stack !== \"undefined\") {\n            Strophe.fatal(e.stack);\n        }\n        if (e.sourceURL) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" +\n                          e.line + \" - \" + e.name + \": \" + e.message);\n        } else if (e.fileName) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" +\n                          e.fileName + \":\" + e.lineNumber + \" - \" +\n                          e.name + \": \" + e.message);\n        } else {\n            Strophe.fatal(\"error: \" + e.message);\n        }\n    },\n\n    /** Function: log\n     *  User overrideable logging function.\n     *\n     *  This function is called whenever the Strophe library calls any\n     *  of the logging functions.  The default implementation of this\n     *  function logs only fatal errors.  If client code wishes to handle the logging\n     *  messages, it should override this with\n     *  > Strophe.log = function (level, msg) {\n     *  >   (user code here)\n     *  > };\n     *\n     *  Please note that data sent and received over the wire is logged\n     *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n     *\n     *  The different levels and their meanings are\n     *\n     *    DEBUG - Messages useful for debugging purposes.\n     *    INFO - Informational messages.  This is mostly information like\n     *      'disconnect was called' or 'SASL auth succeeded'.\n     *    WARN - Warnings about potential problems.  This is mostly used\n     *      to report transient connection errors like request timeouts.\n     *    ERROR - Some error occurred.\n     *    FATAL - A non-recoverable fatal error occurred.\n     *\n     *  Parameters:\n     *    (Integer) level - The log level of the log message.  This will\n     *      be one of the values in Strophe.LogLevel.\n     *    (String) msg - The log message.\n     */\n    log: function (level, msg) {\n        if (level === this.LogLevel.FATAL &&\n            typeof window.console === 'object' &&\n            typeof window.console.error === 'function') {\n            window.console.error(msg);\n        }\n    },\n\n    /** Function: debug\n     *  Log a message at the Strophe.LogLevel.DEBUG level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    debug: function(msg) {\n        this.log(this.LogLevel.DEBUG, msg);\n    },\n\n    /** Function: info\n     *  Log a message at the Strophe.LogLevel.INFO level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    info: function (msg) {\n        this.log(this.LogLevel.INFO, msg);\n    },\n\n    /** Function: warn\n     *  Log a message at the Strophe.LogLevel.WARN level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    warn: function (msg) {\n        this.log(this.LogLevel.WARN, msg);\n    },\n\n    /** Function: error\n     *  Log a message at the Strophe.LogLevel.ERROR level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    error: function (msg) {\n        this.log(this.LogLevel.ERROR, msg);\n    },\n\n    /** Function: fatal\n     *  Log a message at the Strophe.LogLevel.FATAL level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    fatal: function (msg) {\n        this.log(this.LogLevel.FATAL, msg);\n    },\n\n    /** Function: serialize\n     *  Render a DOM element and all descendants to a String.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The serialized element tree as a String.\n     */\n    serialize: function (elem) {\n        var result;\n\n        if (!elem) { return null; }\n\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n\n        var nodeName = elem.nodeName;\n        var i, child;\n\n        if (elem.getAttribute(\"_realname\")) {\n            nodeName = elem.getAttribute(\"_realname\");\n        }\n\n        result = \"<\" + nodeName;\n        for (i = 0; i < elem.attributes.length; i++) {\n             if(elem.attributes[i].nodeName !== \"_realname\") {\n               result += \" \" + elem.attributes[i].nodeName +\n                   \"='\" + Strophe.xmlescape(elem.attributes[i].value) + \"'\";\n             }\n        }\n\n        if (elem.childNodes.length > 0) {\n            result += \">\";\n            for (i = 0; i < elem.childNodes.length; i++) {\n                child = elem.childNodes[i];\n                switch( child.nodeType ){\n                  case Strophe.ElementType.NORMAL:\n                    // normal element, so recurse\n                    result += Strophe.serialize(child);\n                    break;\n                  case Strophe.ElementType.TEXT:\n                    // text element to escape values\n                    result += Strophe.xmlescape(child.nodeValue);\n                    break;\n                  case Strophe.ElementType.CDATA:\n                    // cdata section so don't escape values\n                    result += \"<![CDATA[\"+child.nodeValue+\"]]>\";\n                }\n            }\n            result += \"</\" + nodeName + \">\";\n        } else {\n            result += \"/>\";\n        }\n\n        return result;\n    },\n\n    /** PrivateVariable: _requestId\n     *  _Private_ variable that keeps track of the request ids for\n     *  connections.\n     */\n    _requestId: 0,\n\n    /** PrivateVariable: Strophe.connectionPlugins\n     *  _Private_ variable Used to store plugin names that need\n     *  initialization on Strophe.Connection construction.\n     */\n    _connectionPlugins: {},\n\n    /** Function: addConnectionPlugin\n     *  Extends the Strophe.Connection object with the given plugin.\n     *\n     *  Parameters:\n     *    (String) name - The name of the extension.\n     *    (Object) ptype - The plugin's prototype.\n     */\n    addConnectionPlugin: function (name, ptype) {\n        Strophe._connectionPlugins[name] = ptype;\n    }\n};\n\n/** Class: Strophe.Builder\n *  XML DOM builder.\n *\n *  This object provides an interface similar to JQuery but for building\n *  DOM elements easily and rapidly.  All the functions except for toString()\n *  and tree() return the object, so calls can be chained.  Here's an\n *  example using the $iq() builder helper.\n *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n *  >     .c('query', {xmlns: 'strophe:example'})\n *  >     .c('example')\n *  >     .toString()\n *\n *  The above generates this XML fragment\n *  > <iq to='you' from='me' type='get' id='1'>\n *  >   <query xmlns='strophe:example'>\n *  >     <example/>\n *  >   </query>\n *  > </iq>\n *  The corresponding DOM manipulations to get a similar fragment would be\n *  a lot more tedious and probably involve several helper variables.\n *\n *  Since adding children makes new operations operate on the child, up()\n *  is provided to traverse up the tree.  To add two children, do\n *  > builder.c('child1', ...).up().c('child2', ...)\n *  The next operation on the Builder will be relative to the second child.\n */\n\n/** Constructor: Strophe.Builder\n *  Create a Strophe.Builder object.\n *\n *  The attributes should be passed in object notation.  For example\n *  > var b = new Builder('message', {to: 'you', from: 'me'});\n *  or\n *  > var b = new Builder('messsage', {'xml:lang': 'en'});\n *\n *  Parameters:\n *    (String) name - The name of the root element.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder.\n */\nStrophe.Builder = function (name, attrs) {\n    // Set correct namespace for jabber:client elements\n    if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n        if (attrs && !attrs.xmlns) {\n            attrs.xmlns = Strophe.NS.CLIENT;\n        } else if (!attrs) {\n            attrs = {xmlns: Strophe.NS.CLIENT};\n        }\n    }\n\n    // Holds the tree being built.\n    this.nodeTree = Strophe.xmlElement(name, attrs);\n\n    // Points to the current operation node.\n    this.node = this.nodeTree;\n};\n\nStrophe.Builder.prototype = {\n    /** Function: tree\n     *  Return the DOM tree.\n     *\n     *  This function returns the current DOM tree as an element object.  This\n     *  is suitable for passing to functions like Strophe.Connection.send().\n     *\n     *  Returns:\n     *    The DOM tree as a element object.\n     */\n    tree: function () {\n        return this.nodeTree;\n    },\n\n    /** Function: toString\n     *  Serialize the DOM tree to a String.\n     *\n     *  This function returns a string serialization of the current DOM\n     *  tree.  It is often used internally to pass data to a\n     *  Strophe.Request object.\n     *\n     *  Returns:\n     *    The serialized DOM tree in a String.\n     */\n    toString: function () {\n        return Strophe.serialize(this.nodeTree);\n    },\n\n    /** Function: up\n     *  Make the current parent element the new current element.\n     *\n     *  This function is often used after c() to traverse back up the tree.\n     *  For example, to add two children to the same element\n     *  > builder.c('child1', {}).up().c('child2', {});\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    up: function () {\n        this.node = this.node.parentNode;\n        return this;\n    },\n\n    /** Function: root\n     *  Make the root element the new current element.\n     *\n     *  When at a deeply nested element in the tree, this function can be used\n     *  to jump back to the root of the tree, instead of having to repeatedly\n     *  call up().\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    root: function () {\n        this.node = this.nodeTree;\n        return this;\n    },\n\n    /** Function: attrs\n     *  Add or modify attributes of the current element.\n     *\n     *  The attributes should be passed in object notation.  This function\n     *  does not move the current element pointer.\n     *\n     *  Parameters:\n     *    (Object) moreattrs - The attributes to add/modify in object notation.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    attrs: function (moreattrs) {\n        for (var k in moreattrs) {\n            if (moreattrs.hasOwnProperty(k)) {\n                if (moreattrs[k] === undefined) {\n                    this.node.removeAttribute(k);\n                } else {\n                    this.node.setAttribute(k, moreattrs[k]);\n                }\n            }\n        }\n        return this;\n    },\n\n    /** Function: c\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function moves the current element pointer to the child,\n     *  unless text is provided.  If you need to add another child, it\n     *  is necessary to use up() to go back to the parent in the tree.\n     *\n     *  Parameters:\n     *    (String) name - The name of the child.\n     *    (Object) attrs - The attributes of the child in object notation.\n     *    (String) text - The text to add to the child.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    c: function (name, attrs, text) {\n        var child = Strophe.xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== \"string\" && typeof text !==\"number\") {\n            this.node = child;\n        }\n        return this;\n    },\n\n    /** Function: cnode\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function is the same as c() except that instead of using a\n     *  name and an attributes object to create the child it uses an\n     *  existing DOM element object.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    cnode: function (elem) {\n        var impNode;\n        var xmlGen = Strophe.xmlGenerator();\n        try {\n            impNode = (xmlGen.importNode !== undefined);\n        } catch (e) {\n            impNode = false;\n        }\n        var newElem = impNode ?\n                      xmlGen.importNode(elem, true) :\n                      Strophe.copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = newElem;\n        return this;\n    },\n\n    /** Function: t\n     *  Add a child text element.\n     *\n     *  This *does not* make the child the new current element since there\n     *  are no children of text elements.\n     *\n     *  Parameters:\n     *    (String) text - The text data to append to the current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    t: function (text) {\n        var child = Strophe.xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n    },\n\n    /** Function: h\n     *  Replace current element contents with the HTML passed in.\n     *\n     *  This *does not* make the child the new current element\n     *\n     *  Parameters:\n     *    (String) html - The html to insert as contents of current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    h: function (html) {\n        var fragment = document.createElement('body');\n\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n\n        // copy cleaned html into an xml dom\n        var xhtml = Strophe.createHtml(fragment);\n\n        while(xhtml.childNodes.length > 0) {\n            this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n    }\n};\n\n/** PrivateClass: Strophe.Handler\n *  _Private_ helper class for managing stanza handlers.\n *\n *  A Strophe.Handler encapsulates a user provided callback function to be\n *  executed when matching stanzas are received by the connection.\n *  Handlers can be either one-off or persistant depending on their\n *  return value. Returning true will cause a Handler to remain active, and\n *  returning false will remove the Handler.\n *\n *  Users will not use Strophe.Handler objects directly, but instead they\n *  will use Strophe.Connection.addHandler() and\n *  Strophe.Connection.deleteHandler().\n */\n\n/** PrivateConstructor: Strophe.Handler\n *  Create and initialize a new Strophe.Handler.\n *\n *  Parameters:\n *    (Function) handler - A function to be executed when the handler is run.\n *    (String) ns - The namespace to match.\n *    (String) name - The element name to match.\n *    (String) type - The element type to match.\n *    (String) id - The element id attribute to match.\n *    (String) from - The element from attribute to match.\n *    (Object) options - Handler options\n *\n *  Returns:\n *    A new Strophe.Handler object.\n */\nStrophe.Handler = function (handler, ns, name, type, id, from, options) {\n    this.handler = handler;\n    this.ns = ns;\n    this.name = name;\n    this.type = type;\n    this.id = id;\n    this.options = options || {'matchBareFromJid': false, 'ignoreNamespaceFragment': false};\n    // BBB: Maintain backward compatibility with old `matchBare` option\n    if (this.options.matchBare) {\n        Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n        this.options.matchBareFromJid = this.options.matchBare;\n        delete this.options.matchBare;\n    }\n\n    if (this.options.matchBareFromJid) {\n        this.from = from ? Strophe.getBareJidFromJid(from) : null;\n    } else {\n        this.from = from;\n    }\n    // whether the handler is a user handler or a system handler\n    this.user = true;\n};\n\nStrophe.Handler.prototype = {\n    /** PrivateFunction: getNamespace\n     *  Returns the XML namespace attribute on an element.\n     *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n     *  URL fragment will be stripped.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element with the namespace.\n     *\n     *  Returns:\n     *    The namespace, with optionally the fragment stripped.\n     */\n    getNamespace: function (elem) {\n        var elNamespace = elem.getAttribute(\"xmlns\");\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n            elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n    },\n\n    /** PrivateFunction: namespaceMatch\n     *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    namespaceMatch: function (elem) {\n        var nsMatch = false;\n        if (!this.ns) {\n            return true;\n        } else {\n            var that = this;\n            Strophe.forEachChild(elem, null, function (elem) {\n                if (that.getNamespace(elem) === that.ns) {\n                    nsMatch = true;\n                }\n            });\n            nsMatch = nsMatch || this.getNamespace(elem) === this.ns;\n        }\n        return nsMatch;\n    },\n\n    /** PrivateFunction: isMatch\n     *  Tests if a stanza matches the Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    isMatch: function (elem) {\n        var from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n            from = Strophe.getBareJidFromJid(from);\n        }\n        var elem_type = elem.getAttribute(\"type\");\n        if (this.namespaceMatch(elem) &&\n            (!this.name || Strophe.isTagEqual(elem, this.name)) &&\n            (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) &&\n            (!this.id || elem.getAttribute(\"id\") === this.id) &&\n            (!this.from || from === this.from)) {\n                return true;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: run\n     *  Run the callback on a matching stanza.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The DOM element that triggered the\n     *      Strophe.Handler.\n     *\n     *  Returns:\n     *    A boolean indicating if the handler should remain active.\n     */\n    run: function (elem) {\n        var result = null;\n        try {\n            result = this.handler(elem);\n        } catch (e) {\n            Strophe._handleError(e);\n            throw e;\n        }\n        return result;\n    },\n\n    /** PrivateFunction: toString\n     *  Get a String representation of the Strophe.Handler object.\n     *\n     *  Returns:\n     *    A String.\n     */\n    toString: function () {\n        return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" +\n            this.id + \",\" + this.ns + \")}\";\n    }\n};\n\n/** PrivateClass: Strophe.TimedHandler\n *  _Private_ helper class for managing timed handlers.\n *\n *  A Strophe.TimedHandler encapsulates a user provided callback that\n *  should be called after a certain period of time or at regular\n *  intervals.  The return value of the callback determines whether the\n *  Strophe.TimedHandler will continue to fire.\n *\n *  Users will not use Strophe.TimedHandler objects directly, but instead\n *  they will use Strophe.Connection.addTimedHandler() and\n *  Strophe.Connection.deleteTimedHandler().\n */\n\n/** PrivateConstructor: Strophe.TimedHandler\n *  Create and initialize a new Strophe.TimedHandler object.\n *\n *  Parameters:\n *    (Integer) period - The number of milliseconds to wait before the\n *      handler is called.\n *    (Function) handler - The callback to run when the handler fires.  This\n *      function should take no arguments.\n *\n *  Returns:\n *    A new Strophe.TimedHandler object.\n */\nStrophe.TimedHandler = function (period, handler) {\n    this.period = period;\n    this.handler = handler;\n    this.lastCalled = new Date().getTime();\n    this.user = true;\n};\n\nStrophe.TimedHandler.prototype = {\n    /** PrivateFunction: run\n     *  Run the callback for the Strophe.TimedHandler.\n     *\n     *  Returns:\n     *    true if the Strophe.TimedHandler should be called again, and false\n     *      otherwise.\n     */\n    run: function () {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n    },\n\n    /** PrivateFunction: reset\n     *  Reset the last called time for the Strophe.TimedHandler.\n     */\n    reset: function () {\n        this.lastCalled = new Date().getTime();\n    },\n\n    /** PrivateFunction: toString\n     *  Get a string representation of the Strophe.TimedHandler object.\n     *\n     *  Returns:\n     *    The string representation.\n     */\n    toString: function () {\n        return \"{TimedHandler: \" + this.handler + \"(\" + this.period +\")}\";\n    }\n};\n\n/** Class: Strophe.Connection\n *  XMPP Connection manager.\n *\n *  This class is the main part of Strophe.  It manages a BOSH or websocket\n *  connection to an XMPP server and dispatches events to the user callbacks\n *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n *  and legacy authentication.\n *\n *  After creating a Strophe.Connection object, the user will typically\n *  call connect() with a user supplied callback to handle connection level\n *  events like authentication failure, disconnection, or connection\n *  complete.\n *\n *  The user will also have several event handlers defined by using\n *  addHandler() and addTimedHandler().  These will allow the user code to\n *  respond to interesting stanzas or do something periodically with the\n *  connection. These handlers will be active once authentication is\n *  finished.\n *\n *  To send data to the connection, use send().\n */\n\n/** Constructor: Strophe.Connection\n *  Create and initialize a Strophe.Connection object.\n *\n *  The transport-protocol for this connection will be chosen automatically\n *  based on the given service parameter. URLs starting with \"ws://\" or\n *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n *  or without a protocol will use BOSH.\n *\n *  To make Strophe connect to the current host you can leave out the protocol\n *  and host part and just pass the path, e.g.\n *\n *  > var conn = new Strophe.Connection(\"/http-bind/\");\n *\n *  Options common to both Websocket and BOSH:\n *  ------------------------------------------\n *\n *  cookies:\n *\n *  The *cookies* option allows you to pass in cookies to be added to the\n *  document. These cookies will then be included in the BOSH XMLHttpRequest\n *  or in the websocket connection.\n *\n *  The passed in value must be a map of cookie names and string values.\n *\n *  > { \"myCookie\": {\n *  >     \"value\": \"1234\",\n *  >     \"domain\": \".example.org\",\n *  >     \"path\": \"/\",\n *  >     \"expires\": expirationDate\n *  >     }\n *  > }\n *\n *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n *  Those cookies need to be set under those domains, for example they can be\n *  set server-side by making a XHR call to that domain to ask it to set any\n *  necessary cookies.\n *\n *  mechanisms:\n *\n *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n *  instance of Strophe.Connection (and therefore your XMPP client) will\n *  support.\n *\n *  The value must be an array of objects with Strophe.SASLMechanism\n *  prototypes.\n *\n *  If nothing is specified, then the following mechanisms (and their\n *  priorities) are registered:\n *\n *      SCRAM-SHA1 - 70\n *      DIGEST-MD5 - 60\n *      PLAIN - 50\n *      OAUTH-BEARER - 40\n *      OAUTH-2 - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  WebSocket options:\n *  ------------------\n *\n *  If you want to connect to the current host with a WebSocket connection you\n *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n *  for Secure WebSocket.\n *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n *\n *  > var conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n *\n *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n *  of the current site.\n *\n *  Also because downgrading security is not permitted by browsers, when using\n *  relative URLs both BOSH and WebSocket connections will use their secure\n *  variants if the current connection to the site is also secure (https).\n *\n *  BOSH options:\n *  -------------\n *\n *  By adding \"sync\" to the options, you can control if requests will\n *  be made synchronously or not. The default behaviour is asynchronous.\n *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n *  > var conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n *\n *  You can also toggle this on an already established connection.\n *  > conn.options.sync = true;\n *\n *  The *customHeaders* option can be used to provide custom HTTP headers to be\n *  included in the XMLHttpRequests made.\n *\n *  The *keepalive* option can be used to instruct Strophe to maintain the\n *  current BOSH session across interruptions such as webpage reloads.\n *\n *  It will do this by caching the sessions tokens in sessionStorage, and when\n *  \"restore\" is called it will check whether there are cached tokens with\n *  which it can resume an existing session.\n *\n *  The *withCredentials* option should receive a Boolean value and is used to\n *  indicate wether cookies should be included in ajax requests (by default\n *  they're not).\n *  Set this value to true if you are connecting to a BOSH service\n *  and for some reason need to send cookies to it.\n *  In order for this to work cross-domain, the server must also enable\n *  credentials by setting the Access-Control-Allow-Credentials response header\n *  to \"true\". For most usecases however this setting should be false (which\n *  is the default).\n *  Additionally, when using Access-Control-Allow-Credentials, the\n *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n *  instead must be restricted to actual domains.\n *\n *  The *contentType* option can be set to change the default Content-Type\n *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n *  CORS preflight requests that are sent to the server.\n *\n *  Parameters:\n *    (String) service - The BOSH or WebSocket service URL.\n *    (Object) options - A hash of configuration options\n *\n *  Returns:\n *    A new Strophe.Connection object.\n */\nStrophe.Connection = function (service, options) {\n    // The service URL\n    this.service = service;\n    // Configuration options\n    this.options = options || {};\n    var proto = this.options.protocol || \"\";\n\n    // Select protocal based on service or options\n    if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 ||\n            proto.indexOf(\"ws\") === 0) {\n        this._proto = new Strophe.Websocket(this);\n    } else {\n        this._proto = new Strophe.Bosh(this);\n    }\n\n    /* The connected JID. */\n    this.jid = \"\";\n    /* the JIDs domain */\n    this.domain = null;\n    /* stream:features */\n    this.features = null;\n\n    // SASL\n    this._sasl_data = {};\n    this.do_session = false;\n    this.do_bind = false;\n\n    // handler lists\n    this.timedHandlers = [];\n    this.handlers = [];\n    this.removeTimeds = [];\n    this.removeHandlers = [];\n    this.addTimeds = [];\n    this.addHandlers = [];\n    this.protocolErrorHandlers = {\n        'HTTP': {},\n        'websocket': {}\n    };\n\n    this._idleTimeout = null;\n    this._disconnectTimeout = null;\n\n    this.authenticated = false;\n    this.connected = false;\n    this.disconnecting = false;\n    this.do_authentication = true;\n    this.paused = false;\n    this.restored = false;\n\n    this._data = [];\n    this._uniqueId = 0;\n\n    this._sasl_success_handler = null;\n    this._sasl_failure_handler = null;\n    this._sasl_challenge_handler = null;\n\n    // Max retries before disconnecting\n    this.maxRetries = 5;\n\n    // Call onIdle callback every 1/10th of a second\n    // XXX: setTimeout should be called only with function expressions (23974bc1)\n    this._idleTimeout = setTimeout(function() {\n        this._onIdle();\n    }.bind(this), 100);\n\n    utils.addCookies(this.options.cookies);\n    this.registerSASLMechanisms(this.options.mechanisms);\n\n    // initialize plugins\n    for (var k in Strophe._connectionPlugins) {\n        if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n            var ptype = Strophe._connectionPlugins[k];\n            // jslint complaints about the below line, but this is fine\n            var F = function () {}; // jshint ignore:line\n            F.prototype = ptype;\n            this[k] = new F();\n            this[k].init(this);\n        }\n    }\n};\n\nStrophe.Connection.prototype = {\n    /** Function: reset\n     *  Reset the connection.\n     *\n     *  This function should be called after a connection is disconnected\n     *  before that connection is reused.\n     */\n    reset: function () {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        this._data = [];\n        this._requests = [];\n        this._uniqueId = 0;\n    },\n\n    /** Function: pause\n     *  Pause the request manager.\n     *\n     *  This will prevent Strophe from sending any more requests to the\n     *  server.  This is very useful for temporarily pausing\n     *  BOSH-Connections while a lot of send() calls are happening quickly.\n     *  This causes Strophe to send the data in a single request, saving\n     *  many request trips.\n     */\n    pause: function () {\n        this.paused = true;\n    },\n\n    /** Function: resume\n     *  Resume the request manager.\n     *\n     *  This resumes after pause() has been called.\n     */\n    resume: function () {\n        this.paused = false;\n    },\n\n    /** Function: getUniqueId\n     *  Generate a unique ID for use in <iq/> elements.\n     *\n     *  All <iq/> stanzas are required to have unique id attributes.  This\n     *  function makes creating these easy.  Each connection instance has\n     *  a counter which starts from zero, and the value of this counter\n     *  plus a colon followed by the suffix becomes the unique id. If no\n     *  suffix is supplied, the counter is used as the unique id.\n     *\n     *  Suffixes are used to make debugging easier when reading the stream\n     *  data, and their use is recommended.  The counter resets to 0 for\n     *  every new connection for the same reason.  For connections to the\n     *  same server that authenticate the same way, all the ids should be\n     *  the same, which makes it easy to see changes.  This is useful for\n     *  automated testing as well.\n     *\n     *  Parameters:\n     *    (String) suffix - A optional suffix to append to the id.\n     *\n     *  Returns:\n     *    A unique string to be used for the id attribute.\n     */\n    getUniqueId: function(suffix) {\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n        if (typeof(suffix) === \"string\" || typeof(suffix) === \"number\") {\n            return uuid + \":\" + suffix;\n        } else {\n            return uuid + \"\";\n        }\n    },\n\n    /** Function: addProtocolErrorHandler\n     *  Register a handler function for when a protocol (websocker or HTTP)\n     *  error occurs.\n     *\n     *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n     *  Patches that handle websocket errors would be very welcome.\n     *\n     *  Parameters:\n     *    (String) protocol - 'HTTP' or 'websocket'\n     *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n     *    (Function) callback - Function that will fire on Http error\n     *\n     *  Example:\n     *  function onError(err_code){\n     *    //do stuff\n     *  }\n     *\n     *  var conn = Strophe.connect('http://example.com/http-bind');\n     *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n     *  // Triggers HTTP 500 error and onError handler will be called\n     *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n     */\n    addProtocolErrorHandler: function(protocol, status_code, callback){\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n    },\n\n\n    /** Function: connect\n     *  Starts the connection process.\n     *\n     *  As the connection process proceeds, the user supplied callback will\n     *  be triggered multiple times with status updates.  The callback\n     *  should take two arguments - the status code and the error condition.\n     *\n     *  The status code will be one of the values in the Strophe.Status\n     *  constants.  The error condition will be one of the conditions\n     *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n     *\n     *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n     *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n     *  of the optional parameters.\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID,\n     *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n     *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n     *      process the provided password value as an access token).\n     *    (String) pass - The user's password.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (String) route - The optional route value.\n     *    (String) authcid - The optional alternative authentication identity\n     *      (username) if intending to impersonate another user.\n     *      When using the SASL-EXTERNAL authentication mechanism, for example\n     *      with client certificates, then the authcid value is used to\n     *      determine whether an authorization JID (authzid) should be sent to\n     *      the server. The authzid should not be sent to the server if the\n     *      authzid and authcid are the same. So to prevent it from being sent\n     *      (for example when the JID is already contained in the client\n     *      certificate), set authcid to that same JID. See XEP-178 for more\n     *      details.\n     */\n    connect: function (jid, pass, callback, wait, hold, route, authcid) {\n        this.jid = jid;\n        /** Variable: authzid\n         *  Authorization identity.\n         */\n        this.authzid = Strophe.getBareJidFromJid(this.jid);\n\n        /** Variable: authcid\n         *  Authentication identity (User name).\n         */\n        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n\n        /** Variable: pass\n         *  Authentication identity (User password).\n         */\n        this.pass = pass;\n\n        /** Variable: servtype\n         *  Digest MD5 compatibility.\n         */\n        this.servtype = \"xmpp\";\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n\n        // parse jid for domain\n        this.domain = Strophe.getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n    },\n\n    /** Function: attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Strophe.Bosh) {\n            this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"attach\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** Function: restore\n     *  Attempt to restore a cached BOSH session.\n     *\n     *  This function is only useful in conjunction with providing the\n     *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n     *\n     *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n     *  RID (Request ID) and SID (Session ID) and then when this function is\n     *  called, it will attempt to restore the session from those cached\n     *  tokens.\n     *\n     *  This function must therefore be called instead of connect or attach.\n     *\n     *  For an example on how to use it, please see examples/restore.js\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    restore: function (jid, callback, wait, hold, wind) {\n        if (this._sessionCachingSupported()) {\n            this._proto._restore(jid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"restore\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** PrivateFunction: _sessionCachingSupported\n     * Checks whether sessionStorage and JSON are supported and whether we're\n     * using BOSH.\n     */\n    _sessionCachingSupported: function () {\n        if (this._proto instanceof Strophe.Bosh) {\n            if (!JSON) { return false; }\n            try {\n                sessionStorage.setItem('_strophe_', '_strophe_');\n                sessionStorage.removeItem('_strophe_');\n            } catch (e) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    },\n\n    /** Function: xmlInput\n     *  User overrideable function that receives XML data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlInput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML data received by the connection.\n     */\n    /* jshint unused:false */\n    xmlInput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: xmlOutput\n     *  User overrideable function that receives XML data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlOutput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XMLdata sent by the connection.\n     */\n    /* jshint unused:false */\n    xmlOutput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawInput\n     *  User overrideable function that receives raw data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawInput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data received by the connection.\n     */\n    /* jshint unused:false */\n    rawInput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawOutput\n     *  User overrideable function that receives raw data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawOutput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data sent by the connection.\n     */\n    /* jshint unused:false */\n    rawOutput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: nextValidRid\n     *  User overrideable function that receives the new valid rid.\n     *\n     *  The default function does nothing. User code can override this with\n     *  > Strophe.Connection.nextValidRid = function (rid) {\n     *  >    (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (Number) rid - The next valid rid\n     */\n    /* jshint unused:false */\n    nextValidRid: function (rid) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: send\n     *  Send a stanza.\n     *\n     *  This function is called to push data onto the send queue to\n     *  go out over the wire.  Whenever a request is sent to the BOSH\n     *  server, all pending data is sent and the queue is flushed.\n     *\n     *  Parameters:\n     *    (XMLElement |\n     *     [XMLElement] |\n     *     Strophe.Builder) elem - The stanza to send.\n     */\n    send: function (elem) {\n        if (elem === null) { return ; }\n        if (typeof(elem.sort) === \"function\") {\n            for (var i = 0; i < elem.length; i++) {\n                this._queueData(elem[i]);\n            }\n        } else if (typeof(elem.tree) === \"function\") {\n            this._queueData(elem.tree());\n        } else {\n            this._queueData(elem);\n        }\n\n        this._proto._send();\n    },\n\n    /** Function: flush\n     *  Immediately send any pending outgoing data.\n     *\n     *  Normally send() queues outgoing data until the next idle period\n     *  (100ms), which optimizes network use in the common cases when\n     *  several send()s are called in succession. flush() can be used to\n     *  immediately send all pending data.\n     */\n    flush: function () {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle();\n    },\n\n    /** Function: sendPresence\n     *  Helper function to send presence stanzas. The main benefit is for\n     *  sending presence stanzas for which you expect a responding presence\n     *  stanza with the same id (for example when leaving a chat room).\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the presence.\n     */\n    sendPresence: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendPresence\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var type = stanza.getAttribute('type');\n                if (type === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else if (callback) {\n                    callback(stanza);\n                }\n            }, null, 'presence', null, id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** Function: sendIQ\n     *  Helper function to send IQ stanzas.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the IQ.\n    */\n    sendIQ: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendIQ\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var iqtype = stanza.getAttribute('type');\n                if (iqtype === 'result') {\n                    if (callback) {\n                        callback(stanza);\n                    }\n                } else if (iqtype === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else {\n                    throw {\n                        name: \"StropheError\",\n                        message: \"Got bad IQ type of \" + iqtype\n                    };\n                }\n            }, null, 'iq', ['error', 'result'], id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** PrivateFunction: _queueData\n     *  Queue outgoing data for later sending.  Also ensures that the data\n     *  is a DOMElement.\n     */\n    _queueData: function (element) {\n        if (element === null ||\n            !element.tagName ||\n            !element.childNodes) {\n            throw {\n                name: \"StropheError\",\n                message: \"Cannot queue non-DOMElement.\"\n            };\n        }\n        this._data.push(element);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._data.push(\"restart\");\n        this._proto._sendRestart();\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this), 100);\n    },\n\n    /** Function: addTimedHandler\n     *  Add a timed handler to the connection.\n     *\n     *  This function adds a timed handler.  The provided handler will\n     *  be called every period milliseconds until it returns false,\n     *  the connection is terminated, or the handler is removed.  Handlers\n     *  that wish to continue being invoked should return true.\n     *\n     *  Because of method binding it is necessary to save the result of\n     *  this function if you wish to remove a handler with\n     *  deleteTimedHandler().\n     *\n     *  Note that user handlers are not active until authentication is\n     *  successful.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** Function: deleteTimedHandler\n     *  Delete a timed handler for a connection.\n     *\n     *  This function removes a timed handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addTimedHandler(),\n     *  but is the reference returned from addTimedHandler().\n     *\n     *  Parameters:\n     *    (Strophe.TimedHandler) handRef - The handler reference.\n     */\n    deleteTimedHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n    },\n\n    /** Function: addHandler\n     *  Add a stanza handler for the connection.\n     *\n     *  This function adds a stanza handler to the connection.  The\n     *  handler callback will be called for any stanza that matches\n     *  the parameters.  Note that if multiple parameters are supplied,\n     *  they must all match for the handler to be invoked.\n     *\n     *  The handler will receive the stanza that triggered it as its argument.\n     *  *The handler should return true if it is to be invoked again;\n     *  returning false will remove the handler after it returns.*\n     *\n     *  As a convenience, the ns parameters applies to the top level element\n     *  and also any of its immediate children.  This is primarily to make\n     *  matching /iq/query elements easy.\n     *\n     *  Options\n     *  ~~~~~~~\n     *  With the options argument, you can specify boolean flags that affect how\n     *  matches are being done.\n     *\n     *  Currently two flags exist:\n     *\n     *  - matchBareFromJid:\n     *      When set to true, the from parameter and the\n     *      from attribute on the stanza will be matched as bare JIDs instead\n     *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n     *      value of options. The default value for matchBareFromJid is false.\n     *\n     *  - ignoreNamespaceFragment:\n     *      When set to true, a fragment specified on the stanza's namespace\n     *      URL will be ignored when it's matched with the one configured for\n     *      the handler.\n     *\n     *      This means that if you register like this:\n     *      >   connection.addHandler(\n     *      >       handler,\n     *      >       'http://jabber.org/protocol/muc',\n     *      >       null, null, null, null,\n     *      >       {'ignoreNamespaceFragment': true}\n     *      >   );\n     *\n     *      Then a stanza with XML namespace of\n     *      'http://jabber.org/protocol/muc#user' will also be matched. If\n     *      'ignoreNamespaceFragment' is false, then only stanzas with\n     *      'http://jabber.org/protocol/muc' will be matched.\n     *\n     *  Deleting the handler\n     *  ~~~~~~~~~~~~~~~~~~~~\n     *  The return value should be saved if you wish to remove the handler\n     *  with deleteHandler().\n     *\n     *  Parameters:\n     *    (Function) handler - The user callback.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String|Array) type - The stanza type (or types if an array) to match.\n     *    (String) id - The stanza id attribute to match.\n     *    (String) from - The stanza from attribute to match.\n     *    (String) options - The handler options\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addHandler: function (handler, ns, name, type, id, from, options) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** Function: deleteHandler\n     *  Delete a stanza handler for a connection.\n     *\n     *  This function removes a stanza handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addHandler(),\n     *  but is the reference returned from addHandler().\n     *\n     *  Parameters:\n     *    (Strophe.Handler) handRef - The handler reference.\n     */\n    deleteHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        var i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n            this.addHandlers.splice(i, 1);\n        }\n    },\n\n    /** Function: registerSASLMechanisms\n     *\n     * Register the SASL mechanisms which will be supported by this instance of\n     * Strophe.Connection (i.e. which this XMPP client will support).\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n     *\n     */\n    registerSASLMechanisms: function (mechanisms) {\n        this.mechanisms = {};\n        mechanisms = mechanisms || [\n            Strophe.SASLAnonymous,\n            Strophe.SASLExternal,\n            Strophe.SASLMD5,\n            Strophe.SASLOAuthBearer,\n            Strophe.SASLXOAuth2,\n            Strophe.SASLPlain,\n            Strophe.SASLSHA1\n        ];\n        mechanisms.forEach(this.registerSASLMechanism.bind(this));\n    },\n\n    /** Function: registerSASLMechanism\n     *\n     * Register a single SASL mechanism, to be supported by this client.\n     *\n     *  Parameters:\n     *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n     *\n     */\n    registerSASLMechanism: function (mechanism) {\n        this.mechanisms[mechanism.prototype.name] = mechanism;\n    },\n\n    /** Function: disconnect\n     *  Start the graceful disconnection process.\n     *\n     *  This function starts the disconnection process.  This process starts\n     *  by sending unavailable presence and sending BOSH body of type\n     *  terminate.  A timeout handler makes sure that disconnection happens\n     *  even if the BOSH server does not respond.\n     *  If the Connection object isn't connected, at least tries to abort all pending requests\n     *  so the connection object won't generate successful requests (which were already opened).\n     *\n     *  The user supplied connection callback will be notified of the\n     *  progress as this process happens.\n     *\n     *  Parameters:\n     *    (String) reason - The reason the disconnect is occuring.\n     */\n    disconnect: function (reason) {\n        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n        Strophe.info(\"Disconnect was called because: \" + reason);\n        if (this.connected) {\n            var pres = false;\n            this.disconnecting = true;\n            if (this.authenticated) {\n                pres = $pres({\n                    xmlns: Strophe.NS.CLIENT,\n                    type: 'unavailable'\n                });\n            }\n            // setup timeout handler\n            this._disconnectTimeout = this._addSysTimedHandler(\n                3000, this._onDisconnectTimeout.bind(this));\n            this._proto._disconnect(pres);\n        } else {\n            Strophe.info(\"Disconnect was called before Strophe connected to the server\");\n            this._proto._abortAllRequests();\n            this._doDisconnect();\n        }\n    },\n\n    /** PrivateFunction: _changeConnectStatus\n     *  _Private_ helper function that makes sure plugins and the user's\n     *  callback are notified of connection status changes.\n     *\n     *  Parameters:\n     *    (Integer) status - the new connection status, one of the values\n     *      in Strophe.Status\n     *    (String) condition - the error condition or null\n     *    (XMLElement) elem - The triggering stanza.\n     */\n    _changeConnectStatus: function (status, condition, elem) {\n        // notify all plugins listening for status changes\n        for (var k in Strophe._connectionPlugins) {\n            if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n                var plugin = this[k];\n                if (plugin.statusChanged) {\n                    try {\n                        plugin.statusChanged(status, condition);\n                    } catch (err) {\n                        Strophe.error(\"\" + k + \" plugin caused an exception \" +\n                                      \"changing status: \" + err);\n                    }\n                }\n            }\n        }\n\n        // notify the user's callback\n        if (this.connect_callback) {\n            try {\n                this.connect_callback(status, condition, elem);\n            } catch (e) {\n                Strophe._handleError(e);\n                Strophe.error(\n                    \"User connection callback caused an \"+\"exception: \"+e);\n            }\n        }\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  This is the last piece of the disconnection logic.  This resets the\n     *  connection and alerts the user's connection callback.\n     */\n    _doDisconnect: function (condition) {\n        if (typeof this._idleTimeout === \"number\") {\n            clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n            this.deleteTimedHandler(this._disconnectTimeout);\n            this._disconnectTimeout = null;\n        }\n\n        Strophe.info(\"_doDisconnect was called\");\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n        this.connected = false;\n    },\n\n    /** PrivateFunction: _dataRecv\n     *  _Private_ handler to processes incoming data from the the connection.\n     *\n     *  Except for _connect_cb handling the initial connection request,\n     *  this function handles the incoming data for all requests.  This\n     *  function also fires stanza handlers that match each incoming\n     *  stanza.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that has data ready.\n     *    (string) req - The stanza a raw string (optiona).\n     */\n    _dataRecv: function (req, raw) {\n        Strophe.info(\"_dataRecv called\");\n        var elem = this._proto._reqToData(req);\n        if (elem === null) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                this.xmlInput(elem.childNodes[0]);\n            } else {\n                this.xmlInput(elem);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(elem));\n            }\n        }\n\n        // remove handlers scheduled for deletion\n        var i, hand;\n        while (this.removeHandlers.length > 0) {\n            hand = this.removeHandlers.pop();\n            i = this.handlers.indexOf(hand);\n            if (i >= 0) {\n                this.handlers.splice(i, 1);\n            }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n            this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n            this._doDisconnect();\n            return;\n        }\n\n        var type = elem.getAttribute(\"type\");\n        var cond, conflict;\n        if (type !== null && type === \"terminate\") {\n            // Don't process stanzas that come in after disconnect\n            if (this.disconnecting) {\n                return;\n            }\n\n            // an error occurred\n            cond = elem.getAttribute(\"condition\");\n            conflict = elem.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    Strophe.ErrorCondition.UNKOWN_REASON\n                );\n            }\n            this._doDisconnect(cond);\n            return;\n        }\n\n        // send each incoming stanza through the handler chain\n        var that = this;\n        Strophe.forEachChild(elem, null, function (child) {\n            var i, newList;\n            // process handlers\n            newList = that.handlers;\n            that.handlers = [];\n            for (i = 0; i < newList.length; i++) {\n                var hand = newList[i];\n                // encapsulate 'handler.run' not to lose the whole handler list if\n                // one of the handlers throws an exception\n                try {\n                    if (hand.isMatch(child) &&\n                        (that.authenticated || !hand.user)) {\n                        if (hand.run(child)) {\n                            that.handlers.push(hand);\n                        }\n                    } else {\n                        that.handlers.push(hand);\n                    }\n                } catch(e) {\n                    // if the handler throws an exception, we consider it as false\n                    Strophe.warn('Removing Strophe handlers due to uncaught exception: '+e.message);\n                }\n            }\n        });\n    },\n\n\n    /** Attribute: mechanisms\n     *  SASL Mechanisms available for Connection.\n     */\n    mechanisms: {},\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the initial connection request\n     *  response from the BOSH server. It is used to set up authentication\n     *  handlers and start the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The current request.\n     *    (Function) _callback - low level (xmpp) connect callback function.\n     *      Useful for plugins with their own xmpp connect callback (when they\n     *      want to do something special).\n     */\n    _connect_cb: function (req, _callback, raw) {\n        Strophe.info(\"_connect_cb was called\");\n        this.connected = true;\n\n        var bodyWrap;\n        try {\n            bodyWrap = this._proto._reqToData(req);\n        } catch (e) {\n            if (e !== \"badformat\") { throw e; }\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.BAD_FORMAT\n            );\n            this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n        }\n        if (!bodyWrap) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                this.xmlInput(bodyWrap.childNodes[0]);\n            } else {\n                this.xmlInput(bodyWrap);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(bodyWrap));\n            }\n        }\n\n        var conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Strophe.Status.CONNFAIL) {\n            return;\n        }\n\n        // Check for the stream:features tag\n        var hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n            hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n        } else {\n            hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 ||\n                            bodyWrap.getElementsByTagName(\"features\").length > 0;\n        }\n        if (!hasFeatures) {\n            this._proto._no_auth_received(_callback);\n            return;\n        }\n\n        var matched = [], i, mech;\n        var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n        if (mechanisms.length > 0) {\n            for (i = 0; i < mechanisms.length; i++) {\n                mech = Strophe.getText(mechanisms[i]);\n                if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n            }\n        }\n        if (matched.length === 0) {\n            if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                // There are no matching SASL mechanisms and also no legacy\n                // auth available.\n                this._proto._no_auth_received(_callback);\n                return;\n            }\n        }\n        if (this.do_authentication !== false) {\n            this.authenticate(matched);\n        }\n    },\n\n    /** Function: sortMechanismsByPriority\n     *\n     *  Sorts an array of objects with prototype SASLMechanism according to\n     *  their priorities.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     */\n    sortMechanismsByPriority: function (mechanisms) {\n        // Sorting mechanisms according to priority.\n        var i, j, higher, swap;\n        for (i = 0; i < mechanisms.length - 1; ++i) {\n            higher = i;\n            for (j = i + 1; j < mechanisms.length; ++j) {\n                if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                    higher = j;\n                }\n            }\n            if (higher !== i) {\n                swap = mechanisms[i];\n                mechanisms[i] = mechanisms[higher];\n                mechanisms[higher] = swap;\n            }\n        }\n        return mechanisms;\n    },\n\n    /** PrivateFunction: _attemptSASLAuth\n     *\n     *  Iterate through an array of SASL mechanisms and attempt authentication\n     *  with the highest priority (enabled) mechanism.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     *  Returns:\n     *    (Boolean) mechanism_found - true or false, depending on whether a\n     *          valid SASL mechanism was found with which authentication could be\n     *          started.\n     */\n    _attemptSASLAuth: function (mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        var i = 0, mechanism_found = false;\n        for (i = 0; i < mechanisms.length; ++i) {\n            if (!mechanisms[i].prototype.test(this)) {\n                continue;\n            }\n            this._sasl_success_handler = this._addSysHandler(\n                this._sasl_success_cb.bind(this), null,\n                \"success\", null, null);\n            this._sasl_failure_handler = this._addSysHandler(\n                this._sasl_failure_cb.bind(this), null,\n                \"failure\", null, null);\n            this._sasl_challenge_handler = this._addSysHandler(\n                this._sasl_challenge_cb.bind(this), null,\n                \"challenge\", null, null);\n\n            this._sasl_mechanism = new mechanisms[i]();\n            this._sasl_mechanism.onStart(this);\n\n            var request_auth_exchange = $build(\"auth\", {\n                xmlns: Strophe.NS.SASL,\n                mechanism: this._sasl_mechanism.name\n            });\n            if (this._sasl_mechanism.isClientFirst) {\n                var response = this._sasl_mechanism.onChallenge(this, null);\n                request_auth_exchange.t(btoa(response));\n            }\n            this.send(request_auth_exchange.tree());\n            mechanism_found = true;\n            break;\n        }\n        return mechanism_found;\n    },\n\n    /** PrivateFunction: _attemptLegacyAuth\n     *\n     *  Attempt legacy (i.e. non-SASL) authentication.\n     *\n     */\n    _attemptLegacyAuth: function () {\n        if (Strophe.getNodeFromJid(this.jid) === null) {\n            // we don't have a node, which is required for non-anonymous\n            // client connections\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.MISSING_JID_NODE\n            );\n            this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n        } else {\n            // Fall back to legacy authentication\n            this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n            this._addSysHandler(\n                this._auth1_cb.bind(this),\n                null, null, null, \"_auth_1\"\n            );\n            this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                }).c(\"query\", {xmlns: Strophe.NS.AUTH})\n                .c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid))\n                .tree());\n        }\n    },\n\n    /** Function: authenticate\n     * Set up authentication\n     *\n     *  Continues the initial connection request by setting up authentication\n     *  handlers and starting the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Array) matched - Array of SASL mechanisms supported.\n     *\n     */\n    authenticate: function (matched) {\n        if (!this._attemptSASLAuth(matched)) {\n            this._attemptLegacyAuth();\n        }\n    },\n\n    /** PrivateFunction: _sasl_challenge_cb\n     *  _Private_ handler for the SASL challenge\n     *\n     */\n    _sasl_challenge_cb: function(elem) {\n      var challenge = atob(Strophe.getText(elem));\n      var response = this._sasl_mechanism.onChallenge(this, challenge);\n      var stanza = $build('response', {\n          'xmlns': Strophe.NS.SASL\n      });\n      if (response !== \"\") {\n        stanza.t(btoa(response));\n      }\n      this.send(stanza.tree());\n      return true;\n    },\n\n    /** PrivateFunction: _auth1_cb\n     *  _Private_ handler for legacy authentication.\n     *\n     *  This handler is called in response to the initial <iq type='get'/>\n     *  for legacy authentication.  It builds an authentication <iq/> and\n     *  sends it, creating a handler (calling back to _auth2_cb()) to\n     *  handle the result\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _auth1_cb: function (elem) {\n        // build plaintext auth iq\n        var iq = $iq({type: \"set\", id: \"_auth_2\"})\n            .c('query', {xmlns: Strophe.NS.AUTH})\n            .c('username', {}).t(Strophe.getNodeFromJid(this.jid))\n            .up()\n            .c('password').t(this.pass);\n\n        if (!Strophe.getResourceFromJid(this.jid)) {\n            // since the user has not supplied a resource, we pick\n            // a default one here.  unlike other auth methods, the server\n            // cannot do this for us.\n            this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null,\n                            null, null, \"_auth_2\");\n        this.send(iq.tree());\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _sasl_success_cb\n     *  _Private_ handler for succesful SASL authentication.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_success_cb: function (elem) {\n        if (this._sasl_data[\"server-signature\"]) {\n            var serverSignature;\n            var success = atob(Strophe.getText(elem));\n            var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n            var matches = success.match(attribMatch);\n            if (matches[1] === \"v\") {\n                serverSignature = matches[2];\n            }\n\n            if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n              // remove old handlers\n              this.deleteHandler(this._sasl_failure_handler);\n              this._sasl_failure_handler = null;\n              if (this._sasl_challenge_handler) {\n                this.deleteHandler(this._sasl_challenge_handler);\n                this._sasl_challenge_handler = null;\n              }\n\n              this._sasl_data = {};\n              return this._sasl_failure_cb(null);\n            }\n        }\n        Strophe.info(\"SASL authentication succeeded.\");\n\n        if (this._sasl_mechanism) {\n          this._sasl_mechanism.onSuccess();\n        }\n\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        var streamfeature_handlers = [];\n        var wrapper = function(handlers, elem) {\n            while (handlers.length) {\n                this.deleteHandler(handlers.pop());\n            }\n            this._sasl_auth1_cb.bind(this)(elem);\n            return false;\n        };\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), null, \"stream:features\", null, null));\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), Strophe.NS.STREAM, \"features\", null, null));\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_auth1_cb\n     *  _Private_ handler to start stream binding.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_auth1_cb: function (elem) {\n        // save stream:features for future usage\n        this.features = elem;\n        var i, child;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            child = elem.childNodes[i];\n            if (child.nodeName === 'bind') {\n                this.do_bind = true;\n            }\n\n            if (child.nodeName === 'session') {\n                this.do_session = true;\n            }\n        }\n\n        if (!this.do_bind) {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n            return false;\n        } else {\n            this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n                                null, \"_bind_auth_2\");\n\n            var resource = Strophe.getResourceFromJid(this.jid);\n            if (resource) {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .c('resource', {}).t(resource).tree());\n            } else {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .tree());\n            }\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_bind_cb\n     *  _Private_ handler for binding result and session start.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_bind_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"SASL binding failed.\");\n            var conflict = elem.getElementsByTagName(\"conflict\"), condition;\n            if (conflict.length > 0) {\n                condition = Strophe.ErrorCondition.CONFLICT;\n            }\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n            return false;\n        }\n\n        // TODO - need to grab errors\n        var bind = elem.getElementsByTagName(\"bind\");\n        var jidNode;\n        if (bind.length > 0) {\n            // Grab jid\n            jidNode = bind[0].getElementsByTagName(\"jid\");\n            if (jidNode.length > 0) {\n                this.jid = Strophe.getText(jidNode[0]);\n\n                if (this.do_session) {\n                    this._addSysHandler(this._sasl_session_cb.bind(this),\n                                        null, null, null, \"_session_auth_2\");\n\n                    this.send($iq({type: \"set\", id: \"_session_auth_2\"})\n                                  .c('session', {xmlns: Strophe.NS.SESSION})\n                                  .tree());\n                } else {\n                    this.authenticated = true;\n                    this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                }\n            }\n        } else {\n            Strophe.info(\"SASL binding failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n    },\n\n    /** PrivateFunction: _sasl_session_cb\n     *  _Private_ handler to finish successful SASL connection.\n     *\n     *  This sets Connection.authenticated to true on success, which\n     *  starts the processing of user handlers.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_session_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"Session creation failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_failure_cb\n     *  _Private_ handler for SASL authentication failure.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _sasl_failure_cb: function (elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n            this.deleteHandler(this._sasl_success_handler);\n            this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        if(this._sasl_mechanism)\n          this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _auth2_cb\n     *  _Private_ handler to finish legacy authentication.\n     *\n     *  This handler is called when the result from the jabber:iq:auth\n     *  <iq/> stanza is returned.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _auth2_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            this.disconnect('authentication failed');\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _addSysTimedHandler\n     *  _Private_ function to add a system level timed handler.\n     *\n     *  This function is used to add a Strophe.TimedHandler for the\n     *  library code.  System timed handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     */\n    _addSysTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** PrivateFunction: _addSysHandler\n     *  _Private_ function to add a system level stanza handler.\n     *\n     *  This function is used to add a Strophe.Handler for the\n     *  library code.  System stanza handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Function) handler - The callback function.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String) type - The stanza type attribute to match.\n     *    (String) id - The stanza id attribute to match.\n     */\n    _addSysHandler: function (handler, ns, name, type, id) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  If the graceful disconnect process does not complete within the\n     *  time allotted, this handler finishes the disconnect anyway.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _onDisconnectTimeout: function () {\n        Strophe.info(\"_onDisconnectTimeout was called\");\n        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler to process events during idle cycle.\n     *\n     *  This handler is called every 100ms to fire timed handlers that\n     *  are ready and keep poll requests going.\n     */\n    _onIdle: function () {\n        var i, thand, since, newList;\n\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n            this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n            thand = this.removeTimeds.pop();\n            i = this.timedHandlers.indexOf(thand);\n            if (i >= 0) {\n                this.timedHandlers.splice(i, 1);\n            }\n        }\n\n        // call ready timed handlers\n        var now = new Date().getTime();\n        newList = [];\n        for (i = 0; i < this.timedHandlers.length; i++) {\n            thand = this.timedHandlers[i];\n            if (this.authenticated || !thand.user) {\n                since = thand.lastCalled + thand.period;\n                if (since - now <= 0) {\n                    if (thand.run()) {\n                        newList.push(thand);\n                    }\n                } else {\n                    newList.push(thand);\n                }\n            }\n        }\n        this.timedHandlers = newList;\n\n        clearTimeout(this._idleTimeout);\n\n        this._proto._onIdle();\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n            // XXX: setTimeout should be called only with function expressions (23974bc1)\n            this._idleTimeout = setTimeout(function() {\n                this._onIdle();\n            }.bind(this), 100);\n        }\n    }\n};\n\n/** Class: Strophe.SASLMechanism\n *\n *  encapsulates SASL authentication mechanisms.\n *\n *  User code may override the priority for each mechanism or disable it completely.\n *  See <priority> for information about changing priority and <test> for informatian on\n *  how to disable a mechanism.\n *\n *  By default, all mechanisms are enabled and the priorities are\n *\n *      OAUTHBEARER - 60\n *      SCRAM-SHA1 - 50\n *      DIGEST-MD5 - 40\n *      PLAIN - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  See: Strophe.Connection.addSupportedSASLMechanisms\n */\n\n/**\n * PrivateConstructor: Strophe.SASLMechanism\n * SASL auth mechanism abstraction.\n *\n *  Parameters:\n *    (String) name - SASL Mechanism name.\n *    (Boolean) isClientFirst - If client should send response first without challenge.\n *    (Number) priority - Priority.\n *\n *  Returns:\n *    A new Strophe.SASLMechanism object.\n */\nStrophe.SASLMechanism = function(name, isClientFirst, priority) {\n  /** PrivateVariable: name\n   *  Mechanism name.\n   */\n  this.name = name;\n  /** PrivateVariable: isClientFirst\n   *  If client sends response without initial server challenge.\n   */\n  this.isClientFirst = isClientFirst;\n  /** Variable: priority\n   *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n   *  Users may override this to prioritize mechanisms differently.\n   *\n   *  In the default configuration the priorities are\n   *\n   *  SCRAM-SHA1 - 40\n   *  DIGEST-MD5 - 30\n   *  Plain - 20\n   *\n   *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n   *\n   *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   */\n  this.priority = priority;\n};\n\nStrophe.SASLMechanism.prototype = {\n  /**\n   *  Function: test\n   *  Checks if mechanism able to run.\n   *  To disable a mechanism, make this return false;\n   *\n   *  To disable plain authentication run\n   *  > Strophe.SASLPlain.test = function() {\n   *  >   return false;\n   *  > }\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *\n   *  Returns:\n   *    (Boolean) If mechanism was able to run.\n   */\n  /* jshint unused:false */\n  test: function(connection) {\n    return true;\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onStart\n   *  Called before starting mechanism on some connection.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   */\n  onStart: function(connection) {\n    this._connection = connection;\n  },\n\n  /** PrivateFunction: onChallenge\n   *  Called by protocol implementation on incoming challenge. If client is\n   *  first (isClientFirst === true) challenge will be null on the first call.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *    (String) challenge - current challenge to handle.\n   *\n   *  Returns:\n   *    (String) Mechanism response.\n   */\n  /* jshint unused:false */\n  onChallenge: function(connection, challenge) {\n    throw new Error(\"You should implement challenge handling!\");\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onFailure\n   *  Protocol informs mechanism implementation about SASL failure.\n   */\n  onFailure: function() {\n    this._connection = null;\n  },\n\n  /** PrivateFunction: onSuccess\n   *  Protocol informs mechanism implementation about SASL success.\n   */\n  onSuccess: function() {\n    this._connection = null;\n  }\n};\n\n  /** Constants: SASL mechanisms\n   *  Available authentication mechanisms\n   *\n   *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n   *  Strophe.SASLPlain - SASL PLAIN authentication.\n   *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n   *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n   *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n   *  Strophe.SASLExternal - SASL EXTERNAL authentication\n   *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n   */\n\n// Building SASL callbacks\n\n/** PrivateConstructor: SASLAnonymous\n *  SASL ANONYMOUS authentication.\n */\nStrophe.SASLAnonymous = function() {};\nStrophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\nStrophe.SASLAnonymous.prototype.test = function(connection) {\n    return connection.authcid === null;\n};\n\n\n/** PrivateConstructor: SASLPlain\n *  SASL PLAIN authentication.\n */\nStrophe.SASLPlain = function() {};\nStrophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\nStrophe.SASLPlain.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLPlain.prototype.onChallenge = function(connection) {\n    var auth_str = connection.authzid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.authcid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLSHA1\n *  SASL SCRAM SHA 1 authentication.\n */\nStrophe.SASLSHA1 = function() {};\nStrophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\nStrophe.SASLSHA1.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLSHA1.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);\n  var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n  auth_str += \",r=\";\n  auth_str += cnonce;\n  connection._sasl_data.cnonce = cnonce;\n  connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n\n  auth_str = \"n,,\" + auth_str;\n\n  this.onChallenge = function (connection, challenge) {\n    var nonce, salt, iter, Hi, U, U_old, i, k, pass;\n    var clientKey, serverKey, clientSignature;\n    var responseText = \"c=biws,\";\n    var authMessage = connection._sasl_data[\"client-first-message-bare\"] + \",\" +\n      challenge + \",\";\n    var cnonce = connection._sasl_data.cnonce;\n    var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n    while (challenge.match(attribMatch)) {\n      var matches = challenge.match(attribMatch);\n      challenge = challenge.replace(matches[0], \"\");\n      switch (matches[1]) {\n      case \"r\":\n        nonce = matches[2];\n        break;\n      case \"s\":\n        salt = matches[2];\n        break;\n      case \"i\":\n        iter = matches[2];\n        break;\n      }\n    }\n\n    if (nonce.substr(0, cnonce.length) !== cnonce) {\n      connection._sasl_data = {};\n      return connection._sasl_failure_cb();\n    }\n\n    responseText += \"r=\" + nonce;\n    authMessage += responseText;\n\n    salt = atob(salt);\n    salt += \"\\x00\\x00\\x00\\x01\";\n\n    pass = utils.utf16to8(connection.pass);\n    Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n    for (i = 1; i < iter; i++) {\n      U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n      for (k = 0; k < 5; k++) {\n        Hi[k] ^= U[k];\n      }\n      U_old = U;\n    }\n    Hi = SHA1.binb2str(Hi);\n\n    clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n    serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n    clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n    connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n    for (k = 0; k < 5; k++) {\n      clientKey[k] ^= clientSignature[k];\n    }\n\n    responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n    return responseText;\n  }.bind(this);\n\n  return auth_str;\n};\n\n\n/** PrivateConstructor: SASLMD5\n *  SASL DIGEST MD5 authentication.\n */\nStrophe.SASLMD5 = function() {};\nStrophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\nStrophe.SASLMD5.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\n/** PrivateFunction: _quote\n *  _Private_ utility function to backslash escape and quote strings.\n *\n *  Parameters:\n *    (String) str - The string to be quoted.\n *\n *  Returns:\n *    quoted string\n */\nStrophe.SASLMD5.prototype._quote = function (str) {\n    return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"';\n    //\" end string workaround for emacs\n};\n\nStrophe.SASLMD5.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n  var cnonce = test_cnonce || MD5.hexdigest(\"\" + (Math.random() * 1234567890));\n  var realm = \"\";\n  var host = null;\n  var nonce = \"\";\n  var qop = \"\";\n  var matches;\n\n  while (challenge.match(attribMatch)) {\n    matches = challenge.match(attribMatch);\n    challenge = challenge.replace(matches[0], \"\");\n    matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n    switch (matches[1]) {\n    case \"realm\":\n      realm = matches[2];\n      break;\n    case \"nonce\":\n      nonce = matches[2];\n      break;\n    case \"qop\":\n      qop = matches[2];\n      break;\n    case \"host\":\n      host = matches[2];\n      break;\n    }\n  }\n\n  var digest_uri = connection.servtype + \"/\" + connection.domain;\n  if (host !== null) {\n    digest_uri = digest_uri + \"/\" + host;\n  }\n\n  var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n  var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n  var A2 = 'AUTHENTICATE:' + digest_uri;\n\n  var responseText = \"\";\n  responseText += 'charset=utf-8,';\n  responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n  responseText += 'realm=' + this._quote(realm) + ',';\n  responseText += 'nonce=' + this._quote(nonce) + ',';\n  responseText += 'nc=00000001,';\n  responseText += 'cnonce=' + this._quote(cnonce) + ',';\n  responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n  responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" +\n                                              nonce + \":00000001:\" +\n                                              cnonce + \":auth:\" +\n                                              MD5.hexdigest(A2)) + \",\";\n  responseText += 'qop=auth';\n\n  this.onChallenge = function () {\n      return \"\";\n  };\n  return responseText;\n};\n\n\n/** PrivateConstructor: SASLOAuthBearer\n *  SASL OAuth Bearer authentication.\n */\nStrophe.SASLOAuthBearer = function() {};\nStrophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\nStrophe.SASLOAuthBearer.prototype.test = function(connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLOAuthBearer.prototype.onChallenge = function(connection) {\n    var auth_str = 'n,';\n    if (connection.authcid !== null) {\n      auth_str = auth_str + 'a=' + connection.authzid;\n    }\n    auth_str = auth_str + ',';\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + 'auth=Bearer ';\n    auth_str = auth_str + connection.pass;\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + \"\\u0001\";\n\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLExternal\n *  SASL EXTERNAL authentication.\n *\n *  The EXTERNAL mechanism allows a client to request the server to use\n *  credentials established by means external to the mechanism to\n *  authenticate the client. The external means may be, for instance,\n *  TLS services.\n */\nStrophe.SASLExternal = function() {};\nStrophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\nStrophe.SASLExternal.prototype.onChallenge = function(connection) {\n    /** According to XEP-178, an authzid SHOULD NOT be presented when the\n     * authcid contained or implied in the client certificate is the JID (i.e.\n     * authzid) with which the user wants to log in as.\n     *\n     * To NOT send the authzid, the user should therefore set the authcid equal\n     * to the JID when instantiating a new Strophe.Connection object.\n     */\n    return connection.authcid === connection.authzid ? '' : connection.authzid;\n};\n\n\n/** PrivateConstructor: SASLXOAuth2\n *  SASL X-OAuth2 authentication.\n */\nStrophe.SASLXOAuth2 = function () { };\nStrophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\nStrophe.SASLXOAuth2.prototype.test = function (connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n    var auth_str = '\\u0000';\n    if (connection.authcid !== null) {\n        auth_str = auth_str + connection.authzid;\n    }\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n\n    return utils.utf16to8(auth_str);\n};\n\n\nreturn {\n    'Strophe':         Strophe,\n    '$build':          $build,\n    '$iq':             $iq,\n    '$msg':            $msg,\n    '$pres':           $pres,\n    'SHA1':            SHA1,\n    'MD5':             MD5,\n    'b64_hmac_sha1':   SHA1.b64_hmac_sha1,\n    'b64_sha1':        SHA1.b64_sha1,\n    'str_hmac_sha1':   SHA1.str_hmac_sha1,\n    'str_sha1':        SHA1.str_sha1\n};\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-bosh',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** PrivateClass: Strophe.Request\n *  _Private_ helper class that provides a cross implementation abstraction\n *  for a BOSH related XMLHttpRequest.\n *\n *  The Strophe.Request class is used internally to encapsulate BOSH request\n *  information.  It is not meant to be used from user's code.\n */\n\n/** PrivateConstructor: Strophe.Request\n *  Create and initialize a new Strophe.Request object.\n *\n *  Parameters:\n *    (XMLElement) elem - The XML data to be sent in the request.\n *    (Function) func - The function that will be called when the\n *      XMLHttpRequest readyState changes.\n *    (Integer) rid - The BOSH rid attribute associated with this request.\n *    (Integer) sends - The number of times this same request has been sent.\n */\nStrophe.Request = function (elem, func, rid, sends) {\n    this.id = ++Strophe._requestId;\n    this.xmlData = elem;\n    this.data = Strophe.serialize(elem);\n    // save original function in case we need to make a new request\n    // from this one.\n    this.origFunc = func;\n    this.func = func;\n    this.rid = rid;\n    this.date = NaN;\n    this.sends = sends || 0;\n    this.abort = false;\n    this.dead = null;\n\n    this.age = function () {\n        if (!this.date) { return 0; }\n        var now = new Date();\n        return (now - this.date) / 1000;\n    };\n    this.timeDead = function () {\n        if (!this.dead) { return 0; }\n        var now = new Date();\n        return (now - this.dead) / 1000;\n    };\n    this.xhr = this._newXHR();\n};\n\nStrophe.Request.prototype = {\n    /** PrivateFunction: getResponse\n     *  Get a response from the underlying XMLHttpRequest.\n     *\n     *  This function attempts to get a response from the request and checks\n     *  for errors.\n     *\n     *  Throws:\n     *    \"parsererror\" - A parser error occured.\n     *    \"badformat\" - The entity has sent XML that cannot be processed.\n     *\n     *  Returns:\n     *    The DOM element tree of the response.\n     */\n    getResponse: function () {\n        var node = null;\n        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n            node = this.xhr.responseXML.documentElement;\n            if (node.tagName === \"parsererror\") {\n                Strophe.error(\"invalid response received\");\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                Strophe.error(\"responseXML: \" +\n                              Strophe.serialize(this.xhr.responseXML));\n                throw \"parsererror\";\n            }\n        } else if (this.xhr.responseText) {\n            // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n            Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n            node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n            if (!node) {\n                throw new Error('Parsing produced null node');\n            } else if (node.querySelector('parsererror')) {\n                Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                throw \"badformat\";\n            }\n        }\n        return node;\n    },\n\n    /** PrivateFunction: _newXHR\n     *  _Private_ helper function to create XMLHttpRequests.\n     *\n     *  This function creates XMLHttpRequests across all implementations.\n     *\n     *  Returns:\n     *    A new XMLHttpRequest.\n     */\n    _newXHR: function () {\n        var xhr = null;\n        if (window.XMLHttpRequest) {\n            xhr = new XMLHttpRequest();\n            if (xhr.overrideMimeType) {\n                xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n            }\n        } else if (window.ActiveXObject) {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n    }\n};\n\n/** Class: Strophe.Bosh\n *  _Private_ helper class that handles BOSH Connections\n *\n *  The Strophe.Bosh class is used internally by Strophe.Connection\n *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n */\n\n/** File: bosh.js\n *  A JavaScript library to enable BOSH in Strophejs.\n *\n *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n *  More information on BOSH can be found in XEP 124.\n */\n\n/** PrivateConstructor: Strophe.Bosh\n *  Create and initialize a Strophe.Bosh object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n *\n *  Returns:\n *    A new Strophe.Bosh object.\n */\nStrophe.Bosh = function(connection) {\n    this._conn = connection;\n    /* request id for body tags */\n    this.rid = Math.floor(Math.random() * 4294967295);\n    /* The current session ID. */\n    this.sid = null;\n\n    // default BOSH values\n    this.hold = 1;\n    this.wait = 60;\n    this.window = 5;\n    this.errors = 0;\n    this.inactivity = null;\n\n    this.lastResponseHeaders = null;\n\n    this._requests = [];\n};\n\nStrophe.Bosh.prototype = {\n    /** Variable: strip\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n     *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n     *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n     *\n     *  > Strophe.Bosh.prototype.strip = \"body\";\n     *\n     *  This will enable stripping of the body tag in both\n     *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n     */\n    strip: null,\n\n    /** PrivateFunction: _buildBody\n     *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <body/> element.\n     */\n    _buildBody: function () {\n        var bodyWrap = $build('body', {\n            rid: this.rid++,\n            xmlns: Strophe.NS.HTTPBIND\n        });\n        if (this.sid !== null) {\n            bodyWrap.attrs({sid: this.sid});\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n            this._cacheSession();\n        }\n        return bodyWrap;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection\n     */\n    _reset: function () {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function that initializes the BOSH connection.\n     *\n     *  Creates and sends the Request that initializes the BOSH connection.\n     */\n    _connect: function (wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        // build the body tag\n        var body = this._buildBody().attrs({\n            to: this._conn.domain,\n            \"xml:lang\": \"en\",\n            wait: this.wait,\n            hold: this.hold,\n            content: \"text/xml; charset=utf-8\",\n            ver: \"1.6\",\n            \"xmpp:version\": \"1.0\",\n            \"xmlns:xmpp\": Strophe.NS.BOSH\n        });\n\n        if(route){\n            body.attrs({\n                route: route\n            });\n        }\n\n        var _connect_cb = this._conn._connect_cb;\n\n        this._requests.push(\n            new Strophe.Request(body.tree(),\n                                this._onRequestStateChange.bind(\n                                    this, _connect_cb.bind(this._conn)),\n                                body.tree().getAttribute(\"rid\")));\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n\n        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n    },\n\n    /** PrivateFunction: _restore\n     *  Attempt to restore a cached BOSH session\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *      This parameter is optional but recommended, specifically in cases\n     *      where prebinded BOSH sessions are used where it's important to know\n     *      that the right session is being restored.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _restore: function (jid, callback, wait, hold, wind) {\n        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n        if (typeof session !== \"undefined\" &&\n                   session !== null &&\n                   session.rid &&\n                   session.sid &&\n                   session.jid &&\n                   (    typeof jid === \"undefined\" ||\n                        jid === null ||\n                        Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) ||\n                        // If authcid is null, then it's an anonymous login, so\n                        // we compare only the domains:\n                        ((Strophe.getNodeFromJid(jid) === null) && (Strophe.getDomainFromJid(session.jid) === jid))\n                    )\n        ) {\n            this._conn.restored = true;\n            this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n            throw { name: \"StropheSessionError\", message: \"_restore: no restoreable session.\" };\n        }\n    },\n\n    /** PrivateFunction: _cacheSession\n     *  _Private_ handler for the beforeunload event.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _cacheSession: function () {\n        if (this._conn.authenticated) {\n            if (this._conn.jid && this.rid && this.sid) {\n                window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                    'jid': this._conn.jid,\n                    'rid': this.rid,\n                    'sid': this.sid\n                }));\n            }\n        } else {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function (bodyWrap) {\n        var typ = bodyWrap.getAttribute(\"type\");\n        var cond, conflict;\n        if (typ !== null && typ === \"terminate\") {\n            // an error occurred\n            cond = bodyWrap.getAttribute(\"condition\");\n            Strophe.error(\"BOSH-Connection failed: \" + cond);\n            conflict = bodyWrap.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n            }\n            this._conn._doDisconnect(cond);\n            return Strophe.Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n            this.sid = bodyWrap.getAttribute(\"sid\");\n        }\n        var wind = bodyWrap.getAttribute('requests');\n        if (wind) { this.window = parseInt(wind, 10); }\n        var hold = bodyWrap.getAttribute('hold');\n        if (hold) { this.hold = parseInt(hold, 10); }\n        var wait = bodyWrap.getAttribute('wait');\n        if (wait) { this.wait = parseInt(wait, 10); }\n        var inactivity = bodyWrap.getAttribute('inactivity');\n        if (inactivity) { this.inactivity = parseInt(inactivity, 10); }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ part of Connection.disconnect for Bosh\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        this._sendTerminate(pres);\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Resets the SID and RID.\n     */\n    _doDisconnect: function () {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the Request queue is empty.\n     *\n     *  Returns:\n     *    True, if there are no Requests queued, False otherwise.\n     */\n    _emptyQueue: function () {\n        return this._requests.length === 0;\n    },\n\n    /** PrivateFunction: _callProtocolErrorHandlers\n     *  _Private_ function to call error handlers registered for HTTP errors.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _callProtocolErrorHandlers: function (req) {\n        var reqStatus = this._getRequestStatus(req),\n            err_callback;\n        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n            err_callback.call(this, reqStatus);\n        }\n    },\n\n    /** PrivateFunction: _hitError\n     *  _Private_ function to handle the error count.\n     *\n     *  Requests are resent automatically until their error count reaches\n     *  5.  Each time an error is encountered, this function is called to\n     *  increment the count and disconnect if the count is too high.\n     *\n     *  Parameters:\n     *    (Integer) reqStatus - The request status.\n     */\n    _hitError: function (reqStatus) {\n        this.errors++;\n        Strophe.warn(\"request errored, status: \" + reqStatus +\n                     \", number of errors: \" + this.errors);\n        if (this.errors > 4) {\n            this._conn._onDisconnectTimeout();\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received and sends a blank poll request.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.warn(\"Server did not yet offer a supported authentication \"+\n                     \"mechanism. Sending a blank poll request.\");\n        if (callback) {\n            callback = callback.bind(this._conn);\n        } else {\n            callback = this._conn._connect_cb.bind(this._conn);\n        }\n        var body = this._buildBody();\n        this._requests.push(\n            new Strophe.Request(\n                body.tree(),\n                this._onRequestStateChange.bind(this, callback),\n                body.tree().getAttribute(\"rid\")\n            )\n        );\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  Cancels all remaining Requests and clears the queue.\n     */\n    _onDisconnectTimeout: function () {\n        this._abortAllRequests();\n    },\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function _abortAllRequests() {\n        var req;\n        while (this._requests.length > 0) {\n            req = this._requests.pop();\n            req.abort = true;\n            req.xhr.abort();\n            // jslint complains, but this is fine. setting to empty func\n            // is necessary for IE6\n            req.xhr.onreadystatechange = function () {}; // jshint ignore:line\n        }\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler called by Strophe.Connection._onIdle\n     *\n     *  Sends all queued Requests or polls with empty Request if there are none.\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 &&\n            data.length === 0 && !this._conn.disconnecting) {\n            Strophe.info(\"no requests during idle cycle, sending \" +\n                         \"blank request\");\n            data.push(null);\n        }\n\n        if (this._conn.paused) {\n            return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n            var body = this._buildBody();\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    if (data[i] === \"restart\") {\n                        body.attrs({\n                            to: this._conn.domain,\n                            \"xml:lang\": \"en\",\n                            \"xmpp:restart\": \"true\",\n                            \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                    } else {\n                        body.cnode(data[i]).up();\n                    }\n                }\n            }\n            delete this._conn._data;\n            this._conn._data = [];\n            this._requests.push(\n                new Strophe.Request(body.tree(),\n                                    this._onRequestStateChange.bind(\n                                        this, this._conn._dataRecv.bind(this._conn)),\n                                    body.tree().getAttribute(\"rid\")));\n            this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n            var time_elapsed = this._requests[0].age();\n            if (this._requests[0].dead !== null) {\n                if (this._requests[0].timeDead() >\n                    Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._throttledRequestHandler();\n                }\n            }\n\n            if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                Strophe.warn(\"Request \" +\n                             this._requests[0].id +\n                             \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) +\n                             \" seconds since last activity\");\n                this._throttledRequestHandler();\n            }\n        }\n    },\n\n    /** PrivateFunction: _getRequestStatus\n     *\n     *  Returns the HTTP status code from a Strophe.Request\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The Strophe.Request instance.\n     *    (Integer) def - The default value that should be returned if no\n     *          status value was found.\n     */\n    _getRequestStatus: function (req, def) {\n        var reqStatus;\n        if (req.xhr.readyState === 4) {\n            try {\n                reqStatus = req.xhr.status;\n            } catch (e) {\n                // ignore errors from undefined status attribute. Works\n                // around a browser bug\n                Strophe.error(\n                    \"Caught an error while retrieving a request's status, \" +\n                    \"reqStatus: \" + reqStatus);\n            }\n        }\n        if (typeof(reqStatus) === \"undefined\") {\n            reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n    },\n\n    /** PrivateFunction: _onRequestStateChange\n     *  _Private_ handler for Strophe.Request state changes.\n     *\n     *  This function is called when the XMLHttpRequest readyState changes.\n     *  It contains a lot of error handling logic for the many ways that\n     *  requests can fail, and calls the request callback when requests\n     *  succeed.\n     *\n     *  Parameters:\n     *    (Function) func - The handler for the request.\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _onRequestStateChange: function (func, req) {\n        Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\n                      \" state changed to \"+req.xhr.readyState);\n        if (req.abort) {\n            req.abort = false;\n            return;\n        }\n        if (req.xhr.readyState !== 4) {\n            // The request is not yet complete\n            return;\n        }\n        var reqStatus = this._getRequestStatus(req);\n        this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n        if (this.disconnecting && reqStatus >= 400) {\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            return;\n        }\n\n        var valid_request = reqStatus > 0 && reqStatus < 500;\n        var too_many_retries = req.sends > this._conn.maxRetries;\n        if (valid_request || too_many_retries) {\n            // remove from internal queue\n            this._removeRequest(req);\n            Strophe.debug(\"request id \"+req.id+\" should now be removed\");\n        }\n\n        if (reqStatus === 200) {\n            // request succeeded\n            var reqIs0 = (this._requests[0] === req);\n            var reqIs1 = (this._requests[1] === req);\n            // if request 1 finished, or request 0 finished and request\n            // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n            // restart the other - both will be in the first spot, as the\n            // completed request has been removed from the queue already\n            if (reqIs1 ||\n                (reqIs0 && this._requests.length > 0 &&\n                    this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait))) {\n                this._restartRequest(0);\n            }\n            this._conn.nextValidRid(Number(req.rid) + 1);\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" got 200\");\n            func(req); // call handler\n            this.errors = 0;\n        } else if (reqStatus === 0 ||\n                   (reqStatus >= 400 && reqStatus < 600) ||\n                   reqStatus >= 12000) {\n            // request failed\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            if (reqStatus >= 400 && reqStatus < 500) {\n                this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n                this._conn._doDisconnect();\n            }\n        } else {\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n        }\n\n        if (!valid_request && !too_many_retries) {\n            this._throttledRequestHandler();\n        } else if (too_many_retries && !this._conn.connected) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n        }\n    },\n\n    /** PrivateFunction: _processRequest\n     *  _Private_ function to process a request in the queue.\n     *\n     *  This function takes requests off the queue and sends them and\n     *  restarts dead requests.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _processRequest: function (i) {\n        var self = this;\n        var req = this._requests[i];\n        var reqStatus = this._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n            this._conn._onDisconnectTimeout();\n            return;\n        }\n\n        var time_elapsed = req.age();\n        var primaryTimeout = (!isNaN(time_elapsed) &&\n                              time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait));\n        var secondaryTimeout = (req.dead !== null &&\n                                req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait));\n        var requestCompletedWithServerError = (req.xhr.readyState === 4 &&\n                                               (reqStatus < 1 || reqStatus >= 500));\n        if (primaryTimeout || secondaryTimeout ||\n            requestCompletedWithServerError) {\n            if (secondaryTimeout) {\n                Strophe.error(\"Request \" + this._requests[i].id +\n                              \" timed out (secondary), restarting\");\n            }\n            req.abort = true;\n            req.xhr.abort();\n            // setting to null fails on IE6, so set to empty function\n            req.xhr.onreadystatechange = function () {};\n            this._requests[i] = new Strophe.Request(req.xmlData,\n                                                    req.origFunc,\n                                                    req.rid,\n                                                    req.sends);\n            req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" posting\");\n\n            try {\n                var contentType = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n                if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                    // IE9 doesn't have setRequestHeader\n                    req.xhr.setRequestHeader(\"Content-Type\", contentType);\n                }\n                if (this._conn.options.withCredentials) {\n                    req.xhr.withCredentials = true;\n                }\n            } catch (e2) {\n                Strophe.error(\"XHR open failed: \" + e2.toString());\n                if (!this._conn.connected) {\n                    this._conn._changeConnectStatus(\n                            Strophe.Status.CONNFAIL, \"bad-service\");\n                }\n                this._conn.disconnect();\n                return;\n            }\n\n            // Fires the XHR request -- may be invoked immediately\n            // or on a gradually expanding retry window for reconnects\n            var sendFunc = function () {\n                req.date = new Date();\n                if (self._conn.options.customHeaders){\n                    var headers = self._conn.options.customHeaders;\n                    for (var header in headers) {\n                        if (headers.hasOwnProperty(header)) {\n                            req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                    }\n                }\n                req.xhr.send(req.data);\n            };\n\n            // Implement progressive backoff for reconnects --\n            // First retry (send === 1) should also be instantaneous\n            if (req.sends > 1) {\n                // Using a cube of the retry number creates a nicely\n                // expanding retry window\n                var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),\n                                       Math.pow(req.sends, 3)) * 1000;\n                setTimeout(function() {\n                    // XXX: setTimeout should be called only with function expressions (23974bc1)\n                    sendFunc();\n                }, backoff);\n            } else {\n                sendFunc();\n            }\n\n            req.sends++;\n\n            if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                    this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                } else {\n                    this._conn.xmlOutput(req.xmlData);\n                }\n            }\n            if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                this._conn.rawOutput(req.data);\n            }\n        } else {\n            Strophe.debug(\"_processRequest: \" +\n                          (i === 0 ? \"first\" : \"second\") +\n                          \" request has readyState of \" +\n                          req.xhr.readyState);\n        }\n    },\n\n    /** PrivateFunction: _removeRequest\n     *  _Private_ function to remove a request from the queue.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request to remove.\n     */\n    _removeRequest: function (req) {\n        Strophe.debug(\"removing request\");\n        var i;\n        for (i = this._requests.length - 1; i >= 0; i--) {\n            if (req === this._requests[i]) {\n                this._requests.splice(i, 1);\n            }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {};\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _restartRequest\n     *  _Private_ function to restart a request that is presumed dead.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _restartRequest: function (i) {\n        var req = this._requests[i];\n        if (req.dead === null) {\n            req.dead = new Date();\n        }\n\n        this._processRequest(i);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * Tries to extract a stanza out of a Request Object.\n     * When this fails the current connection will be disconnected.\n     *\n     *  Parameters:\n     *    (Object) req - The Request.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (req) {\n        try {\n            return req.getResponse();\n        } catch (e) {\n            if (e !== \"parsererror\") { throw e; }\n            this._conn.disconnect(\"strophe-parsererror\");\n        }\n    },\n\n    /** PrivateFunction: _sendTerminate\n     *  _Private_ function to send initial disconnect sequence.\n     *\n     *  This is the first step in a graceful disconnect.  It sends\n     *  the BOSH server a terminate body and includes an unavailable\n     *  presence if authentication has completed.\n     */\n    _sendTerminate: function (pres) {\n        Strophe.info(\"_sendTerminate was called\");\n        var body = this._buildBody().attrs({type: \"terminate\"});\n        if (pres) {\n            body.cnode(pres.tree());\n        }\n        var req = new Strophe.Request(\n            body.tree(),\n            this._onRequestStateChange.bind(\n            this, this._conn._dataRecv.bind(this._conn)),\n            body.tree().getAttribute(\"rid\")\n        );\n        this._requests.push(req);\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for BOSH\n     *\n     * Just triggers the RequestHandler to send the messages that are in the queue\n     */\n    _send: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._conn._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this._conn), 100);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n    },\n\n    /** PrivateFunction: _throttledRequestHandler\n     *  _Private_ function to throttle requests to the connection window.\n     *\n     *  This function makes sure we don't send requests so fast that the\n     *  request ids overflow the connection window in the case that one\n     *  request died.\n     */\n    _throttledRequestHandler: function () {\n        if (!this._requests) {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          \"undefined requests\");\n        } else {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          this._requests.length + \" requests\");\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n            return;\n        }\n\n        if (this._requests.length > 0) {\n            this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 &&\n            Math.abs(this._requests[0].rid -\n                     this._requests[1].rid) < this.window) {\n            this._processRequest(1);\n        }\n    }\n};\nreturn Strophe;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-websocket',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** Class: Strophe.WebSocket\n *  _Private_ helper class that handles WebSocket Connections\n *\n *  The Strophe.WebSocket class is used internally by Strophe.Connection\n *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n */\n\n/** File: websocket.js\n *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n *\n *  This file implements XMPP over WebSockets for Strophejs.\n *  If a Connection is established with a Websocket url (ws://...)\n *  Strophe will use WebSockets.\n *  For more information on XMPP-over-WebSocket see RFC 7395:\n *  http://tools.ietf.org/html/rfc7395\n *\n *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n */\n\n/** PrivateConstructor: Strophe.Websocket\n *  Create and initialize a Strophe.WebSocket object.\n *  Currently only sets the connection Object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n *\n *  Returns:\n *    A new Strophe.WebSocket object.\n */\nStrophe.Websocket = function(connection) {\n    this._conn = connection;\n    this.strip = \"wrapper\";\n\n    var service = connection.service;\n    if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n        // If the service is not an absolute URL, assume it is a path and put the absolute\n        // URL together from options, current URL and the path.\n        var new_service = \"\";\n\n        if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n            new_service += \"ws\";\n        } else {\n            new_service += \"wss\";\n        }\n\n        new_service += \"://\" + window.location.host;\n\n        if (service.indexOf(\"/\") !== 0) {\n            new_service += window.location.pathname + service;\n        } else {\n            new_service += service;\n        }\n\n        connection.service = new_service;\n    }\n};\n\nStrophe.Websocket.prototype = {\n    /** PrivateFunction: _buildStream\n     *  _Private_ helper function to generate the <stream> start tag for WebSockets\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <stream> element.\n     */\n    _buildStream: function () {\n        return $build(\"open\", {\n            \"xmlns\": Strophe.NS.FRAMING,\n            \"to\": this._conn.domain,\n            \"version\": '1.0'\n        });\n    },\n\n    /** PrivateFunction: _check_streamerror\n     * _Private_ checks a message for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     *    connectstatus - The ConnectStatus that will be set on error.\n     *  Returns:\n     *     true if there was a streamerror, false otherwise.\n     */\n    _check_streamerror: function (bodyWrap, connectstatus) {\n        var errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n            errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n        } else {\n            errors = bodyWrap.getElementsByTagName(\"stream:error\");\n        }\n        if (errors.length === 0) {\n            return false;\n        }\n        var error = errors[0];\n\n        var condition = \"\";\n        var text = \"\";\n\n        var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n        for (var i = 0; i < error.childNodes.length; i++) {\n            var e = error.childNodes[i];\n            if (e.getAttribute(\"xmlns\") !== ns) {\n                break;\n            } if (e.nodeName === \"text\") {\n                text = e.textContent;\n            } else {\n                condition = e.nodeName;\n            }\n        }\n\n        var errorString = \"WebSocket stream error: \";\n\n        if (condition) {\n            errorString += condition;\n        } else {\n            errorString += \"unknown\";\n        }\n\n        if (text) {\n            errorString += \" - \" + text;\n        }\n\n        Strophe.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection.\n     *  Is not needed by WebSockets.\n     */\n    _reset: function () {\n        return;\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function called by Strophe.Connection.connect\n     *\n     *  Creates a WebSocket for a connection and assigns Callbacks to it.\n     *  Does nothing if there already is a WebSocket.\n     */\n    _connect: function () {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        this._closeSocket();\n\n        // Create the new WobSocket\n        this.socket = new WebSocket(this._conn.service, \"xmpp\");\n        this.socket.onopen = this._onOpen.bind(this);\n        this.socket.onerror = this._onError.bind(this);\n        this.socket.onclose = this._onClose.bind(this);\n        this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ function called by Strophe.Connection._connect_cb\n     *\n     * checks for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function(bodyWrap) {\n        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);\n        if (error) {\n            return Strophe.Status.CONNFAIL;\n        }\n    },\n\n    /** PrivateFunction: _handleStreamStart\n     * _Private_ function that checks the opening <open /> tag for errors.\n     *\n     * Disconnects if there is an error and returns false, true otherwise.\n     *\n     *  Parameters:\n     *    (Node) message - Stanza containing the <open /> tag.\n     */\n    _handleStreamStart: function(message) {\n        var error = false;\n\n        // Check for errors in the <open /> tag\n        var ns = message.getAttribute(\"xmlns\");\n        if (typeof ns !== \"string\") {\n            error = \"Missing xmlns in <open />\";\n        } else if (ns !== Strophe.NS.FRAMING) {\n            error = \"Wrong xmlns in <open />: \" + ns;\n        }\n\n        var ver = message.getAttribute(\"version\");\n        if (typeof ver !== \"string\") {\n            error = \"Missing version in <open />\";\n        } else if (ver !== \"1.0\") {\n            error = \"Wrong version in <open />: \" + ver;\n        }\n\n        if (error) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n            this._conn._doDisconnect();\n            return false;\n        }\n\n        return true;\n    },\n\n    /** PrivateFunction: _connect_cb_wrapper\n     * _Private_ function that handles the first connection messages.\n     *\n     * On receiving an opening stream tag this callback replaces itself with the real\n     * message handler. On receiving a stream error the connection is terminated.\n     */\n    _connect_cb_wrapper: function(message) {\n        if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n            // Strip the XML Declaration, if there is one\n            var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n            if (data === '') return;\n\n            var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n            this._conn.xmlInput(streamStart);\n            this._conn.rawInput(message.data);\n\n            //_handleStreamSteart will check for XML errors and disconnect on error\n            if (this._handleStreamStart(streamStart)) {\n                //_connect_cb will check for stream:error and disconnect on error\n                this._connect_cb(streamStart);\n            }\n        } else if (message.data.indexOf(\"<close \") === 0) { // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n            // Parse the raw string to an XML element\n            var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            // Report this input to the raw and xml handlers\n            this._conn.xmlInput(parsedMessage);\n            this._conn.rawInput(message.data);\n            var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n            if (see_uri) {\n                var service = this._conn.service;\n                // Valid scenarios: WSS->WSS, WS->ANY\n                var isSecureRedirect = (service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0) || (service.indexOf(\"ws:\") >= 0);\n                if(isSecureRedirect) {\n                    this._conn._changeConnectStatus(\n                        Strophe.Status.REDIRECT,\n                        \"Received see-other-uri, resetting connection\"\n                    );\n                    this._conn.reset();\n                    this._conn.service = see_uri;\n                    this._connect();\n                }\n            } else {\n                this._conn._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    \"Received closing stream\"\n                );\n                this._conn._doDisconnect();\n            }\n        } else {\n            var string = this._streamWrap(message.data);\n            var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n            this.socket.onmessage = this._onMessage.bind(this);\n            this._conn._connect_cb(elem, null, message.data);\n        }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ function called by Strophe.Connection.disconnect\n     *\n     *  Disconnects and sends a last stanza if one is given\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n            if (pres) {\n                this._conn.send(pres);\n            }\n            var close = $build(\"close\", { \"xmlns\": Strophe.NS.FRAMING });\n            this._conn.xmlOutput(close.tree());\n            var closeString = Strophe.serialize(close);\n            this._conn.rawOutput(closeString);\n            try {\n                this.socket.send(closeString);\n            } catch (e) {\n                Strophe.info(\"Couldn't send <close /> tag.\");\n            }\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Just closes the Socket for WebSockets\n     */\n    _doDisconnect: function () {\n        Strophe.info(\"WebSockets _doDisconnect was called\");\n        this._closeSocket();\n    },\n\n    /** PrivateFunction _streamWrap\n     *  _Private_ helper function to wrap a stanza in a <stream> tag.\n     *  This is used so Strophe can process stanzas from WebSockets like BOSH\n     */\n    _streamWrap: function (stanza) {\n        return \"<wrapper>\" + stanza + '</wrapper>';\n    },\n\n\n    /** PrivateFunction: _closeSocket\n     *  _Private_ function to close the WebSocket.\n     *\n     *  Closes the socket if it is still open and deletes it\n     */\n    _closeSocket: function () {\n        if (this.socket) { try {\n            this.socket.onerror = null;\n            this.socket.close();\n        } catch (e) {} }\n        this.socket = null;\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the message queue is empty.\n     *\n     *  Returns:\n     *    True, because WebSocket messages are send immediately after queueing.\n     */\n    _emptyQueue: function () {\n        return true;\n    },\n\n    /** PrivateFunction: _onClose\n     * _Private_ function to handle websockets closing.\n     *\n     * Nothing to do here for WebSockets\n     */\n    _onClose: function(e) {\n        if(this._conn.connected && !this._conn.disconnecting) {\n            Strophe.error(\"Websocket closed unexpectedly\");\n            this._conn._doDisconnect();\n        } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n            // in case the onError callback was not called (Safari 10 does not\n            // call onerror when the initial connection fails) we need to\n            // dispatch a CONNFAIL status update to be consistent with the\n            // behavior on other browsers.\n            Strophe.error(\"Websocket closed unexcectedly\");\n            this._conn._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                \"The WebSocket connection could not be established or was disconnected.\"\n            );\n            this._conn._doDisconnect();\n        } else {\n            Strophe.info(\"Websocket closed\");\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.error(\"Server did not offer a supported authentication mechanism\");\n        this._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            Strophe.ErrorCondition.NO_AUTH_MECH\n        );\n        if (callback) {\n            callback.call(this._conn);\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  This does nothing for WebSockets\n     */\n    _onDisconnectTimeout: function () {},\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function () {},\n\n    /** PrivateFunction: _onError\n     * _Private_ function to handle websockets errors.\n     *\n     * Parameters:\n     * (Object) error - The websocket error.\n     */\n    _onError: function(error) {\n        Strophe.error(\"Websocket error \" + error);\n        this._conn._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            \"The WebSocket connection could not be established or was disconnected.\"\n        );\n        this._disconnect();\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ function called by Strophe.Connection._onIdle\n     *\n     *  sends all queued stanzas\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    var stanza, rawStanza;\n                    if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                    } else {\n                        stanza = data[i];\n                    }\n                    rawStanza = Strophe.serialize(stanza);\n                    this._conn.xmlOutput(stanza);\n                    this._conn.rawOutput(rawStanza);\n                    this.socket.send(rawStanza);\n                }\n            }\n            this._conn._data = [];\n        }\n    },\n\n    /** PrivateFunction: _onMessage\n     * _Private_ function to handle websockets messages.\n     *\n     * This function parses each of the messages as if they are full documents.\n     * [TODO : We may actually want to use a SAX Push parser].\n     *\n     * Since all XMPP traffic starts with\n     *  <stream:stream version='1.0'\n     *                 xml:lang='en'\n     *                 xmlns='jabber:client'\n     *                 xmlns:stream='http://etherx.jabber.org/streams'\n     *                 id='3697395463'\n     *                 from='SERVER'>\n     *\n     * The first stanza will always fail to be parsed.\n     *\n     * Additionally, the seconds stanza will always be <stream:features> with\n     * the stream NS defined in the previous stanza, so we need to 'force'\n     * the inclusion of the NS in this stanza.\n     *\n     * Parameters:\n     * (string) message - The websocket message.\n     */\n    _onMessage: function(message) {\n        var elem, data;\n        // check for closing stream\n        var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n            this._conn.rawInput(close);\n            this._conn.xmlInput(message);\n            if (!this._conn.disconnecting) {\n                this._conn._doDisconnect();\n            }\n            return;\n        } else if (message.data.search(\"<open \") === 0) {\n            // This handles stream restarts\n            elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            if (!this._handleStreamStart(elem)) {\n                return;\n            }\n        } else {\n            data = this._streamWrap(message.data);\n            elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n        }\n\n        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n            return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (this._conn.disconnecting &&\n                elem.firstChild.nodeName === \"presence\" &&\n                elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n            this._conn.xmlInput(elem);\n            this._conn.rawInput(Strophe.serialize(elem));\n            // if we are already disconnecting we will ignore the unavailable stanza and\n            // wait for the </stream:stream> tag before we close the connection\n            return;\n        }\n        this._conn._dataRecv(elem, message.data);\n    },\n\n    /** PrivateFunction: _onOpen\n     * _Private_ function to handle websockets connection setup.\n     *\n     * The opening stream tag is sent here.\n     */\n    _onOpen: function() {\n        Strophe.info(\"Websocket open\");\n        var start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        var startString = Strophe.serialize(start);\n        this._conn.rawOutput(startString);\n        this.socket.send(startString);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * WebSockets don't use requests, so the passed argument is just returned.\n     *\n     *  Parameters:\n     *    (Object) stanza - The stanza.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (stanza) {\n        return stanza;\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for WebSocket\n     *\n     * Just flushes the messages that are in the queue\n     */\n    _send: function () {\n        this._conn.flush();\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n    }\n};\nreturn Strophe;\n}));\n\n(function(root){\n    if(typeof define === 'function' && define.amd){\n        define('strophe',[\n            \"strophe-core\",\n            \"strophe-bosh\",\n            \"strophe-websocket\"\n        ], function (wrapper) {\n            return wrapper;\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n        require('./bosh');\n        require('./websocket');\n        module.exports = core;\n    }\n})(this);\n\n\nrequire([\"strophe-polyfill\"]);\n/* jshint ignore:start */\n    //The modules for your project will be inlined above\n    //this snippet. Ask almond to synchronously require the\n    //module value for 'main' here and return it as the\n    //value to use for the public API for the built file.\n    return require('strophe');\n}));\n/* jshint ignore:end */\n","/**\n * The events for the conference.\n */\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    const userName = Settings.callStatsUserName;\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.swapUserNameAndAlias\n            ? options.callStatsAliasName : userName,\n        aliasName: options.swapUserNameAndAlias\n            ? userName : options.callStatsAliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} callStatsAliasName - The alias name to use when\n * initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {boolean} swapUserNameAndAlias - Whether to swap the places of\n * username and alias when initiating callstats.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                2000,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribtue is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType) {\n    return {\n        attributes: { 'media_type': mediaType },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        aspectRatio: 16 / 9,\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafariWithVP8()\n            || browser.isEdge()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // NOTE(brian): the new-style ('advanced' instead of 'optional')\n        // doesn't seem to carry through the googXXX constraints\n        // Changing back to 'optional' here (even with video using\n        // the 'advanced' style) allows them to be passed through\n        // but also requires the device id to capture to be set in optional\n        // as sourceId otherwise the constraints are considered malformed.\n        if (!constraints.audio.optional) {\n            constraints.audio.optional = [];\n        }\n\n        constraints.audio.optional.push(\n            { sourceId: options.micDeviceId },\n            { echoCancellation: !disableAEC && !disableAP },\n            { googEchoCancellation: !disableAEC && !disableAP },\n            { googAutoGainControl: !disableAGC && !disableAP },\n            { googNoiseSuppression: !disableNS && !disableAP },\n            { googHighpassFilter: !disableHPF && !disableAP },\n            { googNoiseSuppression2: !disableNS && !disableAP },\n            { googEchoCancellation2: !disableAEC && !disableAP },\n            { googAutoGainControl2: !disableAGC && !disableAP }\n        );\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {boolean} options.disableSuspendVideo - Whether or not video\n     * should become suspended if bandwidth estimation becomes low.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 400 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n\n            // Allows sending of video to be suspended if the bandwidth\n            // estimation is too low.\n            if (!options.disableSuspendVideo) {\n                this.pcConstraints.optional.push(\n                    { googSuspendBelowMinBitrate: true });\n            }\n\n            // There's no reason not to use this for p2p\n            this.p2pPcConstraints.optional.push({\n                googSuspendBelowMinBitrate: true\n            });\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(um, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(um, undefined);\n                    reject(new JitsiTrackError(error, constraints, um));\n                });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        let gumPromise;\n\n        if (browser.supportsMediaStreamConstructor()) {\n            gumPromise = this._getAudioAndVideoStreams(options);\n        } else {\n            // If the MediaStream constructor is not supported, then get tracks\n            // in separate GUM calls in order to keep different tracks separate.\n            gumPromise = this._getAudioAndVideoStreamsSeparately(options);\n        }\n\n        return gumPromise.then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Performs separate getUserMedia calls for audio and video instead of in\n     * one call. Will also request desktop if specified.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreamsSeparately(options) {\n        return new Promise((resolve, reject) => {\n            const deviceGUM = {\n                audio: (...args) =>\n                    this.getUserMediaWithConstraints([ 'audio' ], ...args),\n                video: (...args) =>\n                    this.getUserMediaWithConstraints([ 'video' ], ...args),\n                desktop: (...args) =>\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options), ...args)\n            };\n\n            obtainDevices({\n                options,\n                streams: {},\n                successCallback: resolve,\n                errorCallback: reject,\n                deviceGUM\n            });\n        });\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                // Create a custom constraints object to use exact device\n                // matching to make sure there is no fallthrough to another\n                // camera device. If a matching device could not be found, try\n                // anyways and let the caller handle errors.\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: {\n                            exact: (matchingDevice && matchingDevice.deviceId)\n                                || desktopSharingSourceDevice\n                        }\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            mediaStreamsMetaData.push({\n                stream,\n                sourceId,\n                sourceType,\n                track: stream.getVideoTracks()[0],\n                videoType: VideoType.DESKTOP\n            });\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0]\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : browser.isChromiumBased()\n                || browser.isFirefox() || browser.isEdge();\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n *\n * @param context Execution context, containing options and callbacks\n */\nfunction obtainDevices(context) {\n    if (!context.options.devices || context.options.devices.length === 0) {\n        return context.successCallback(context.streams || {});\n    }\n\n    const device = context.options.devices.splice(0, 1);\n\n    context.deviceGUM[device](context.options)\n        .then(stream => {\n            context.streams = context.streams || {};\n            context.streams[device] = stream;\n            obtainDevices(context);\n        }, error => {\n            Object.keys(context.streams).forEach(\n                d => rtcUtils.stopMediaStream(context.streams[d]));\n            logger.error(\n                `failed to obtain ${device} stream - stop`, error);\n\n            context.errorCallback(error);\n        });\n}\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n\n/**\n * Indicates that the track is no receiving any data without reason(the\n * stream was stopped, etc)\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(\n            tracksInfo => {\n                const tracks = usesNewGumFlow\n                    ? _newCreateLocalTracks(tracksInfo)\n                    : createLocalTracks(tracksInfo, options);\n\n                return tracks.some(track => !track._isReceivingData())\n                    ? Promise.reject(\n                        new JitsiTrackError(\n                            JitsiTrackErrors.NO_DATA_FROM_SOURCE))\n                    : tracks;\n            });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NO_DATA_FROM_SOURCE]\n    = 'The track has stopped receiving data from it\\'s source';\n\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/* global $ */\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// remove lines matching prefix from session section\nSDP.prototype.removeSessionLines = function(prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.session, prefix);\n\n    lines.forEach(line => {\n        self.session = self.session.replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// remove lines matching prefix from a media section specified by mediaindex\n// TODO: non-numeric mediaindex could match mid\nSDP.prototype.removeMediaLines = function(mediaindex, prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.media[mediaindex], prefix);\n\n    lines.forEach(line => {\n        self.media[mediaindex]\n            = self.media[mediaindex].replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n        if (mline.port === '0') {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n\n    this.raw = 'v=0\\r\\n'\n        + 'o=- 1923518516 2 IN IP4 0.0.0.0\\r\\n'// FIXME\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const EDGE = 'edge';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    EDGE,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Microsoft Edge': EDGE,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n * \n * NOTE: Here we cannot check solely for \"Chrome\" in the UA string and the\n * \"window.chrome\" property, because Edge has both, so we add an explicit\n * check for NOT Edge.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n\n    if (Boolean(window.chrome)\n            && !userAgent.match(/Edge/) && userAgent.match(/Chrome/)) {\n        const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n        return {\n            name: CHROME,\n            version\n        };\n    }\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n *\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect() {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const { name, version } = bowser;\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect();\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Microsoft Edge.\n     * @returns {boolean}\n     */\n    isEdge() {\n        return this._name === EDGE;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     * {@see https://github.com/lancedikson/bowser}\n     */\n    static compareVersions = bowser.compareVersions;\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {number|undefined} - Returns 0 if the version is equal to the\n     * current one, 1 if the version is greater than the current one, -1 if the\n     * version is lower than the current one and undefined if the current\n     * browser version is unknown.\n     */\n    compareVersion(version) {\n        if (this._version) {\n            return bowser.compareVersions([ String(version), this._version ]);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this.compareVersion(version) === -1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this.compareVersion(version) === 1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionEqualTo(version) {\n        return this.compareVersion(version) === 0;\n    }\n}\n","export * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './avatar';\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that jingle fatal error happened.\n */\nexport const JINGLE_FATAL_ERROR = 'conference.jingleFatalError';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _callStatsUserName = localStorage.getItem('callStatsUserName');\n            }\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                if (localStorage) {\n                    localStorage.setItem(\n                        'callStatsUserName',\n                        _callStatsUserName);\n                }\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _machineId = localStorage.getItem('jitsiMeetId');\n            }\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                if (localStorage) {\n                    localStorage.setItem('jitsiMeetId', _machineId);\n                }\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        const localStorage = getLocalStorage();\n\n        return localStorage ? localStorage.getItem('sessionId') : undefined;\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        const localStorage = getLocalStorage();\n\n        if (localStorage) {\n            if (sessionId) {\n                localStorage.setItem('sessionId', sessionId);\n            } else {\n                localStorage.removeItem('sessionId');\n            }\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n * Gets the localStorage of the browser. (Technically, gets the localStorage of\n * the global object because there may be no browser but React Native for\n * example).\n * @returns {Storage} the local Storage object (if any)\n */\nfunction getLocalStorage() {\n    let storage;\n\n    try {\n        // eslint-disable-next-line no-invalid-this\n        storage = (window || this).localStorage;\n    } catch (error) {\n        logger.error(error);\n    }\n\n    return storage;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 7\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 7\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 6\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 6\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        if (CallStats.backend) {\n            CallStats.backend.sendUserFeedback(\n                conferenceID, {\n                    userID: CallStats.userID,\n                    overall,\n                    comment\n                });\n        } else {\n            logger.error('Failed to submit feedback to CallStats - no backend');\n        }\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport initEmuc from './strophe.emuc';\nimport initJingle from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport initPing from './strophe.ping';\nimport initRayo from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param token\n * @param bosh\n */\nfunction createConnection(token, bosh = '/http-bind') {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        bosh += `${bosh.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    const conn = new Strophe.Connection(bosh);\n\n    // The default maxRetries is 5, which is too long.\n    conn.maxRetries = 3;\n\n    return conn;\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {Array<Object>} options.p2pStunServers see\n     * {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n        this._initStrophePlugins(this);\n\n        this.connection = createConnection(token, options.bosh);\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', this.disconnect.bind(this));\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync !== false) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n\n                            this.connection.addHandler(\n                                this._onPrivateMessage.bind(this), null,\n                                'message', null, null);\n                        }\n                    });\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = this.disconnectInProgress;\n            const errMsg = msg || this.lastErrorMsg;\n\n            this.disconnectInProgress = false;\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error');\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error');\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log(`(TIME) Strophe Attaching\\t:${now}`);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     *\n     * @param roomName\n     * @param options\n     */\n    createRoom(roomName, options) {\n        // By default MUC nickname is the resource part of the JID\n        let mucNickname = Strophe.getNodeFromJid(this.connection.jid);\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n        const cfgNickname\n            = options.useNicks && options.nick ? options.nick : null;\n\n        if (cfgNickname) {\n            // Use nick if it's defined\n            mucNickname = options.nick;\n        } else if (!this.authenticatedUser) {\n            // node of the anonymous JID is very long - here we trim it a bit\n            mucNickname = mucNickname.substr(0, 8);\n        }\n\n        // Constant JIDs need some random part to be appended in order to be\n        // able to join the MUC more than once.\n        if (this.authenticatedUser || cfgNickname !== null) {\n            mucNickname += `-${RandomUtil.randomHexString(6)}`;\n        }\n\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     * @param jid\n     * @param mute\n     */\n    setMute(jid, mute) {\n        this.connection.moderate.setMute(jid, mute);\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    eject(jid) {\n        this.connection.moderate.eject(jid);\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param ev optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress || !this.connection) {\n            this.eventEmitter.emit(JitsiConnectionEvents.WRONG_STATE);\n\n            return;\n        }\n\n        this.disconnectInProgress = true;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send an unavailable\n        // presence or disconnect at all. Switching Strophe to synchronous\n        // sending is not much of an option because it may lead to a noticeable\n        // delay in navigating away from the current location. As a compromise,\n        // we will try to increase the chances of sending an unavailable\n        // presence and/or disconecting within the short time span that we have\n        // upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attemtp to have its unavailable\n        // presence at the top of the send queue. We flush() once more after\n        // disconnect() in order to attempt to have its unavailable presence\n        // sent as soon as possible.\n        this.connection.flush();\n\n        if (ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best\n                // (known) way to properly disconnect from the XMPP server.\n                // Consequently, it may be fine to have the source code and\n                // comment it in or out depending on whether we want to run with\n                // it for some time.\n                this.connection.options.sync = true;\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        initEmuc(this);\n        initJingle(this, this.eventEmitter, iceConfig);\n        initStropheUtil();\n        initPing(this);\n        initRayo();\n        initStropheLogger();\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection._proto\n            && this.connection._proto.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection._proto.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from speaker stats component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this.speakerStatsComponentAddress\n            || from !== this.speakerStatsComponentAddress) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        return true;\n    }\n}\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        } else if (browser.isEdge() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    applyConstraintsPromise = stream.getTracks()[0]\n                        .applyConstraints(options.trackOptions);\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true;\nvar deprecationWarnings_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  /**\n   * Disable or enable deprecation warnings\n   * @param {!boolean} bool set to true to disable warnings.\n   */\n  disableWarnings: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    deprecationWarnings_ = !bool;\n    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Shows a deprecation warning suggesting the modern and spec-compatible API.\n   */\n  deprecated: function(oldMethod, newMethod) {\n    if (!deprecationWarnings_) {\n      return;\n    }\n    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n        ' instead.');\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function(window) {\n    var navigator = window && window.navigator;\n\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/(\\d+)\\./, 1);\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/(\\d+)\\./, 2);\n      } else { // Safari (in an unpublished version) or unknown webkit-based.\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/(\\d+)\\./, 1);\n        } else { // unknown webkit-based browser.\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n        // Safari, with webkitGetUserMedia removed.\n      result.browser = 'safari';\n      result.version = this.extractVersion(navigator.userAgent,\n          /AppleWebKit\\/(\\d+)\\./, 1);\n    } else { // Default fallthrough: not supported.\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  },\n\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  deprecated: utils.deprecated,\n  disableLog: utils.disableLog,\n  disableWarnings: utils.disableWarnings,\n  extractVersion: utils.extractVersion,\n  shimCreateObjectURL: utils.shimCreateObjectURL,\n  detectBrowser: utils.detectBrowser.bind(utils)\n};\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 2000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 5000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId the endpoint ID(MUC nickname/resource JID)\n     * @param {boolean} isActive true if the connection is OK or false otherwise\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId the participant for which the \"connection\n     * interrupted\" timeout was scheduled\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack the {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack the remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id the participant's id (MUC nickname or Colibri endpoint\n     * ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print the warning for\n            // debugging purpose\n            logger.warn(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track the video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track the video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track the remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} testing.enableFirefoxSimulcast - Described in the\n * config.js[1].\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {Strophe.Connection} connection Strophe XMPP connection instance\n     * used to send packets.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        this.modificationQueue\n            = async.queue(this._processQueueTasks.bind(this), 1);\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance has been ended and eventually\n     * logs a message which mentions that given <tt>actionName</tt> was\n     * cancelled.\n     * @param {string} actionName\n     * @return {boolean} <tt>true</tt> if this {@link JingleSessionPC} has\n     * entered {@link JingleSessionState.ENDED} or <tt>false</tt> otherwise.\n     * @private\n     */\n    _assertNotEnded(actionName) {\n        if (this.state === JingleSessionState.ENDED) {\n            logger.log(\n                `The session has ended - cancelling action: ${actionName}`);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableFirefoxSimulcast\n                = options.testing && options.testing.enableFirefoxSimulcast;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (!this.peerconnection) {\n                return;\n            }\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (\n                (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed')\n                && !this.closed) {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            if (!this.peerconnection\n                    || !this._assertNotEnded('oniceconnectionstatechange')) {\n                return;\n            }\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                if (this.closed) {\n                    break;\n                }\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n        this.peerconnection.onnegotiationneeded = () => {\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ(\n            sessionInfo,\n            null,\n            this.newJingleErrorHandler(sessionInfo),\n            /*\n             * This message will be often sent when there are connectivity\n             * issues, so make it slightly longer than Prosody's default BOSH\n             * inactivity timeout of 60 seconds.\n             */ 65);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    this._onJingleFatalError(error);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this.close();\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass a handler to the .push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            lines.forEach(line => {\n                remoteSdp.media[idx]\n                    = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n            });\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            return Promise.reject('Attempted to renegotiate in state closed');\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            return Promise.reject(\n                'Can not renegotiate without remote description,'\n                    + `- current state: ${this.state}`);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        if (this.peerconnection.signalingState === 'have-local-offer') {\n            // Skip createOffer and setLocalDescription or FF will fail\n            logger.debug(\n                'Renegotiate: setting remote description');\n\n            /* eslint-disable arrow-body-style */\n\n            return this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    // In case when the answer is being set for the first time,\n                    // full sRD/sLD cycle is required to have the local\n                    // description updated and SSRCs synchronized correctly.\n                    // Otherwise SSRCs for streams added after invite, but\n                    // before the answer was accepted will not be detected.\n                    // The reason for that is that renegotiate can not be called\n                    // when adding tracks and they will not be reflected in\n                    // the local SDP.\n                    return this._initiatorRenegotiate(remoteDescription);\n                });\n            /* eslint-enable arrow-body-style */\n        }\n\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            // Check if the connection was closed and pretend everything is OK.\n            // This can happen if a track removal is scheduled but takes place\n            // after the connection is closed.\n            if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed'\n                || this.closed) {\n\n                finishedCallback();\n\n                return;\n            }\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            // NOTE the code below assumes that no more than 1 video track\n            // can be added to the peer connection.\n            // Transition from no video to video (possibly screen sharing)\n            if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                // Clearing current primary SSRC will make\n                // the SdpConsistency generate a new one which will result\n                // with:\n                // 1. source-remove for the recvonly\n                // 2. source-add for the new video stream\n                this.peerconnection.clearRecvonlySsrc();\n\n            // Transition from video to no video\n            } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                // Clearing current primary SSRC and generating the recvonly\n                // will result in:\n                // 1. source-remove for the old video stream\n                // 2. source-add for the recvonly stream\n                this.peerconnection.clearRecvonlySsrc();\n                this.peerconnection.generateRecvonlySsrc();\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n            .then(shouldRenegotiate => {\n                if (shouldRenegotiate\n                    && (oldTrack || newTrack)\n                    && this.state === JingleSessionState.ACTIVE) {\n                    this._renegotiate()\n                        .then(() => {\n                            const newLocalSDP\n                                = new SDP(\n                                    this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(\n                                new SDP(oldLocalSdp), newLocalSDP);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                } else {\n                    finishedCallback();\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const tpcOperation\n                = isMute\n                    ? tpc.removeTrackMute.bind(tpc, track)\n                    : tpc.addTrackUnmute.bind(tpc, track);\n\n            if (!tpcOperation()) {\n                finishedCallback(`${operationName} failed!`);\n            } else if (!oldLocalSDP || !tpc.remoteDescription.sdp) {\n                finishedCallback();\n            } else {\n                this._renegotiate()\n                    .then(() => {\n                        // The results are ignored, as this check failure is not\n                        // enough to fail the whole operation. It will log\n                        // an error inside.\n                        this._verifyNoSSRCChanged(\n                            operationName, new SDP(oldLocalSDP));\n                        finishedCallback();\n                    },\n                    finishedCallback /* will be called with an error */);\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     *\n     * @param error\n     * @private\n     */\n    _onJingleFatalError(error) {\n        if (this.room) {\n            this.room.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_SETUP_FAILED, this, error);\n            this.room.eventEmitter.emit(\n                XMPPEvents.JINGLE_FATAL_ERROR, this, error);\n        }\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.closed = true;\n\n        // The signaling layer will remove it's listeners\n        this.signalingLayer.setChatRoom(null);\n\n        // do not try to close if already closed.\n        this.peerconnection\n            && ((this.peerconnection.signalingState\n                    && this.peerconnection.signalingState !== 'closed')\n                || (this.peerconnection.connectionState\n                    && this.peerconnection.connectionState !== 'closed'))\n            && this.peerconnection.close();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/*!\n * Bowser - a browser detector\n * https://github.com/ded/bowser\n * MIT License | (c) Dustin Diaz 2015\n */\n\n!function (root, name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(name, definition)\n  else root[name] = definition()\n}(this, 'bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n\n  var t = true\n\n  function detect(ua) {\n\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[1]) || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[2]) || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()\n      , likeAndroid = /like android/i.test(ua)\n      , android = !likeAndroid && /android/i.test(ua)\n      , nexusMobile = /nexus\\s*[0-6]\\s*/i.test(ua)\n      , nexusTablet = !nexusMobile && /nexus\\s*[0-9]+/i.test(ua)\n      , chromeos = /CrOS/.test(ua)\n      , silk = /silk/i.test(ua)\n      , sailfish = /sailfish/i.test(ua)\n      , tizen = /tizen/i.test(ua)\n      , webos = /(web|hpw)os/i.test(ua)\n      , windowsphone = /windows phone/i.test(ua)\n      , samsungBrowser = /SamsungBrowser/i.test(ua)\n      , windows = !windowsphone && /windows/i.test(ua)\n      , mac = !iosdevice && !silk && /macintosh/i.test(ua)\n      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)\n      , edgeVersion = getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.\\d+)?)/i)\n      , versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i)\n      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)\n      , mobile = !tablet && /[^-]mobi/i.test(ua)\n      , xbox = /xbox/i.test(ua)\n      , result\n\n    if (/opera/i.test(ua)) {\n      //  an old Opera\n      result = {\n        name: 'Opera'\n      , opera: t\n      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/opr\\/|opios/i.test(ua)) {\n      // a new Opera\n      result = {\n        name: 'Opera'\n        , opera: t\n        , version: getFirstMatch(/(?:opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/SamsungBrowser/i.test(ua)) {\n      result = {\n        name: 'Samsung Internet for Android'\n        , samsungBrowser: t\n        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/coast/i.test(ua)) {\n      result = {\n        name: 'Opera Coast'\n        , coast: t\n        , version: versionIdentifier || getFirstMatch(/(?:coast)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/yabrowser/i.test(ua)) {\n      result = {\n        name: 'Yandex Browser'\n      , yandexbrowser: t\n      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/ucbrowser/i.test(ua)) {\n      result = {\n          name: 'UC Browser'\n        , ucbrowser: t\n        , version: getFirstMatch(/(?:ucbrowser)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/mxios/i.test(ua)) {\n      result = {\n        name: 'Maxthon'\n        , maxthon: t\n        , version: getFirstMatch(/(?:mxios)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/epiphany/i.test(ua)) {\n      result = {\n        name: 'Epiphany'\n        , epiphany: t\n        , version: getFirstMatch(/(?:epiphany)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/puffin/i.test(ua)) {\n      result = {\n        name: 'Puffin'\n        , puffin: t\n        , version: getFirstMatch(/(?:puffin)[\\s\\/](\\d+(?:\\.\\d+)?)/i)\n      }\n    }\n    else if (/sleipnir/i.test(ua)) {\n      result = {\n        name: 'Sleipnir'\n        , sleipnir: t\n        , version: getFirstMatch(/(?:sleipnir)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/k-meleon/i.test(ua)) {\n      result = {\n        name: 'K-Meleon'\n        , kMeleon: t\n        , version: getFirstMatch(/(?:k-meleon)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (windowsphone) {\n      result = {\n        name: 'Windows Phone'\n      , osname: 'Windows Phone'\n      , windowsphone: t\n      }\n      if (edgeVersion) {\n        result.msedge = t\n        result.version = edgeVersion\n      }\n      else {\n        result.msie = t\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer'\n      , msie: t\n      , version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (chromeos) {\n      result = {\n        name: 'Chrome'\n      , osname: 'Chrome OS'\n      , chromeos: t\n      , chromeBook: t\n      , chrome: t\n      , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/edg([ea]|ios)/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge'\n      , msedge: t\n      , version: edgeVersion\n      }\n    }\n    else if (/vivaldi/i.test(ua)) {\n      result = {\n        name: 'Vivaldi'\n        , vivaldi: t\n        , version: getFirstMatch(/vivaldi\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (sailfish) {\n      result = {\n        name: 'Sailfish'\n      , osname: 'Sailfish OS'\n      , sailfish: t\n      , version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey'\n      , seamonkey: t\n      , version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/firefox|iceweasel|fxios/i.test(ua)) {\n      result = {\n        name: 'Firefox'\n      , firefox: t\n      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \\/](\\d+(\\.\\d+)?)/i)\n      }\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t\n        result.osname = 'Firefox OS'\n      }\n    }\n    else if (silk) {\n      result =  {\n        name: 'Amazon Silk'\n      , silk: t\n      , version : getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS'\n      , phantom: t\n      , version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/slimerjs/i.test(ua)) {\n      result = {\n        name: 'SlimerJS'\n        , slimer: t\n        , version: getFirstMatch(/slimerjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry'\n      , osname: 'BlackBerry OS'\n      , blackberry: t\n      , version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (webos) {\n      result = {\n        name: 'WebOS'\n      , osname: 'WebOS'\n      , webos: t\n      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t)\n    }\n    else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada'\n      , osname: 'Bada'\n      , bada: t\n      , version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    }\n    else if (tizen) {\n      result = {\n        name: 'Tizen'\n      , osname: 'Tizen'\n      , tizen: t\n      , version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    }\n    else if (/qupzilla/i.test(ua)) {\n      result = {\n        name: 'QupZilla'\n        , qupzilla: t\n        , version: getFirstMatch(/(?:qupzilla)[\\s\\/](\\d+(?:\\.\\d+)+)/i) || versionIdentifier\n      }\n    }\n    else if (/chromium/i.test(ua)) {\n      result = {\n        name: 'Chromium'\n        , chromium: t\n        , version: getFirstMatch(/(?:chromium)[\\s\\/](\\d+(?:\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome'\n        , chrome: t\n        , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (android) {\n      result = {\n        name: 'Android'\n        , version: versionIdentifier\n      }\n    }\n    else if (/safari|applewebkit/i.test(ua)) {\n      result = {\n        name: 'Safari'\n      , safari: t\n      }\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if (iosdevice) {\n      result = {\n        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\n      }\n      // WTF: version is not part of user agent in web apps\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if(/googlebot/i.test(ua)) {\n      result = {\n        name: 'Googlebot'\n      , googlebot: t\n      , version: getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i) || versionIdentifier\n      }\n    }\n    else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n     };\n   }\n\n    // set webkit or gecko flag for browsers based on these engines\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      if (/(apple)?webkit\\/537\\.36/i.test(ua)) {\n        result.name = result.name || \"Blink\"\n        result.blink = t\n      } else {\n        result.name = result.name || \"Webkit\"\n        result.webkit = t\n      }\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\"\n      result.gecko = t\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i)\n    }\n\n    // set OS flags for platforms that have multiple browsers\n    if (!result.windowsphone && (android || result.silk)) {\n      result.android = t\n      result.osname = 'Android'\n    } else if (!result.windowsphone && iosdevice) {\n      result[iosdevice] = t\n      result.ios = t\n      result.osname = 'iOS'\n    } else if (mac) {\n      result.mac = t\n      result.osname = 'macOS'\n    } else if (xbox) {\n      result.xbox = t\n      result.osname = 'Xbox'\n    } else if (windows) {\n      result.windows = t\n      result.osname = 'Windows'\n    } else if (linux) {\n      result.linux = t\n      result.osname = 'Linux'\n    }\n\n    function getWindowsVersion (s) {\n      switch (s) {\n        case 'NT': return 'NT'\n        case 'XP': return 'XP'\n        case 'NT 5.0': return '2000'\n        case 'NT 5.1': return 'XP'\n        case 'NT 5.2': return '2003'\n        case 'NT 6.0': return 'Vista'\n        case 'NT 6.1': return '7'\n        case 'NT 6.2': return '8'\n        case 'NT 6.3': return '8.1'\n        case 'NT 10.0': return '10'\n        default: return undefined\n      }\n    }\n\n    // OS version extraction\n    var osVersion = '';\n    if (result.windows) {\n      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i))\n    } else if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (result.mac) {\n      osVersion = getFirstMatch(/Mac OS X (\\d+([_\\.\\s]\\d+)*)/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n    if (osVersion) {\n      result.osversion = osVersion;\n    }\n\n    // device type extraction\n    var osMajorVersion = !result.windows && osVersion.split('.')[0];\n    if (\n         tablet\n      || nexusTablet\n      || iosdevice == 'ipad'\n      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))\n      || result.silk\n    ) {\n      result.tablet = t\n    } else if (\n         mobile\n      || iosdevice == 'iphone'\n      || iosdevice == 'ipod'\n      || android\n      || nexusMobile\n      || result.blackberry\n      || result.webos\n      || result.bada\n    ) {\n      result.mobile = t\n    }\n\n    // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n    if (result.msedge ||\n        (result.msie && result.version >= 10) ||\n        (result.yandexbrowser && result.version >= 15) ||\n\t\t    (result.vivaldi && result.version >= 1.0) ||\n        (result.chrome && result.version >= 20) ||\n        (result.samsungBrowser && result.version >= 4) ||\n        (result.firefox && result.version >= 20.0) ||\n        (result.safari && result.version >= 6) ||\n        (result.opera && result.version >= 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6) ||\n        (result.blackberry && result.version >= 10.1)\n        || (result.chromium && result.version >= 20)\n        ) {\n      result.a = t;\n    }\n    else if ((result.msie && result.version < 10) ||\n        (result.chrome && result.version < 20) ||\n        (result.firefox && result.version < 20.0) ||\n        (result.safari && result.version < 6) ||\n        (result.opera && result.version < 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] < 6)\n        || (result.chromium && result.version < 20)\n        ) {\n      result.c = t\n    } else result.x = t\n\n    return result\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n      if (typeof browserItem=== 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  function getVersionPrecision(version) {\n    return version.split(\".\").length;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  function map(arr, iterator) {\n    var result = [], i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i++) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1\n   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1\n   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0\n   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1\n   *\n   * @param  {Array<String>} versions versions to compare\n   * @return {Number} comparison result\n   */\n  function compareVersions(versions) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));\n    var chunks = map(versions, function (version) {\n      var delta = precision - getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      version = version + new Array(delta + 1).join(\".0\");\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return map(version.split(\".\"), function (chunk) {\n        return new Array(20 - chunk.length).join(\"0\") + chunk;\n      }).reverse();\n    });\n\n    // iterate in reverse order by reversed chunks array\n    while (--precision >= 0) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n      else if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === 0) {\n          // all version chunks are same\n          return 0;\n        }\n      }\n      else {\n        return -1;\n      }\n    }\n  }\n\n  /**\n   * Check if browser is unsupported\n   *\n   * @example\n   *   bowser.isUnsupportedBrowser({\n   *     msie: \"10\",\n   *     firefox: \"23\",\n   *     chrome: \"29\",\n   *     safari: \"5.1\",\n   *     opera: \"16\",\n   *     phantom: \"534\"\n   *   });\n   *\n   * @param  {Object}  minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function isUnsupportedBrowser(minVersions, strictMode, ua) {\n    var _bowser = bowser;\n\n    // make strictMode param optional with ua param usage\n    if (typeof strictMode === 'string') {\n      ua = strictMode;\n      strictMode = void(0);\n    }\n\n    if (strictMode === void(0)) {\n      strictMode = false;\n    }\n    if (ua) {\n      _bowser = detect(ua);\n    }\n\n    var version = \"\" + _bowser.version;\n    for (var browser in minVersions) {\n      if (minVersions.hasOwnProperty(browser)) {\n        if (_bowser[browser]) {\n          if (typeof minVersions[browser] !== 'string') {\n            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));\n          }\n\n          // browser version and min supported version.\n          return compareVersions([version, minVersions[browser]]) < 0;\n        }\n      }\n    }\n\n    return strictMode; // not found\n  }\n\n  /**\n   * Check if browser is supported\n   *\n   * @param  {Object} minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function check(minVersions, strictMode, ua) {\n    return !isUnsupportedBrowser(minVersions, strictMode, ua);\n  }\n\n  bowser.isUnsupportedBrowser = isUnsupportedBrowser;\n  bowser.compareVersions = compareVersions;\n  bowser.check = check;\n\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n  bowser._detect = detect;\n\n  /*\n   * Set our detect public method to the main bowser object\n   * This is needed to implement bowser in server side\n   */\n  bowser.detect = detect;\n  return bowser\n});\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            // FIXME Why only video tracks?\n            for (const track of this.stream.getVideoTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        /**\n         * On mute event we are waiting for 3s to check if the stream is going\n         * to be still muted before firing the event for camera issue detected\n         * (NO_DATA_FROM_SOURCE).\n         */\n        this._noDataFromSourceTimeout = null;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            const _onNoDataFromSourceError\n                = this._onNoDataFromSourceError.bind(this);\n\n            this._setHandler('track_mute', () => {\n                if (this._checkForCameraIssues()) {\n                    const now = window.performance.now();\n\n                    this._noDataFromSourceTimeout\n                        = setTimeout(_onNoDataFromSourceError, 5000);\n                    this._setHandler('track_unmute', () => {\n                        this._clearNoDataFromSourceMuteResources();\n                        Statistics.sendAnalyticsAndLog(\n                            TRACK_UNMUTED,\n                            {\n                                'media_type': this.getType(),\n                                'track_type': 'local',\n                                value: window.performance.now() - now\n                            });\n                    });\n                }\n            });\n            this._setHandler('track_ended', _onNoDataFromSourceError);\n        }\n    }\n\n    /**\n     * Clears all timeouts and handlers set on MediaStreamTrack mute event.\n     * FIXME: Change the name of the method with better one.\n     */\n    _clearNoDataFromSourceMuteResources() {\n        if (this._noDataFromSourceTimeout) {\n            clearTimeout(this._noDataFromSourceTimeout);\n            this._noDataFromSourceTimeout = null;\n        }\n        this._setHandler('track_unmute', undefined);\n    }\n\n    /**\n     * Called when potential camera issue is detected. Clears the handlers and\n     * timeouts set on MediaStreamTrack muted event. Verifies that the camera\n     * issue persists and fires NO_DATA_FROM_SOURCE event.\n     */\n    _onNoDataFromSourceError() {\n        this._clearNoDataFromSourceMuteResources();\n        if (this._checkForCameraIssues()) {\n            this._fireNoDataFromSourceEvent();\n        }\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        this.emit(NO_DATA_FROM_SOURCE);\n\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType()));\n        const log = { name: NO_DATA_FROM_SOURCE };\n\n        if (this.isAudioTrack()) {\n            log.isReceivingData = this._isReceivingData();\n        }\n        Statistics.sendLog(JSON.stringify(log));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise.then(streamsInfo => {\n                const mediaType = this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${this._bytesSent}`);\n\n                    // we are not receiving anything from the microphone\n                    this._fireNoDataFromSourceEvent();\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Detects camera issues, i.e. returns true if we expect this track to be\n     * receiving data from its source, but it isn't receiving data.\n     *\n     * @returns {boolean} true if an issue is detected and false otherwise\n     */\n    _checkForCameraIssues() {\n        if (!this.isVideoTrack()\n                || this._stopStreamInProgress\n                || this.videoType === VideoType.DESKTOP) {\n            return false;\n        }\n\n        return !this._isReceivingData();\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    _isReceivingData() {\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n        return this.stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n"," /* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n          ? '/' + headerExtension.direction\n          : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n      'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  // Search in session part, too.\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var iceParameters = {\n    usernameFragment: lines.filter(function(line) {\n      return line.indexOf('a=ice-ufrag:') === 0;\n    })[0].substr(12),\n    password: lines.filter(function(line) {\n      return line.indexOf('a=ice-pwd:') === 0;\n    })[0].substr(10)\n  };\n  return iceParameters;\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n          mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n          mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n  .map(function(line) {\n    var parts = line.substr(17).split(' ');\n    return parts.map(function(part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n      .map(function(line) {\n        return SDPUtils.parseSsrcMedia(line);\n      })\n      .filter(function(obj) {\n        return obj.attribute === 'cname';\n      })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(msidParts) {\n    return msidParts.attribute === 'msid';\n  });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    this.xmpp.disconnect(...args);\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport JitsiDTMFManager from './modules/DTMF/JitsiDTMFManager';\nimport P2PDominantSpeakerDetection from './modules/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/TalkMutedDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this.room = this.xmpp.createRoom(this.options.name, config);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send a ping request or response.');\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        // XXX The property location on the global variable window is not\n        // defined in all execution environments (e.g. react-native). While\n        // jitsi-meet may polyfill it when executing on react-native, it is\n        // better for the cross-platform support to not require window.location\n        // especially when there is a worthy alternative (as demonstrated\n        // bellow).\n        const windowLocation = window.location;\n\n        let callStatsAliasName = this.myUserId();\n\n        if (config.enableDisplayNameInStats && config.displayName) {\n            callStatsAliasName = config.displayName;\n        }\n\n        this.statistics = new Statistics(this.xmpp, {\n            callStatsAliasName,\n            callStatsConfIDNamespace:\n                config.callStatsConfIDNamespace\n                    || (windowLocation && windowLocation.hostname)\n                    || (config.hosts && config.hosts.domain),\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            roomName: this.options.name,\n            swapUserNameAndAlias: config.enableStatsID,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n        // eslint-disable-next-line no-new\n        new TalkMutedDetection(\n            this,\n            () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(...args) {\n    return authenticateAndUpgradeRole.apply(this, args);\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command) {\n    if (this.room) {\n        this.room.removePresenceListener(command);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n    this.xmpp.caps.getFeatures(jid)\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n        },\n        error => logger.warn(`Failed to discover features of ${jid}`, error));\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n\n    // Maybe start P2P\n    this._maybeStartOrStopP2P();\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n    const role = this.room.getMemberRole(jingleSession.remoteJid);\n\n    if (role !== 'moderator') {\n        rejectReason = {\n            reason: 'security-error',\n            reasonDescription: 'Only focus can start new sessions',\n            errorMsg: 'Rejecting session-initiate from non-focus and'\n                        + `non-moderator user: ${jingleSession.remoteJid}`\n        };\n    } else if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            this.getLocalTracks()\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel'\n        && !browser.supportsDataChannels()) {\n        bridgeChannelType = 'websocket';\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    if (!this.dtmfManager) {\n        const peerConnection = this.getActivePeerConnection();\n\n        if (!peerConnection) {\n            logger.warn('cannot sendTones: no peer connection');\n\n            return;\n        }\n\n        const localAudio = this.getLocalAudioTrack();\n\n        if (!localAudio) {\n            logger.warn('cannot sendTones: no local audio stream');\n\n            return;\n        }\n        this.dtmfManager = new JitsiDTMFManager(localAudio, peerConnection);\n    }\n\n    this.dtmfManager.sendTones(tones, duration, pause);\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const isModerator = this.isModerator();\n    const hasBotPeer\n        = peers.find(p => p._botType === 'poltergeist') !== undefined;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(\n        `P2P? isModerator: ${isModerator}, peerCount: ${\n            peerCount}, hasBotPeer: ${hasBotPeer} => ${\n            shouldBeInP2P}`);\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (isModerator && !this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n        // Everyone is a moderator ?\n        if (isModerator && peer.getRole() === 'moderator') {\n            const myId = this.myUserId();\n            const peersId = peer.getId();\n\n            if (myId > peersId) {\n                logger.debug(\n                    'Everyone\\'s a moderator - '\n                    + 'the other peer should start P2P', myId, peersId);\n\n                return;\n            } else if (myId === peersId) {\n                logger.error('The same IDs ? ', myId, peersId);\n\n                return;\n            }\n        }\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        () => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                },\n                () =>\n                    logger.warn(\n                        'Error while audio muting due to focus request'));\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.JINGLE_FATAL_ERROR,\n        (session, error) => {\n            if (!session.isP2P) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.JINGLE_FATAL_ERROR, error);\n            }\n        });\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RECORDER_STATE_CHANGED,\n        JitsiConferenceEvents.RECORDER_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.addListener(\n        XMPPEvents.CONFERENCE_SETUP_FAILED,\n        (jingleSession, error) => {\n            if (!jingleSession.isP2P) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.SETUP_FAILED,\n                    error);\n            }\n        });\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.KICKED,\n        JitsiConferenceEvents.KICKED);\n    chatRoom.addListener(XMPPEvents.KICKED,\n        () => {\n            conference.leave();\n        });\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n            }\n            if (conference.statistics && conference.myUserId() === id) {\n                // We are the new dominant speaker.\n                conference.statistics.sendDominantSpeakerEvent(\n                    conference.room.roomjid);\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n    conference.statistics.addByteSentStatsListener((tpc, stats) => {\n        conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n            const ssrc = tpc.getLocalSSRC(track);\n\n            if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                return;\n            }\n\n            track._onByteSentStatsReceived(tpc, stats[ssrc]);\n        });\n    });\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'callstats_name': Settings.callStatsUserName,\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return !(\n            this.isFirefox()\n            || this.isEdge()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc()\n        );\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.isEdge() && !this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports native webrtc.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithWebrtc() {\n        return this.isSafari()\n            && !this.isVersionLessThan('11');\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports VP8.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithVP8() {\n        return this.isSafari()\n            && !this.isVersionLessThan('12.1');\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isEdge()\n            && !this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports WebRTC datachannels.\n     * @return {boolean}\n     */\n    supportsDataChannels() {\n        // NOTE: Edge does not yet implement DataChannel.\n        return !this.isEdge();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the MediaStream constructor as\n     * defined by https://www.w3.org/TR/mediacapture-streams/#constructors. In\n     * cases where there is no support, it maybe be necessary to get audio\n     * and video in two distinct GUM calls.\n     * @return {boolean}\n     */\n    supportsMediaStreamConstructor() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser supports RTP statictics collecting.\n     * Required by {@link RTPStatsCollector}.\n     *\n     * @returns {boolean} true if they are supported, false otherwise.\n     */\n    supportsRtpStatistics() {\n        return this.isChromiumBased()\n            || this.isEdge()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox() && !this.isEdge();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox() && !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Whether jitsi-meet supports simulcast on the current browser.\n     * @returns {boolean}\n     */\n    supportsSimulcast() {\n        return this.isChromiumBased() || this.isFirefox()\n            || this.isSafariWithVP8() || this.isReactNative();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // FIXME: Check if we can use supportsVideoOut and supportsVideoIn. I\n        // leave the old implementation here in order not to brake something.\n\n        // Older versions of Safari using webrtc/adapter do not support video\n        // due in part to Safari only supporting H264 and the bridge sending VP8\n        // Newer Safari support VP8 and other WebRTC features.\n        return !this.isSafariWithWebrtc()\n            || (this.isSafariWithVP8() && this.usesPlanB());\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafariWithVP8()) {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafariWithWebrtc()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow() || this.isEdge();\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'ipAddress',\n    'port': 'portNumber',\n    'protocol': 'transport'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.EDGE] = {\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'remoteAddress',\n    'transportType': 'protocol',\n    'localAddress': 'localAddress',\n    'activeConnection': 'activeConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'frameHeight',\n    'googFrameWidthReceived': 'frameWidth',\n    'googFrameHeightSent': 'frameHeight',\n    'googFrameWidthSent': 'frameWidth',\n    'googFrameRateReceived': 'framesPerSecond',\n    'googFrameRateSent': 'framesPerSecond',\n    'audioInputLevel': 'audioLevel',\n    'audioOutputLevel': 'audioLevel',\n    'currentRoundTripTime': 'roundTripTime'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafariWithWebrtc() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    if (browser.supportsRtpStatistics()) {\n        this.statsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            // firefox\n                            results = report;\n                        } else {\n                            // chrome\n                            results = report.result();\n                        }\n\n                        self.currentStatsReport = results;\n                        try {\n                            if (this._usesPromiseGetStats) {\n                                self.processNewStatsReport();\n                            } else {\n                                self.processStatsReport();\n                            }\n                        } catch (e) {\n                            GlobalOnErrorHandler.callErrorHandler(e);\n                            logger.error(`Unsupported key:${e}`, e);\n                        }\n\n                        self.previousStatsReport = self.currentStatsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.statsIntervalMilis\n        );\n    }\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    case browsers.EDGE:\n        itemStatByKey = (item, key) => item[key];\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        // NOTE: Edge's proprietary stats via RTCIceTransport.msGetStats().\n        if (now.msType === 'transportdiagnostics') {\n            this.conferenceStats.transport.push({\n                ip: now.remoteAddress,\n                type: now.protocol,\n                localip: now.localAddress,\n                p2p: this.peerconnection.isP2P\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        // NOTE: In Edge, stats with type \"inboundrtp\" and \"outboundrtp\" are\n        // completely useless, so ignore them.\n        if (browser.isEdge()\n            && (now.type === 'inboundrtp' || now.type === 'outboundrtp')) {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        // Edge uses the new format, so skip this check.\n        if (!browser.isEdge()\n                && (now.isRemote === true || now.remoteSource === true)) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n    }\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'transport': this.conferenceStats.transport\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            //\n            // In Edge the range is -100..0 (-100 == silence) measured in dB,\n            // so convert to linear. The levels are set to 0 for remote tracks,\n            // so don't convert those, since 0 means \"the maximum\" in Edge.\n            if (browser.isEdge()) {\n                audioLevel = audioLevel < 0 ? Math.pow(10, audioLevel / 20) : 0;\n\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            } else {\n                audioLevel = audioLevel / 32767;\n            }\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                // FF uses non-standard ipAddress, portNumber, transport\n                // instead of ip, port, protocol\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room\n                    = xmpp.createRoom(this.options.name, this.options.config);\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nclass MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // XXX What are the semantics of the return value? Why is it sometimes\n        // undefined and sometimes a boolean?\n        if (!room) {\n            return;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param XMPP\n */\nexport default function(XMPP) {\n    Strophe.addConnectionPlugin('emuc', new MucConnectionPlugin(XMPP));\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport Settings from '../settings/Settings';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param connection\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.enableStatsID) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': Settings.callStatsUserName\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n            }\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n\n        if (isKick && this.myroomjid === from) {\n            this.eventEmitter.emit(XMPPEvents.KICKED);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const txt = $(msg).find('>body').text();\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED,\n                $(msg).find('>text').text(), txt);\n\n            return true;\n        }\n\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg)\n                    .find(\n                        '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                            + '>status[code=\"104\"]')\n                    .length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    // FIXME: is muc#roomconfig_passwordprotectedroom required?\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n        if (this.connection) {\n            this.sendPresence();\n        }\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        if (!this.connection) {\n            return;\n        }\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS);\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync !== false\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    if (openSctp && !browser.supportsDataChannels()) {\n        openSctp = false;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nclass JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    isP2P ? this.p2pIceConfig : this.jvbIceConfig,\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success!', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.url = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.url = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.url += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.url += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.url += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.url.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n\n/**\n *\n * @param XMPP\n * @param eventEmitter\n * @param iceConfig\n */\nexport default function initJingle(XMPP, eventEmitter, iceConfig) {\n    Strophe.addConnectionPlugin(\n        'jingle',\n        new JingleConnectionPlugin(XMPP, eventEmitter, iceConfig));\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {Strophe.Connection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nclass PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ(iq, success, error, timeout);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        if (this.intervalId) {\n            const errmsg = 'Ping task scheduled already';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n\n            return;\n        }\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n\n/**\n *\n * @param xmpp\n */\nexport default function(xmpp) {\n    Strophe.addConnectionPlugin('ping', new PingConnectionPlugin(xmpp));\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nclass RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features }) => {\n                    if (user) {\n                        // TODO: Maybe use the version + node + hash as keys?\n                        this.versionToCapabilities[user.version] = features;\n                    }\n\n                    return features;\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n        this.submit();\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        const identities\n          = this.disco._identities.sort(compareIdentities).reduce(\n              (accumulatedValue, identity) =>\n                  `${\n                      IDENTITY_PROPERTIES.reduce(\n                          (tmp, key, idx) =>\n                              tmp\n                                  + (idx === 0 ? '' : '/')\n                                  + identity[key],\n                          '')\n                  }<`,\n              '');\n        const features\n            = this.disco._features.sort().reduce(\n                (tmp, feature) => `${tmp + feature}<`, '');\n\n        this.version = b64_sha1(identities + features);\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n *\n * @param localAudio\n * @param peerConnection\n */\nfunction JitsiDTMFManager(localAudio, peerConnection) {\n    const audioTrack = localAudio.getTrack();\n\n    if (!audioTrack) {\n        throw new Error('Failed to initialize DTMFSender: no audio track.');\n    }\n    this.dtmfSender\n        = peerConnection.peerconnection.createDTMFSender(audioTrack);\n    logger.debug('Initialized DTMFSender');\n}\n\nJitsiDTMFManager.prototype.sendTones = function(tones, duration, pause) {\n    this.dtmfSender.insertDTMF(tones, duration || 200, pause || 200);\n};\n\nmodule.exports = JitsiDTMFManager;\n\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            // Create a WebSocket instance.\n            const ws = new WebSocket(wsUrl);\n\n            // Handle the WebSocket.\n            this._handleChannel(ws);\n            this._mode = 'websocket';\n        }\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = error => {\n            logger.error('Channel error:', error);\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = () => {\n            logger.info('Channel closed');\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst SIMULCAST_LAYERS = 3;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\nconst SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.enableFirefoxSimulcast if set to 'true' will enable\n * experimental simulcast support on Firefox.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = true;\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n    const Interop = require('@jitsi/sdp-interop').Interop;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast({ numOfLayers: SIMULCAST_LAYERS,\n        explodeRemoteSimulcast: false });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n    this.peerconnection.onaddstream\n        = event => this._remoteStreamAdded(event.stream);\n    this.peerconnection.onremovestream\n        = event => this._remoteStreamRemoved(event.stream);\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast\n        && browser.supportsSimulcast()\n\n        // Firefox has been added as supporting simulcast, but it is\n        // experimental so we only want to do it for firefox if the config\n        // option is set.  Unfortunately, browser::supportsSimulcast()\n        // doesn't have a reference to the config options, so we have\n        // to do it here\n        && (!browser.isFirefox()\n            || this.options.enableFirefoxSimulcast);\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased() || browser.isEdge()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = new SDP(this.remoteDescription.sdp);\n    const mediaLines\n        = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n */\nconst enforceSendRecv = function(localDescription) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        audioMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast_03) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        }\n\n        if (browser.doesVideoMuteByStreamRemove()) {\n            desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n            logger.debug(\n                'getLocalDescription::postTransform (munge local SDP)', desc);\n        }\n\n        // What comes out of this getter will be signalled over Jingle to\n        // the other peer, so we need to make sure the media direction is\n        // 'sendrecv' because we won't change the direction later and don't want\n        // the other peer to think we can't send or receive.\n        //\n        // Note that the description we set in chrome does have the accurate\n        // direction (e.g. 'recvonly'), since that is technically what is\n        // happening (check setLocalDescription impl).\n        desc = enforceSendRecv(desc);\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc || {};\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {boolean} <tt>true</tt> if the state of underlying PC has changed and\n * the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return false;\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return false;\n    }\n    this._addStream(webRtcStream);\n\n    return true;\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.supportsRtpSender() && oldTrack && newTrack) {\n        // Add and than remove stream in FF leads to wrong local SDP. In order\n        // to workaround the issue we need to use sender.replaceTrack().\n        const sender = this.findSenderByStream(oldTrack.getOriginalStream());\n        const stream = newTrack.getOriginalStream();\n\n        if (sender && stream) {\n            const track = stream.getTracks()[0];\n\n            if (track) {\n                return sender.replaceTrack(track, stream).then(() => {\n                    // Since there is no need to do renegotiations we need to\n                    // fix all ssrc-msid mappings here.\n                    // NOTE: after sender.replaceTrack the sdp will remain the\n                    // same but the stream attach to the new JitsiLocalTrack\n                    // will have different msid. Luckily on FF we are not doing\n                    // all the transformations related to video mute.\n\n                    const ssrc = this.localSSRCs.get(oldTrack.rtcId);\n\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this.localSSRCs.delete(oldTrack.rtcId);\n                    this._addedStreams\n                        = this._addedStreams.filter(s => s !== stream);\n\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n\n                    // Override the msid of JitsiLocalTrack in order to be\n                    // consistent with the SDP values.\n                    newTrack.storedMSID = oldTrack.storedMSID;\n                    this._addedStreams.push(stream);\n\n                    this.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        extractPrimarySSRC(ssrc));\n\n                    return false;\n                });\n            }\n        }\n    }\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {boolean} <tt>true</tt> if the underlying PeerConnection's state has\n * changed and the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return false;\n    }\n\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return true;\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return false;\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    localSdp = this._adjustLocalMediaDirection(localSdp);\n\n    localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n\n    // if we're using unified plan, transform to it first.\n    if (browser.usesUnifiedPlan()) {\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Takes in a *unified plan* offer and inserts the appropriate\n * parameters for adding simulcast receive support.\n * @param {Object} desc - A session description object\n * @param {String} desc.type - the type (offer/answer)\n * @param {String} desc.sdp - the sdp content\n *\n * @return {Object} A session description (same format as above) object\n * with its sdp field modified to advertise simulcast receive support\n */\nTraceablePeerConnection.prototype._insertUnifiedPlanSimulcastReceive\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // In order of lowest to highest spatial quality\n        video.rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n        // eslint-disable-next-line camelcase\n        video.simulcast_03 = {\n            value: `recv rid=${SIM_LAYER_RIDS.join(';')}`\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // TODO the focus should squeze or explode the remote simulcast\n    // eslint-disable-next-line no-param-reassign\n    description = this.simulcast.mungeRemoteDescription(description);\n    this.trace(\n        'setRemoteDescription::postTransform (simulcast)',\n        dumpSDP(description));\n\n    if (this.options.preferH264) {\n        const parsedSdp = transform.parse(description.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    // If the browser uses unified plan, transform to it first\n    if (browser.usesUnifiedPlan()) {\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: this.rtxModifier.stripRtx(description.sdp)\n        });\n\n        this.trace(\n            'setRemoteDescription::postTransform (stripRtx)',\n            dumpSDP(description));\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description);\n        this.trace(\n            'setRemoteDescription::postTransform (Plan A)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    } else {\n        // Plan B\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    }\n\n    // Safari WebRTC errors when no supported video codec is found in the offer.\n    // To prevent the error, inject H264 into the video mLine.\n    if (browser.isSafariWithWebrtc() && !browser.isSafariWithVP8()) {\n        logger.debug('Maybe injecting H264 into the remote description');\n\n        // eslint-disable-next-line no-param-reassign\n        description = this._injectH264IfNotPresent(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Inserts an H264 payload into the description if not already present. This is\n * need for Safari WebRTC, which errors when no supported video codec is found\n * in the offer. Related bug reports:\n * https://bugs.webkit.org/show_bug.cgi?id=173141\n * https://bugs.chromium.org/p/webrtc/issues/detail?id=4957\n *\n * @param {RTCSessionDescription} description - An RTCSessionDescription\n * to inject with an H264 payload.\n * @private\n * @returns {RTCSessionDescription}\n */\nTraceablePeerConnection.prototype._injectH264IfNotPresent = function(\n        description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n    if (!videoMLine) {\n        logger.debug('No videoMLine found, no need to inject H264.');\n\n        return description;\n    }\n\n    if (videoMLine.rtp.some(rtp => rtp.codec.toLowerCase() === 'h264')) {\n        logger.debug('H264 codec found in video mLine, no need to inject.');\n\n        return description;\n    }\n\n    const { fmtp, payloads, rtp } = videoMLine;\n    const payloadsArray = payloads.toString().split(' ');\n    let dummyPayloadType;\n\n    for (let i = 127; i >= 96; i--) {\n        if (!payloadsArray.includes(i)) {\n            dummyPayloadType = i;\n            payloadsArray.push(i);\n            videoMLine.payloads = payloadsArray.join(' ');\n            break;\n        }\n    }\n\n    if (typeof dummyPayloadType === 'undefined') {\n        logger.error('Could not find valid payload type to inject.');\n\n        return description;\n    }\n\n    rtp.push({\n        codec: 'H264',\n        payload: dummyPayloadType,\n        rate: 90000\n    });\n\n    fmtp.push({\n        config: 'level-asymmetry-allowed=1;'\n            + 'packetization-mode=1;'\n            + 'profile-level-id=42e01f',\n        payload: dummyPayloadType\n    });\n\n    logger.debug(\n        `Injecting H264 payload type ${dummyPayloadType} into video mLine.`);\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    if (browser.isFirefox() && this.isSimulcastOn()) {\n        const videoSender\n            = this.peerconnection.getSenders().find(sender =>\n                sender.track !== null && sender.track.kind === 'video');\n        const simParams = {\n            encodings: [\n                {\n                    rid: SIM_LAYER_1_RID,\n                    scaleResolutionDownBy: 4\n                },\n                {\n                    rid: SIM_LAYER_2_RID,\n                    scaleResolutionDownBy: 2\n                },\n                {\n                    rid: SIM_LAYER_3_RID\n                }\n            ]\n        };\n\n        videoSender.setParameters(simParams);\n    }\n\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            // if we're using unified plan, transform to Plan B.\n            if (browser.usesUnifiedPlan()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.interop.toPlanB(resultSdp);\n                this.trace(\n                    `create${logName}OnSuccess::postTransform (Plan B)`,\n                    dumpSDP(resultSdp));\n                if (this.isSimulcastOn()) {\n                    // eslint-disable-next-line no-param-reassign\n                    resultSdp\n                        = this._injectSsrcGroupForUnifiedSimulcast(resultSdp);\n                    this.trace(\n                        `create${logName}OnSuccess::postTransform`\n                        + '(inject ssrc group)', dumpSDP(resultSdp));\n                }\n            }\n\n            /**\n             * We don't keep ssrcs consitent for Firefox because rewriting\n             *  the ssrcs between createAnswer and setLocalDescription breaks\n             *  the caching in sdp-interop (sdp-interop must know about all\n             *  ssrcs, and it updates its cache in toPlanB so if we rewrite them\n             *  after that, when we try and go back to unified plan it will\n             *  complain about unmapped ssrcs)\n             */\n            if (!browser.usesUnifiedPlan()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Add simulcast streams if simulcast is enabled\n            if (this.isSimulcastOn()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nfunction extractPrimarySSRC(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n}\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafariWithWebrtc() || browser.isFirefox()\n            || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n    if (this.isSimulcastOn()) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIMULCAST_LAYERS; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindMuteHandlers();\n        }\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track muted handlers.\n     *\n     * @returns {void}\n     */\n    _bindMuteHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(\n            `\"onmute\" event(${Date.now()}): `,\n            this.getParticipantId(), this.getType(), this.getSSRC());\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(\n            `\"onunmute\" event(${Date.now()}): `,\n            this.getParticipantId(), this.getType(), this.getSSRC());\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[${\n            this.ownerEndpointId}, ${\n            this.getType()}, p2p: ${\n            this.isP2P}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.startBitrate && options.startBitrate > 0) {\n            startBitrate = options.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                if (this._conference.isJvbConnectionInterrupted) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(\n                            'Sending ICE failed'\n                            + ' - the connection has not recovered');\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                } else {\n                    logger.info(\n                        'ICE connection restored - not sending ICE failed');\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     */\n    _emitSessionUpdate(session) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { sessionID, status, error, recordingMode } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\n\nimport { createRtpStatsEvent } from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._onLocalStatsUpdated = data => this._calculateAvgStats(data);\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        let savedUser = this.stats.users[userId];\n\n        if (!savedUser) {\n            savedUser = this.stats.users[userId]\n                = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n\n            if (this.stats.users[userId]) {\n                speakerStatsToUpdate = this.stats.users[userId];\n\n                if (!speakerStatsToUpdate.getDisplayName()) {\n                    speakerStatsToUpdate\n                        .setDisplayName(newStats[userId].displayName);\n                }\n            } else {\n                speakerStatsToUpdate = new SpeakerStats(\n                    userId, newStats[userId].displayName);\n                this.stats.users[userId] = speakerStatsToUpdate;\n                speakerStatsToUpdate.markAsHasLeft();\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The constant for the name of the focus component.\n * @type {string}\n */\nComponentsVersions.FOCUS_COMPONENT = 'focus';\n\n/**\n * The constant for the name of the videobridge component.\n * @type {string}\n */\nComponentsVersions.VIDEOBRIDGE_COMPONENT = 'videobridge';\n\n/**\n * The constant for the name of the XMPP server component.\n * @type {string}\n */\nComponentsVersions.XMPP_SERVER_COMPONENT = 'xmpp';\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processPresence.bind(this));\n}\n\nComponentsVersions.prototype.processPresence\n    = function(node, mucResource, mucJid) {\n        if (node.attributes.xmlns !== 'http://jitsi.org/jitmeet') {\n            logger.warn('Ignored presence versions node - invalid xmlns', node);\n\n            return;\n        }\n\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${node}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        node.children.forEach(item => {\n\n            const componentName = item.attributes.name;\n\n            if (componentName !== ComponentsVersions.FOCUS_COMPONENT\n            && componentName !== ComponentsVersions.XMPP_SERVER_COMPONENT\n            && componentName !== ComponentsVersions.VIDEOBRIDGE_COMPONENT) {\n                logger.warn(\n                    `Received version for not supported component name: ${\n                        componentName}`);\n\n                return;\n            }\n\n            const version = item.value;\n\n            if (this.versions[componentName] !== version) {\n                this.versions[componentName] = version;\n                logger.info(`Got ${componentName} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: componentName,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference} to be passed in. {@code ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(this, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar adapterFactory = require('./adapter_factory.js');\nmodule.exports = adapterFactory({window: global.window});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar utils = require('./utils');\n// Shimming starts here.\nmodule.exports = function(dependencies, opts) {\n  var window = dependencies && dependencies.window;\n\n  var options = {\n    shimChrome: true,\n    shimFirefox: true,\n    shimEdge: true,\n    shimSafari: true,\n  };\n\n  for (var key in opts) {\n    if (hasOwnProperty.call(opts, key)) {\n      options[key] = opts[key];\n    }\n  }\n\n  // Utils.\n  var logging = utils.log;\n  var browserDetails = utils.detectBrowser(window);\n\n  // Export to the adapter global object visible in the browser.\n  var adapter = {\n    browserDetails: browserDetails,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n  var commonShim = require('./common_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimSourceObject(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n      commonShim.shimCreateObjectURL(window);\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimSourceObject(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n      commonShim.shimCreateObjectURL(window);\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      safariShim.shimCreateOfferLegacy(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n};\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\nvar chromeShim = {\n  shimMediaStream: function(window) {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n          }\n          this.addEventListener('track', this._ontrack = f);\n        }\n      });\n      var origSetRemoteDescription =\n          window.RTCPeerConnection.prototype.setRemoteDescription;\n      window.RTCPeerConnection.prototype.setRemoteDescription = function() {\n        var pc = this;\n        if (!pc._ontrackpoly) {\n          pc._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === te.track.id;\n                });\n              } else {\n                receiver = {track: te.track};\n              }\n\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === track.id;\n                });\n              } else {\n                receiver = {track: track};\n              }\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n          };\n          pc.addEventListener('addstream', pc._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n    }\n  },\n\n  shimGetSendersWithDtmf: function(window) {\n    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        !('getSenders' in window.RTCPeerConnection.prototype) &&\n        'createDTMFSender' in window.RTCPeerConnection.prototype) {\n      var shimSenderWithDtmf = function(pc, track) {\n        return {\n          track: track,\n          get dtmf() {\n            if (this._dtmf === undefined) {\n              if (track.kind === 'audio') {\n                this._dtmf = pc.createDTMFSender(track);\n              } else {\n                this._dtmf = null;\n              }\n            }\n            return this._dtmf;\n          },\n          _pc: pc\n        };\n      };\n\n      // augment addTrack when getSenders is not available.\n      if (!window.RTCPeerConnection.prototype.getSenders) {\n        window.RTCPeerConnection.prototype.getSenders = function() {\n          this._senders = this._senders || [];\n          return this._senders.slice(); // return a copy of the internal state.\n        };\n        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n          var pc = this;\n          var sender = origAddTrack.apply(pc, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(pc, track);\n            pc._senders.push(sender);\n          }\n          return sender;\n        };\n\n        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n        window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n          var pc = this;\n          origRemoveTrack.apply(pc, arguments);\n          var idx = pc._senders.indexOf(sender);\n          if (idx !== -1) {\n            pc._senders.splice(idx, 1);\n          }\n        };\n      }\n      var origAddStream = window.RTCPeerConnection.prototype.addStream;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origAddStream.apply(pc, [stream]);\n        stream.getTracks().forEach(function(track) {\n          pc._senders.push(shimSenderWithDtmf(pc, track));\n        });\n      };\n\n      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origRemoveStream.apply(pc, [stream]);\n\n        stream.getTracks().forEach(function(track) {\n          var sender = pc._senders.find(function(s) {\n            return s.track === track;\n          });\n          if (sender) {\n            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender\n          }\n        });\n      };\n    } else if (typeof window === 'object' && window.RTCPeerConnection &&\n               'getSenders' in window.RTCPeerConnection.prototype &&\n               'createDTMFSender' in window.RTCPeerConnection.prototype &&\n               window.RTCRtpSender &&\n               !('dtmf' in window.RTCRtpSender.prototype)) {\n      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n      window.RTCPeerConnection.prototype.getSenders = function() {\n        var pc = this;\n        var senders = origGetSenders.apply(pc, []);\n        senders.forEach(function(sender) {\n          sender._pc = pc;\n        });\n        return senders;\n      };\n\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = this._pc.createDTMFSender(this.track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    var URL = window && window.URL;\n\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return undefined;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimAddTrackRemoveTrack: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n    // shim addTrack and removeTrack.\n    if (window.RTCPeerConnection.prototype.addTrack &&\n        browserDetails.version >= 63) {\n      return;\n    }\n\n    // also shim pc.getLocalStreams when addTrack is shimmed\n    // to return the original streams.\n    var origGetLocalStreams = window.RTCPeerConnection.prototype\n        .getLocalStreams;\n    window.RTCPeerConnection.prototype.getLocalStreams = function() {\n      var self = this;\n      var nativeStreams = origGetLocalStreams.apply(this);\n      self._reverseStreams = self._reverseStreams || {};\n      return nativeStreams.map(function(stream) {\n        return self._reverseStreams[stream.id];\n      });\n    };\n\n    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      stream.getTracks().forEach(function(track) {\n        var alreadyExists = pc.getSenders().find(function(s) {\n          return s.track === track;\n        });\n        if (alreadyExists) {\n          throw new DOMException('Track already exists.',\n              'InvalidAccessError');\n        }\n      });\n      // Add identity mapping for consistency with addTrack.\n      // Unless this is being used with a stream from addTrack.\n      if (!pc._reverseStreams[stream.id]) {\n        var newStream = new window.MediaStream(stream.getTracks());\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        stream = newStream;\n      }\n      origAddStream.apply(pc, [stream]);\n    };\n\n    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);\n      delete pc._reverseStreams[(pc._streams[stream.id] ?\n          pc._streams[stream.id].id : stream.id)];\n      delete pc._streams[stream.id];\n    };\n\n    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      var streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(function(t) {\n            return t === track;\n          })) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      var alreadyExists = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n      var oldStream = pc._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(function() {\n          pc.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        var newStream = new window.MediaStream([track]);\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        pc.addStream(newStream);\n      }\n      return pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n    };\n\n    // replace the internal stream id with the external one and\n    // vice versa.\n    function replaceInternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n            externalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    function replaceExternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n            internalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = window.RTCPeerConnection.prototype[method];\n      window.RTCPeerConnection.prototype[method] = function() {\n        var pc = this;\n        var args = arguments;\n        var isLegacyCall = arguments.length &&\n            typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(pc, [\n            function(description) {\n              var desc = replaceInternalStreamId(pc, description);\n              args[0].apply(null, [desc]);\n            },\n            function(err) {\n              if (args[1]) {\n                args[1].apply(null, err);\n              }\n            }, arguments[2]\n          ]);\n        }\n        return nativeMethod.apply(pc, arguments)\n        .then(function(description) {\n          return replaceInternalStreamId(pc, description);\n        });\n      };\n    });\n\n    var origSetLocalDescription =\n        window.RTCPeerConnection.prototype.setLocalDescription;\n    window.RTCPeerConnection.prototype.setLocalDescription = function() {\n      var pc = this;\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(pc, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(pc, arguments[0]);\n      return origSetLocalDescription.apply(pc, arguments);\n    };\n\n    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n    var origLocalDescription = Object.getOwnPropertyDescriptor(\n        window.RTCPeerConnection.prototype, 'localDescription');\n    Object.defineProperty(window.RTCPeerConnection.prototype,\n        'localDescription', {\n          get: function() {\n            var pc = this;\n            var description = origLocalDescription.get.apply(this);\n            if (description.type === '') {\n              return description;\n            }\n            return replaceInternalStreamId(pc, description);\n          }\n        });\n\n    window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      var isLocal = sender._pc === pc;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      pc._streams = pc._streams || {};\n      var stream;\n      Object.keys(pc._streams).forEach(function(streamid) {\n        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {\n          return sender.track === track;\n        });\n        if (hasTrack) {\n          stream = pc._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          pc.removeStream(pc._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        pc.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        // Translate iceTransportPolicy to iceTransports,\n        // see https://code.google.com/p/webrtc/issues/detail?id=4869\n        // this was fixed in M56 along with unprefixing RTCPeerConnection.\n        logging('PeerConnection');\n        if (pcConfig && pcConfig.iceTransportPolicy) {\n          pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n        }\n\n        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.webkitRTCPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      if (window.webkitRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.webkitRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n    } else {\n      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n      var OrigPeerConnection = window.RTCPeerConnection;\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (pcConfig && pcConfig.iceServers) {\n          var newIceServers = [];\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\n            var server = pcConfig.iceServers[i];\n            if (!server.hasOwnProperty('urls') &&\n                server.hasOwnProperty('url')) {\n              utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n              server = JSON.parse(JSON.stringify(server));\n              server.urls = server.url;\n              newIceServers.push(server);\n            } else {\n              newIceServers.push(pcConfig.iceServers[i]);\n            }\n          }\n          pcConfig.iceServers = newIceServers;\n        }\n        return new OrigPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    var origGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(selector,\n        successCallback, errorCallback) {\n      var self = this;\n      var args = arguments;\n\n      // If selector is a function then we are in the old style stats so just\n      // pass back the original getStats format to avoid breaking old users.\n      if (arguments.length > 0 && typeof selector === 'function') {\n        return origGetStats.apply(this, arguments);\n      }\n\n      // When spec-style getStats is supported, return those when called with\n      // either no arguments or the selector argument is null.\n      if (origGetStats.length === 0 && (arguments.length === 0 ||\n          typeof arguments[0] !== 'function')) {\n        return origGetStats.apply(this, []);\n      }\n\n      var fixChromeStats_ = function(response) {\n        var standardReport = {};\n        var reports = response.result();\n        reports.forEach(function(report) {\n          var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp,\n            type: {\n              localcandidate: 'local-candidate',\n              remotecandidate: 'remote-candidate'\n            }[report.type] || report.type\n          };\n          report.names().forEach(function(name) {\n            standardStats[name] = report.stat(name);\n          });\n          standardReport[standardStats.id] = standardStats;\n        });\n\n        return standardReport;\n      };\n\n      // shim getStats with maplike support\n      var makeMapStats = function(stats) {\n        return new Map(Object.keys(stats).map(function(key) {\n          return [key, stats[key]];\n        }));\n      };\n\n      if (arguments.length >= 2) {\n        var successCallbackWrapper_ = function(response) {\n          args[1](makeMapStats(fixChromeStats_(response)));\n        };\n\n        return origGetStats.apply(this, [successCallbackWrapper_,\n          arguments[0]]);\n      }\n\n      // promise-support\n      return new Promise(function(resolve, reject) {\n        origGetStats.apply(self, [\n          function(response) {\n            resolve(makeMapStats(fixChromeStats_(response)));\n          }, reject]);\n      }).then(successCallback, errorCallback);\n    };\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = window.RTCPeerConnection.prototype[method];\n            window.RTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // promise support for createOffer and createAnswer. Available (without\n    // bugs) since M52: crbug/619289\n    if (browserDetails.version < 52) {\n      ['createOffer', 'createAnswer'].forEach(function(method) {\n        var nativeMethod = window.RTCPeerConnection.prototype[method];\n        window.RTCPeerConnection.prototype[method] = function() {\n          var self = this;\n          if (arguments.length < 1 || (arguments.length === 1 &&\n              typeof arguments[0] === 'object')) {\n            var opts = arguments.length === 1 ? arguments[0] : undefined;\n            return new Promise(function(resolve, reject) {\n              nativeMethod.apply(self, [resolve, reject, opts]);\n            });\n          }\n          return nativeMethod.apply(this, arguments);\n        };\n      });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimAddTrackRemoveTrack: chromeShim.shimAddTrackRemoveTrack,\n  shimGetSendersWithDtmf: chromeShim.shimGetSendersWithDtmf,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      var remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      var getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        var matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var dev = devices.find(function(d) {\n              return matches.some(function(match) {\n                return d.label.toLowerCase().indexOf(match) !== -1;\n              });\n            });\n            if (!dev && devices.length && matches.indexOf('back') !== -1) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        InvalidStateError: 'NotReadableError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotReadableError',\n        MediaDeviceKillSwitchOn: 'NotReadableError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return window.MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                kind: kinds[device.kind],\n                deviceId: device.id,\n                groupId: ''};\n            }));\n          });\n        });\n      },\n      getSupportedConstraints: function() {\n        return {\n          deviceId: true, echoCancellation: true, facingMode: true,\n          frameRate: true, height: true, width: true\n        };\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).then(function(stream) {\n          if (c.audio && !stream.getAudioTracks().length ||\n              c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function(track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n          return stream;\n        }, function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar shimRTCPeerConnection = require('rtcpeerconnection-shim');\n\nmodule.exports = {\n  shimGetUserMedia: require('./getusermedia'),\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n      // this adds an additional event listener to MediaStrackTrack that signals\n      // when a tracks enabled property was changed. Workaround for a bug in\n      // addStream, see below. No longer required in 15025+\n      if (browserDetails.version < 15025) {\n        var origMSTEnabled = Object.getOwnPropertyDescriptor(\n            window.MediaStreamTrack.prototype, 'enabled');\n        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n          set: function(value) {\n            origMSTEnabled.set.call(this, value);\n            var ev = new Event('enabled');\n            ev.enabled = value;\n            this.dispatchEvent(ev);\n          }\n        });\n      }\n    }\n\n    // ORTC defines the DTMF sender a bit different.\n    // https://github.com/w3c/ortc/issues/714\n    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = new window.RTCDtmfSender(this);\n            } else if (this.track.kind === 'video') {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n\n    window.RTCPeerConnection =\n        shimRTCPeerConnection(window, browserDetails.version);\n  },\n  shimReplaceTrack: function(window) {\n    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n    if (window.RTCRtpSender &&\n        !('replaceTrack' in window.RTCRtpSender.prototype)) {\n      window.RTCRtpSender.prototype.replaceTrack =\n          window.RTCRtpSender.prototype.setTrack;\n    }\n  }\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var navigator = window && window.navigator;\n\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\n\nvar firefoxShim = {\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.transceiver = {receiver: event.receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n    if (typeof window === 'object' && window.RTCTrackEvent &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        !('transceiver' in window.RTCTrackEvent.prototype)) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (window.mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = window.mozRTCSessionDescription;\n      window.RTCIceCandidate = window.mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    // shim getStats with maplike support\n    var makeMapStats = function(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function(key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var modernStatsTypes = {\n      inboundrtp: 'inbound-rtp',\n      outboundrtp: 'outbound-rtp',\n      candidatepair: 'candidate-pair',\n      localcandidate: 'local-candidate',\n      remotecandidate: 'remote-candidate'\n    };\n\n    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(\n      selector,\n      onSucc,\n      onErr\n    ) {\n      return nativeGetStats.apply(this, [selector || null])\n        .then(function(stats) {\n          if (browserDetails.version < 48) {\n            stats = makeMapStats(stats);\n          }\n          if (browserDetails.version < 53 && !onSucc) {\n            // Shim only promise getStats with spec-hyphens in type names\n            // Leave callback version alone; misc old uses of forEach before Map\n            try {\n              stats.forEach(function(stat) {\n                stat.type = modernStatsTypes[stat.type] || stat.type;\n              });\n            } catch (e) {\n              if (e.name !== 'TypeError') {\n                throw e;\n              }\n              // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n              stats.forEach(function(stat, i) {\n                stats.set(i, Object.assign({}, stat, {\n                  type: modernStatsTypes[stat.type] || stat.type\n                }));\n              });\n            }\n          }\n          return stats;\n        })\n        .then(onSucc, onErr);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n  var MediaStreamTrack = window && window.MediaStreamTrack;\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        InternalError: 'NotReadableError',\n        NotSupportedError: 'TypeError',\n        PermissionDeniedError: 'NotAllowedError',\n        SecurityError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).then(function(stream) {\n        // Work around https://bugzil.la/802326\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(function(track) {\n            track.stop();\n          });\n          throw new DOMException('The object can not be found here.',\n                                 'NotFoundError');\n        }\n        return stream;\n      }, function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    var remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        var obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nvar utils = require('../utils');\n\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimLocalStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getLocalStreams = function() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n    }\n    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getStreamById = function(id) {\n        var result = null;\n        if (this._localStreams) {\n          this._localStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        if (this._remoteStreams) {\n          this._remoteStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        return result;\n      };\n    }\n    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n      var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        if (this._localStreams.indexOf(stream) === -1) {\n          this._localStreams.push(stream);\n        }\n        var self = this;\n        stream.getTracks().forEach(function(track) {\n          _addTrack.call(self, track, stream);\n        });\n      };\n\n      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (this._localStreams.indexOf(stream) === -1) {\n            this._localStreams.push(stream);\n          }\n        }\n        _addTrack.call(this, track, stream);\n      };\n    }\n    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        var index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        var self = this;\n        var tracks = stream.getTracks();\n        this.getSenders().forEach(function(sender) {\n          if (tracks.indexOf(sender.track) !== -1) {\n            self.removeTrack(sender);\n          }\n        });\n      };\n    }\n  },\n  shimRemoteStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getRemoteStreams = function() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n    }\n    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n        get: function() {\n          return this._onaddstream;\n        },\n        set: function(f) {\n          if (this._onaddstream) {\n            this.removeEventListener('addstream', this._onaddstream);\n            this.removeEventListener('track', this._onaddstreampoly);\n          }\n          this.addEventListener('addstream', this._onaddstream = f);\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            var stream = e.streams[0];\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            var event = new Event('addstream');\n            event.stream = e.streams[0];\n            this.dispatchEvent(event);\n          }.bind(this));\n        }\n      });\n    }\n  },\n  shimCallbacksAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    var prototype = window.RTCPeerConnection.prototype;\n    var createOffer = prototype.createOffer;\n    var createAnswer = prototype.createAnswer;\n    var setLocalDescription = prototype.setLocalDescription;\n    var setRemoteDescription = prototype.setRemoteDescription;\n    var addIceCandidate = prototype.addIceCandidate;\n\n    prototype.createOffer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.createAnswer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    var withCallback = function(description, successCallback, failureCallback) {\n      var promise = setLocalDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setLocalDescription = withCallback;\n\n    withCallback = function(description, successCallback, failureCallback) {\n      var promise = setRemoteDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setRemoteDescription = withCallback;\n\n    withCallback = function(candidate, successCallback, failureCallback) {\n      var promise = addIceCandidate.apply(this, [candidate]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.addIceCandidate = withCallback;\n  },\n  shimGetUserMedia: function(window) {\n    var navigator = window && window.navigator;\n\n    if (!navigator.getUserMedia) {\n      if (navigator.webkitGetUserMedia) {\n        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n      } else if (navigator.mediaDevices &&\n          navigator.mediaDevices.getUserMedia) {\n        navigator.getUserMedia = function(constraints, cb, errcb) {\n          navigator.mediaDevices.getUserMedia(constraints)\n          .then(cb, errcb);\n        }.bind(navigator);\n      }\n    }\n  },\n  shimRTCIceServerUrls: function(window) {\n    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n    var OrigPeerConnection = window.RTCPeerConnection;\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        var newIceServers = [];\n        for (var i = 0; i < pcConfig.iceServers.length; i++) {\n          var server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n    // wrap static methods. Currently just generateCertificate.\n    if ('generateCertificate' in window.RTCPeerConnection) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n  },\n  shimTrackEventTransceiver: function(window) {\n    // Add event.transceiver member over deprecated event.receiver\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n        // defined for some reason even when window.RTCTransceiver is not.\n        !window.RTCTransceiver) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimCreateOfferLegacy: function(window) {\n    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {\n      var pc = this;\n      if (offerOptions) {\n        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'audio';\n        });\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            audioTransceiver.setDirection('sendonly');\n          } else if (audioTransceiver.direction === 'recvonly') {\n            audioTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          pc.addTransceiver('audio');\n        }\n\n        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'video';\n        });\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            videoTransceiver.setDirection('sendonly');\n          } else if (videoTransceiver.direction === 'recvonly') {\n            videoTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          pc.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(pc, arguments);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimCallbacksAPI: safariShim.shimCallbacksAPI,\n  shimLocalStreamsAPI: safariShim.shimLocalStreamsAPI,\n  shimRemoteStreamsAPI: safariShim.shimRemoteStreamsAPI,\n  shimGetUserMedia: safariShim.shimGetUserMedia,\n  shimRTCIceServerUrls: safariShim.shimRTCIceServerUrls,\n  shimTrackEventTransceiver: safariShim.shimTrackEventTransceiver,\n  shimCreateOfferLegacy: safariShim.shimCreateOfferLegacy\n  // TODO\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar utils = require('./utils');\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object.\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  var proto = window.RTCPeerConnection.prototype;\n  var nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    var wrappedCallback = function(e) {\n      cb(wrapper(e));\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  var nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    var unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get: function() {\n      return this['_on' + eventNameToWrap];\n    },\n    set: function(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  shimRTCIceCandidate: function(window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (window.RTCIceCandidate && 'foundation' in\n        window.RTCIceCandidate.prototype) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n    window.RTCIceCandidate = function(args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate &&\n          args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      // Augment the native candidate with the parsed fields.\n      var nativeCandidate = new NativeRTCIceCandidate(args);\n      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      var augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    };\n\n    // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n    wrapPeerConnectionEvent(window, 'icecandidate', function(e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n      return e;\n    });\n  },\n\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n  shimCreateObjectURL: function(window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n          'srcObject' in window.HTMLMediaElement.prototype &&\n        URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(), newId = 0;\n\n    URL.createObjectURL = function(stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + (++newId);\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)',\n            'elem.srcObject = stream');\n        return url;\n      }\n      return nativeCreateObjectURL(stream);\n    };\n    URL.revokeObjectURL = function(url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                                              'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function() {\n        return dsc.get.apply(this);\n      },\n      set: function(url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n    window.HTMLMediaElement.prototype.setAttribute = function() {\n      if (arguments.length === 2 &&\n          ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  }\n};\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.Interop = require('./interop');\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global RTCSessionDescription */\n/* global RTCIceCandidate */\n/* jshint -W097 */\n\"use strict\";\n\nvar transform = require('./transform');\nvar arrayEquals = require('./array-equals');\n\n/**\n * Unified Plan mids may be parsed as integers\n */\nfunction midToString(line) {\n    if (typeof line.mid === 'number') {\n        line.mid = line.mid.toString();\n    }\n}\n\n\nfunction Interop() {\n\n    /**\n     * This map holds the most recent Unified Plan offer/answer SDP that was\n     * converted to Plan B, with the SDP type ('offer' or 'answer') as keys and\n     * the SDP string as values.\n     *\n     * @type {{}}\n     */\n    this.cache = {\n        mlB2UMap : {},\n        mlU2BMap : {}\n    };\n}\n\nmodule.exports = Interop;\n\n/**\n * Changes the candidate args to match with the related Unified Plan\n */\nInterop.prototype.candidateToUnifiedPlan = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    cand.sdpMLineIndex = this.cache.mlB2UMap[cand.sdpMLineIndex];\n    /* TODO: change sdpMid to (audio|video)-SSRC */\n\n    return cand;\n};\n\n/**\n * Changes the candidate args to match with the related Plan B\n */\nInterop.prototype.candidateToPlanB = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    if (cand.sdpMid.indexOf('audio') === 0) {\n      cand.sdpMid = 'audio';\n    } else if (cand.sdpMid.indexOf('video') === 0) {\n      cand.sdpMid = 'video';\n    } else {\n      throw new Error('candidate with ' + cand.sdpMid + ' not allowed');\n    }\n\n    cand.sdpMLineIndex = this.cache.mlU2BMap[cand.sdpMLineIndex];\n\n    return cand;\n};\n\n/**\n * Returns the index of the first m-line with the given media type and with a\n * direction which allows sending, in the last Unified Plan description with\n * type \"answer\" converted to Plan B. Returns {null} if there is no saved\n * answer, or if none of its m-lines with the given type allow sending.\n * @param type the media type (\"audio\" or \"video\").\n * @returns {*}\n */\nInterop.prototype.getFirstSendingIndexFromAnswer = function(type) {\n    if (!this.cache.answer) {\n        return null;\n    }\n\n    var session = transform.parse(this.cache.answer);\n    if (session && session.media && Array.isArray(session.media)){\n        for (var i = 0; i < session.media.length; i++) {\n            if (session.media[i].type == type &&\n                (!session.media[i].direction /* default to sendrecv */ ||\n                    session.media[i].direction === 'sendrecv' ||\n                    session.media[i].direction === 'sendonly')){\n                return i;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * This method transforms a Unified Plan SDP to an equivalent Plan B SDP. A\n * PeerConnection wrapper transforms the SDP to Plan B before passing it to the\n * application.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toPlanB = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    // Objectify the SDP for easier manipulation.\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Unified Plan SDP. Plan B\n    // SDP has a video, an audio and a data \"channel\" at most.\n    if (session.media.length <= 3 && session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Unified Plan.');\n        return desc;\n    }\n\n    //#endregion\n\n    // HACK https://bugzilla.mozilla.org/show_bug.cgi?id=1113443\n    var sdp = desc.sdp;\n    var rewrite = false;\n    for (var i = 0; i < session.media.length; i++) {\n        var uLine = session.media[i];\n        uLine.rtp.forEach(function(rtp) {\n            if (rtp.codec === 'NULL')\n            {\n                rewrite = true;\n                var offer = transform.parse(self.cache.offer);\n                rtp.codec = offer.media[i].rtp[0].codec;\n            }\n        });\n    }\n    if (rewrite) {\n        sdp = transform.write(session);\n    }\n\n    // Unified Plan SDP is our \"precious\". Cache it for later use in the Plan B\n    // -> Unified Plan transformation.\n    this.cache[desc.type] = sdp;\n\n    //#region Convert from Unified Plan to Plan B.\n\n    // We rebuild the session.media array.\n    var media = session.media;\n    session.media = [];\n\n    // Associative array that maps channel types to channel objects for fast\n    // access to channel objects by their type, e.g. type2bl['audio']->channel\n    // obj.\n    var type2bl = {};\n\n    // Used to build the group:BUNDLE value after the channels construction\n    // loop.\n    var types = [];\n\n    // Used to aggregate the directions of the m-lines.\n    var directionResult = {};\n\n    media.forEach(function(uLine) {\n        midToString(uLine);\n        // rtcp-mux is required in the Plan B SDP.\n        if ((typeof uLine.rtcpMux !== 'string' ||\n            uLine.rtcpMux !== 'rtcp-mux') &&\n            uLine.direction !== 'inactive' && uLine.type !== 'application') {\n            throw new Error('Cannot convert to Plan B because m-lines ' +\n                'without the rtcp-mux attribute were found.');\n        }\n\n        // If we don't have a channel for this uLine.type OR the selected is\n        // inactive, then select this uLine as the channel basis.\n        if (typeof type2bl[uLine.type] === 'undefined' ||\n            type2bl[uLine.type].direction === 'inactive') {\n            type2bl[uLine.type] = uLine;\n        }\n    });\n\n    // Implode the Unified Plan m-lines/tracks into Plan B channels.\n    media.forEach(function(uLine) {\n        var type = uLine.type;\n\n        if (type === 'application') {\n            uLine.mid = \"data\";\n            session.media.push(uLine);\n            types.push(uLine.mid);\n            return;\n        }\n\n        // Add sources to the channel and handle a=msid.\n        if (typeof uLine.sources === 'object') {\n            Object.keys(uLine.sources).forEach(function(ssrc) {\n                if (typeof type2bl[type].sources !== 'object')\n                    type2bl[type].sources = {};\n\n                // Assign the sources to the channel.\n                type2bl[type].sources[ssrc] = uLine.sources[ssrc];\n\n                if (typeof uLine.msid !== 'undefined') {\n                    // In Plan B the msid is an SSRC attribute. Also, we don't\n                    // care about the obsolete label and mslabel attributes.\n                    //\n                    // Note that it is not guaranteed that the uLine will\n                    // have an msid. recvonly channels in particular don't have\n                    // one.\n                    type2bl[type].sources[ssrc].msid = uLine.msid;\n                }\n                // NOTE ssrcs in ssrc groups will share msids, as\n                // draft-uberti-rtcweb-plan-00 mandates.\n            });\n        }\n\n        // Add ssrc groups to the channel.\n        if (typeof uLine.ssrcGroups !== 'undefined' &&\n                Array.isArray(uLine.ssrcGroups)) {\n\n            // Create the ssrcGroups array, if it's not defined.\n            if (typeof type2bl[type].ssrcGroups === 'undefined' ||\n                    !Array.isArray(type2bl[type].ssrcGroups)) {\n                type2bl[type].ssrcGroups = [];\n            }\n\n            // Different ssrc may belong to the same group\n            if (!arrayEquals.apply(type2bl[type].ssrcGroups,\n                                   [uLine.ssrcGroups])) {\n                type2bl[type].ssrcGroups\n                    = type2bl[type].ssrcGroups.concat(uLine.ssrcGroups);\n            }\n        }\n\n        var direction = uLine.direction;\n\n        directionResult[type]\n            = (directionResult[type] || 0 /* inactive */)\n                | directionMasks[direction || 'inactive'];\n\n        if (type2bl[type] === uLine) {\n            // Plan B mids are in ['audio', 'video', 'data']\n            uLine.mid = type;\n\n            // Plan B doesn't support/need the bundle-only attribute.\n            delete uLine.bundleOnly;\n\n            // In Plan B the msid is an SSRC attribute.\n            delete uLine.msid;\n\n            if (direction !== 'inactive') {\n              // Used to build the group:BUNDLE value after this loop.\n              types.push(type);\n            }\n\n            // Add the channel to the new media array.\n            session.media.push(uLine);\n        }\n    });\n\n    // We regenerate the BUNDLE group with the new mids.\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = types.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * This method transforms a Plan B SDP to an equivalent Unified Plan SDP. A\n * PeerConnection wrapper transforms the SDP to Unified Plan before passing it\n * to FF.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toUnifiedPlan = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Plan B SDP. Plan B SDP has\n    // a video, an audio and a data \"channel\" at most.\n    if (session.media.length > 3 || !session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Plan B.');\n        return desc;\n    }\n\n    // Make sure this Plan B SDP can be converted to a Unified Plan SDP.\n    var mids = [];\n    session.media.forEach(function(m) {\n        mids.push(m.mid);\n    });\n\n    var hasBundle = false;\n    if (typeof session.groups !== 'undefined' &&\n        Array.isArray(session.groups)) {\n        hasBundle = session.groups.every(function(g) {\n            return g.type !== 'BUNDLE' ||\n                arrayEquals.apply(g.mids.sort(), [mids.sort()]);\n        });\n    }\n\n    if (!hasBundle) {\n        throw new Error(\"Cannot convert to Unified Plan because m-lines that\" +\n            \" are not bundled were found.\");\n    }\n\n    //#endregion\n\n\n    //#region Convert from Plan B to Unified Plan.\n\n    // Unfortunately, a Plan B offer/answer doesn't have enough information to\n    // rebuild an equivalent Unified Plan offer/answer.\n    //\n    // For example, if this is a local answer (in Unified Plan style) that we\n    // convert to Plan B prior to handing it over to the application (the\n    // PeerConnection wrapper called us, for instance, after a successful\n    // createAnswer), we want to remember the m-line at which we've seen the\n    // (local) SSRC. That's because when the application wants to do call the\n    // SLD method, forcing us to do the inverse transformation (from Plan B to\n    // Unified Plan), we need to know to which m-line to assign the (local)\n    // SSRC. We also need to know all the other m-lines that the original\n    // answer had and include them in the transformed answer as well.\n    //\n    // Another example is if this is a remote offer that we convert to Plan B\n    // prior to giving it to the application, we want to remember the mid at\n    // which we've seen the (remote) SSRC.\n    //\n    // In the iteration that follows, we use the cached Unified Plan (if it\n    // exists) to assign mids to ssrcs.\n\n    var cached;\n    if (typeof this.cache[desc.type] !== 'undefined') {\n        cached = transform.parse(this.cache[desc.type]);\n    }\n\n    var recvonlySsrcs = {\n        audio: {},\n        video: {}\n    };\n\n    // A helper map that sends mids to m-line objects. We use it later to\n    // rebuild the Unified Plan style session.media array.\n    var mid2ul = {};\n    var bIdx = 0;\n    var uIdx = 0;\n\n    session.media.forEach(function(bLine) {\n\n        if ((typeof bLine.rtcpMux !== 'string' ||\n            bLine.rtcpMux !== 'rtcp-mux') &&\n            bLine.direction !== 'inactive' && bLine.type !== 'application') {\n            throw new Error(\"Cannot convert to Unified Plan because m-lines \" +\n                \"without the rtcp-mux attribute were found.\");\n        }\n\n        if (bLine.type === 'application') {\n            var uLineData = null;\n            if (cached && cached.media) {\n                uLineData = cached.media.find(function(uLine) {\n                    return uLine.type === 'application';\n                });\n            }\n            if (uLineData) {\n                mid2ul[uLineData.mid] = uLineData;\n            } else {\n                mid2ul[bLine.mid] = bLine;\n            }\n            return;\n        }\n\n        // With rtcp-mux and bundle all the channels should have the same ICE\n        // stuff.\n        var sources = bLine.sources;\n        var ssrcGroups = bLine.ssrcGroups;\n        var candidates = bLine.candidates;\n        var iceUfrag = bLine.iceUfrag;\n        var icePwd = bLine.icePwd;\n        var fingerprint = bLine.fingerprint;\n        var port = bLine.port;\n\n        // We'll use the \"bLine\" object as a prototype for each new \"mLine\"\n        // that we create, but first we need to clean it up a bit.\n        delete bLine.sources;\n        delete bLine.ssrcGroups;\n        delete bLine.candidates;\n        delete bLine.iceUfrag;\n        delete bLine.icePwd;\n        delete bLine.fingerprint;\n        delete bLine.port;\n        delete bLine.mid;\n\n        // inverted ssrc group map\n        var ssrc2group = {};\n        if (typeof ssrcGroups !== 'undefined' && Array.isArray(ssrcGroups)) {\n            ssrcGroups.forEach(function (ssrcGroup) {\n\n                // TODO(gp) find out how to receive simulcast with FF. For the\n                // time being, hide it.\n                if (ssrcGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                // XXX This might brake if an SSRC is in more than one group\n                // for some reason.\n                if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                    Array.isArray(ssrcGroup.ssrcs)) {\n                    ssrcGroup.ssrcs.forEach(function (ssrc) {\n                        if (typeof ssrc2group[ssrc] === 'undefined') {\n                            ssrc2group[ssrc] = [];\n                        }\n\n                        ssrc2group[ssrc].push(ssrcGroup);\n                    });\n                }\n            });\n        }\n\n        // ssrc to m-line index.\n        var ssrc2ml = {};\n\n        if (typeof sources === 'object') {\n\n            // Explode the Plan B channel sources with one m-line per source.\n            Object.keys(sources).forEach(function(ssrc) {\n\n                // The (unified) m-line for this SSRC. We either create it from\n                // scratch or, if it's a grouped SSRC, we re-use a related\n                // mline. In other words, if the source is grouped with another\n                // source, put the two together in the same m-line.\n                var uLine;\n\n                // We assume here that we are the answerer in the O/A, so any\n                // offers which we translate come from the remote side, while\n                // answers are local. So the check below is to make that we\n                // handle receive-only SSRCs in a special way only if they come\n                // from the remote side.\n                if (desc.type==='offer') {\n                    // We want to detect SSRCs which are used by a remote peer\n                    // in an m-line with direction=recvonly (i.e. they are\n                    // being used for RTCP only).\n                    // This information would have gotten lost if the remote\n                    // peer used Unified Plan and their local description was\n                    // translated to Plan B. So we use the lack of an MSID\n                    // attribute to deduce a \"receive only\" SSRC.\n                    if (!sources[ssrc].msid) {\n                        recvonlySsrcs[bLine.type][ssrc] = sources[ssrc];\n                        // Receive-only SSRCs must not create new m-lines. We\n                        // will assign them to an existing m-line later.\n                        return;\n                    }\n                }\n\n                if (typeof ssrc2group[ssrc] !== 'undefined' &&\n                    Array.isArray(ssrc2group[ssrc])) {\n                    ssrc2group[ssrc].some(function (ssrcGroup) {\n                        // ssrcGroup.ssrcs *is* an Array, no need to check\n                        // again here.\n                        return ssrcGroup.ssrcs.some(function (related) {\n                            if (typeof ssrc2ml[related] === 'object') {\n                                uLine = ssrc2ml[related];\n                                return true;\n                            }\n                        });\n                    });\n                }\n\n                if (typeof uLine === 'object') {\n                    // the m-line already exists. Just add the source.\n                    uLine.sources[ssrc] = sources[ssrc];\n                    delete sources[ssrc].msid;\n                } else {\n                    // Use the \"bLine\" as a prototype for the \"uLine\".\n                    uLine = Object.create(bLine);\n                    ssrc2ml[ssrc] = uLine;\n\n                    if (typeof sources[ssrc].msid !== 'undefined') {\n                        // Assign the msid of the source to the m-line. Note\n                        // that it is not guaranteed that the source will have\n                        // msid. In particular \"recvonly\" sources don't have an\n                        // msid. Note that \"recvonly\" is a term only defined\n                        // for m-lines.\n                        uLine.msid = sources[ssrc].msid;\n                        delete sources[ssrc].msid;\n                    }\n\n                    // We assign one SSRC per media line.\n                    uLine.sources = {};\n                    uLine.sources[ssrc] = sources[ssrc];\n                    uLine.ssrcGroups = ssrc2group[ssrc];\n\n                    // Use the cached Unified Plan SDP (if it exists) to assign\n                    // SSRCs to mids.\n                    if (typeof cached !== 'undefined' &&\n                        typeof cached.media !== 'undefined' &&\n                        Array.isArray(cached.media)) {\n\n                        cached.media.forEach(function (m) {\n                            if (typeof m.sources === 'object') {\n                                Object.keys(m.sources).forEach(function (s) {\n                                    if (s === ssrc) {\n                                        uLine.mid = m.mid;\n                                    }\n                                });\n                            }\n                        });\n                    }\n\n                    midToString(uLine);\n\n                    if (typeof uLine.mid === 'undefined') {\n\n                        // If this is an SSRC that we see for the first time\n                        // assign it a new mid. This is typically the case when\n                        // this method is called to transform a remote\n                        // description for the first time or when there is a\n                        // new SSRC in the remote description because a new\n                        // peer has joined the conference. Local SSRCs should\n                        // have already been added to the map in the toPlanB\n                        // method.\n                        //\n                        // Because FF generates answers in Unified Plan style,\n                        // we MUST already have a cached answer with all the\n                        // local SSRCs mapped to some m-line/mid.\n\n                        if (desc.type === 'answer') {\n                            throw new Error(\"An unmapped SSRC was found.\");\n                        }\n\n                        uLine.mid = [bLine.type, '-', ssrc].join('');\n                    }\n\n                    // Include the candidates in the 1st media line.\n                    uLine.candidates = candidates;\n                    uLine.iceUfrag = iceUfrag;\n                    uLine.icePwd = icePwd;\n                    uLine.fingerprint = fingerprint;\n                    uLine.port = port;\n\n                    mid2ul[uLine.mid] = uLine;\n\n                    self.cache.mlU2BMap[uIdx] = bIdx;\n                    if (typeof self.cache.mlB2UMap[bIdx] === 'undefined') {\n                      self.cache.mlB2UMap[bIdx] = uIdx;\n                    }\n                    uIdx++;\n                }\n            });\n        }\n\n        bIdx++;\n    });\n\n    // Rebuild the media array in the right order and add the missing mLines\n    // (missing from the Plan B SDP).\n    session.media = [];\n    mids = []; // reuse\n\n    if (desc.type === 'answer') {\n\n        // The media lines in the answer must match the media lines in the\n        // offer. The order is important too. Here we assume that Firefox is\n        // the answerer, so we merely have to use the reconstructed (unified)\n        // answer to update the cached (unified) answer accordingly.\n        //\n        // In the general case, one would have to use the cached (unified)\n        // offer to find the m-lines that are missing from the reconstructed\n        // answer, potentially grabbing them from the cached (unified) answer.\n        // One has to be careful with this approach because inactive m-lines do\n        // not always have an mid, making it tricky (impossible?) to find where\n        // exactly and which m-lines are missing from the reconstructed answer.\n\n        for (var i = 0; i < cached.media.length; i++) {\n            var uLine = cached.media[i];\n            midToString(uLine);\n\n            if (typeof mid2ul[uLine.mid] === 'undefined') {\n\n                // The mid isn't in the reconstructed (unified) answer.\n                // This is either a (unified) m-line containing a remote\n                // track only, or a (unified) m-line containing a remote\n                // track and a local track that has been removed.\n                // In either case, it MUST exist in the cached\n                // (unified) answer.\n                //\n                // In case this is a removed local track, clean-up\n                // the (unified) m-line and make sure it's 'recvonly' or\n                // 'inactive'.\n\n                delete uLine.msid;\n                delete uLine.sources;\n                delete uLine.ssrcGroups;\n                if (!uLine.direction\n                    || uLine.direction === 'sendrecv')\n                    uLine.direction = 'recvonly';\n                else if (uLine.direction === 'sendonly')\n                    uLine.direction = 'inactive';\n            } else {\n                // This is an (unified) m-line/channel that contains a local\n                // track (sendrecv or sendonly channel) or it's a unified\n                // recvonly m-line/channel. In either case, since we're\n                // going from PlanB -> Unified Plan this m-line MUST\n                // exist in the cached answer.\n            }\n\n            session.media.push(uLine);\n            if (typeof uLine.mid === 'string') {\n                // inactive lines don't/may not have an mid.\n                mids.push(uLine.mid);\n            }\n        }\n    } else {\n\n        // SDP offer/answer (and the JSEP spec) forbids removing an m-section\n        // under any circumstances. If we are no longer interested in sending a\n        // track, we just remove the msid and ssrc attributes and set it to\n        // either a=recvonly (as the reofferer, we must use recvonly if the\n        // other side was previously sending on the m-section, but we can also\n        // leave the possibility open if it wasn't previously in use), or\n        // a=inactive.\n\n        if (typeof cached !== 'undefined' &&\n            typeof cached.media !== 'undefined' &&\n            Array.isArray(cached.media)) {\n            cached.media.forEach(function(uLine) {\n                midToString(uLine);\n                mids.push(uLine.mid);\n                if (typeof mid2ul[uLine.mid] !== 'undefined') {\n                    session.media.push(mid2ul[uLine.mid]);\n                } else {\n                    delete uLine.msid;\n                    delete uLine.sources;\n                    delete uLine.ssrcGroups;\n                    if (!uLine.direction\n                        || uLine.direction === 'sendrecv')\n                        uLine.direction = 'recvonly';\n                    if (!uLine.direction\n                        || uLine.direction === 'sendonly')\n                        uLine.direction = 'inactive';\n                    session.media.push(uLine);\n                }\n            });\n        }\n\n        // Add all the remaining (new) m-lines of the transformed SDP.\n        Object.keys(mid2ul).forEach(function(mid) {\n            if (mids.indexOf(mid) === -1) {\n                mids.push(mid);\n                if (mid2ul[mid].direction === 'recvonly') {\n                    // This is a remote recvonly channel. Add its SSRC to the\n                    // appropriate sendrecv or sendonly channel.\n                    // TODO(gp) what if we don't have sendrecv/sendonly\n                    // channel?\n\n                    session.media.some(function (uLine) {\n                        if ((uLine.direction === 'sendrecv' ||\n                            uLine.direction === 'sendonly') &&\n                            uLine.type === mid2ul[mid].type) {\n\n                            // mid2ul[mid] shouldn't have any ssrc-groups\n                            Object.keys(mid2ul[mid].sources).forEach(\n                                function (ssrc) {\n                                uLine.sources[ssrc] =\n                                    mid2ul[mid].sources[ssrc];\n                            });\n\n                            return true;\n                        }\n                    });\n                } else {\n                    session.media.push(mid2ul[mid]);\n                }\n            }\n        });\n    }\n\n    // After we have constructed the Plan Unified m-lines we can figure out\n    // where (in which m-line) to place the 'recvonly SSRCs'.\n    // Note: we assume here that we are the answerer in the O/A, so any offers\n    // which we translate come from the remote side, while answers are local\n    // (and so our last local description is cached as an 'answer').\n    [\"audio\", \"video\"].forEach(function (type) {\n        if (!session || !session.media || !Array.isArray(session.media))\n            return;\n\n        var idx = null;\n        if (Object.keys(recvonlySsrcs[type]).length > 0) {\n            idx = self.getFirstSendingIndexFromAnswer(type);\n            if (idx === null){\n                // If this is the first offer we receive, we don't have a\n                // cached answer. Assume that we will be sending media using\n                // the first m-line for each media type.\n\n                for (var i = 0; i < session.media.length; i++) {\n                    if (session.media[i].type === type) {\n                        idx = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (idx && session.media.length > idx) {\n            var mLine = session.media[idx];\n            Object.keys(recvonlySsrcs[type]).forEach(function(ssrc) {\n                if (mLine.sources && mLine.sources[ssrc]) {\n                    console.warn(\"Replacing an existing SSRC.\");\n                }\n                if (!mLine.sources) {\n                    mLine.sources = {};\n                }\n\n                mLine.sources[ssrc] = recvonlySsrcs[type][ssrc];\n            });\n        }\n    });\n\n    // We regenerate the BUNDLE group (since we regenerated the mids)\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = mids.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    // Cache the transformed SDP (Unified Plan) for later re-use in this\n    // function.\n    this.cache[desc.type] = resStr;\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * Maps the direction strings to their binary representation. The binary\n * representation of the directions will contain only 2 bits. The least\n * significant bit will indicate the receiving direction and the other bit will\n * indicate the sending direction.\n *\n * @type {Map<string, number>}\n */\nvar directionMasks = {\n    'inactive': 0, // 00\n    'recvonly': 1, // 01\n    'sendonly': 2, // 10\n    'sendrecv': 3  // 11\n};\n\n/**\n * Parses a number into direction string.\n *\n * @param {number} direction - The number to be parsed.\n * @returns {string} - The parsed direction string.\n */\nfunction parseDirection(direction) { // eslint-disable-line no-unused-vars\n    // Filter all other bits except the 2 less significant.\n    var directionMask = direction & 3;\n\n    switch (directionMask) {\n    case 0:\n        return 'inactive';\n    case 1:\n        return 'recvonly';\n    case 2:\n        return 'sendonly';\n    case 3:\n        return 'sendrecv';\n    }\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\n\nexports.write = function(session, opts) {\n\n  if (typeof session !== 'undefined' &&\n      typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // expand sources to ssrcs\n      if (typeof mLine.sources !== 'undefined' &&\n        Object.keys(mLine.sources).length !== 0) {\n          mLine.ssrcs = [];\n          Object.keys(mLine.sources).forEach(function (ssrc) {\n            var source = mLine.sources[ssrc];\n            Object.keys(source).forEach(function (attribute) {\n              mLine.ssrcs.push({\n                id: ssrc,\n                attribute: attribute,\n                value: source[attribute]\n              });\n            });\n          });\n          delete mLine.sources;\n        }\n\n      // join ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                Array.isArray(ssrcGroup.ssrcs)) {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n            }\n          });\n        }\n    });\n  }\n\n  // join group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids !== 'undefined' && Array.isArray(g.mids)) {\n        g.mids = g.mids.join(' ');\n      }\n    });\n  }\n\n  return transform.write(session, opts);\n};\n\nexports.parse = function(sdp) {\n  var session = transform.parse(sdp);\n\n  if (typeof session !== 'undefined' && typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // group sources attributes by ssrc\n      if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n        mLine.sources = {};\n        mLine.ssrcs.forEach(function (ssrc) {\n          if (!mLine.sources[ssrc.id])\n          mLine.sources[ssrc.id] = {};\n        mLine.sources[ssrc.id][ssrc.attribute] = ssrc.value;\n        });\n\n        delete mLine.ssrcs;\n      }\n\n      // split ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs === 'string') {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n            }\n          });\n        }\n    });\n  }\n  // split group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids === 'string') {\n        g.mids = g.mids.split(' ');\n      }\n    });\n  }\n\n  return session;\n};\n\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function arrayEquals(array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!arrayEquals.apply(this[i], [array[i]]))\n                return false;\n        } else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal:\n            // {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // If native simulcast is enabled, we must append the x-goog-conference\n        // attribute to the SDP.\n        if (self.ssrcCache.length < 1) {\n            removeGoogConference(mLine);\n        } else {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n"],"sourceRoot":""}